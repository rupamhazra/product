from django.shortcuts import render
from rest_framework import generics
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated,AllowAny
from rest_framework.authentication import TokenAuthentication
from attendance.models import *
from attendance.serializers import *
from holidays.models import *
from master.models import *
from core.models import *
# from vms.vms_pagination import CSLimitOffestpagination,CSPageNumberVmsPagination
from rest_framework.views import APIView
from django.conf import settings
from rest_framework import filters
from datetime import datetime,timedelta,date
import collections
from rest_framework.exceptions import APIException
from rest_framework import mixins
from master.serializers import UserModuleWiseListSerializer
from master.models import TMasterModuleRole
from users.models import TCoreUserDetail
from django.db.models import Sum
from custom_decorator import *
from django.db.models import Q
from django_filters.rest_framework import DjangoFilterBackend
import calendar
import pandas as pd
import numpy as np
import xlrd
from custom_decorator import *
from pagination import CSLimitOffestpagination,CSPageNumberPagination, OnOffPagination
from hrms.models import *
from datetime import datetime
from datetime import date, time
from datetime import date as mydate
# import datetime
from rest_framework.parsers import MultiPartParser
from django.core.files.storage import FileSystemStorage
import shutil
import platform
import re
from django.db.models import When, Case, Value, CharField, IntegerField, F, Q
from pandas import DataFrame
import os.path
from os import path
from SSIL_SSO_MS.settings import BASE_DIR
from attendance import logger
from global_function import department, designation, userdetails, getHostWithPort, getPathFromMediaURL, raw_query_extract, round_calculation,convert24, get_last_day_of_month
import time
from functools import reduce
import copy
from collections import OrderedDict
from attendance.tasks import ( hello, unjustified_sms_alert_to_all_employee_task, unjustified_mail_alert_to_all_employee_task, 
                                pending_sms_alert_to_reporting_head, pending_mail_alert_to_reporting_head,)
from celery import shared_task
from employee_leave_calculation import late_login_count_excluding_benchmark, early_logout_count_excluding_benchmark
import operator

from pms.models.module_attendence import PmsAttandanceFortnightLeaveDeductionLog

import logging
my_logger = logging.getLogger(__name__)	
'''
    For Knox 
    Author : Rupam Hazra
    Date : 16.03.2020
'''
# from knox.auth import TokenAuthentication
# from rest_framework import permissions
# from knox.models import AuthToken

# Create your views here.
############GLOBAL LOG VIEW ###############################################################
'''Author:- Abhisek Singh 
   Description:- Generate log for all the activities 
'''
# def activity_view(request):
#     # Authentication check.
#     authentication_result = views.authentication_check(request, [Account.ACCOUNT_ADMIN])
#     if authentication_result is not None: return authentication_result
#     # Get the template data from the session
#     template_data = views.parse_session(request, {'query': Action.objects.all().order_by('-timePerformed')})
#     # Proceed with the rest of the view
#     if 'sort' in request.GET:
#         if request.GET['sort'] == 'description':
#             template_data['query'] = Action.objects.all().order_by('description', '-timePerformed')
#         if request.GET['sort'] == 'user':
#             template_data['query'] = Action.objects.all().order_by('user__username', '-timePerformed')
#         if request.GET['sort'] == 'type':
#             template_data['query'] = Action.objects.all().order_by('type', 'description', '-timePerformed')
#     return render(request, 'healthnet/admin/activity.html', template_data)
#################################################################################################



class AttendanceAutomateFlexiHourV2(APIView):
    permission_classes = [AllowAny]
    #authentication_classes = [TokenAuthentication]
    #queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    #serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    #parser_classes = (MultiPartParser,)

    def connection(self):
    
        # for own mechine
        # conn = pyodbc.connect('Driver={SQL Server};'
        # 'Server=IT-RUPAM\SQLEXPRESS;'
        # 'Database=test_db_for_attendance;'
        # 'Trusted_Connection=yes;')

        import os
        import platform
        import pyodbc

        # print('os name',os.name)
        # print('platform',platform.system())
        # print('platform',platform.release())

        if platform.system() == "Linux":

            dsn = 'sqlserverdatasource'
            user = 'attendance_user'
            password = 'Attendance@123456'
            database = 'ssil_attendance_file_upload'
            con_string = 'DSN=%s;UID=%s;PWD=%s;DATABASE=%s;' % (dsn, user, password, database)
            conn = pyodbc.connect(con_string)

        elif platform.system() == "Windows":

            driver = '{SQL Server}'
            server = '192.168.24.212'
            db1 = 'ssil_attendance_file_upload'
            uname = 'attendance_user'
            pword = 'Attendance@123456'
            conn = pyodbc.connect(driver='{SQL Server}', host=server, database=db1, user=uname, password=pword)

        cursor = conn.cursor()
        
        return cursor,conn
    
    def fetch_attendance_data(self,fetch_single_column="all",date_check=""):

        cursor,conn = self.connection()

        if fetch_single_column == "all":
            #print('date_check',date_check)
            sql =  "SELECT * FROM ssil_attendance_file_upload.dbo.attendance_generate_tbl" 
            sql += " WHERE convert(date, Date_Status) = '%s'" % str(date_check)
            #sql += " AND Empid IN ('00000606','00000558','00000502','00001504')" 
            sql += " AND is_check=1"
            sql += " ORDER BY convert(date, Date_Status) ASC"
            #print('sql',sql)
        else:
            sql =  "SELECT  DISTINCT convert(date, Date_Status) AS Date FROM ssil_attendance_file_upload.dbo.attendance_generate_tbl" 
            sql += " WHERE convert(date, Date_Status) >= '2020-04-28'"
            sql += " AND is_check=0"
            sql += " ORDER BY Date ASC"

        cursor.execute(sql)

        #count = len(cursor.fetchall())
        #print('count',count)

        ## Get the fields name (only once!)
        columns = [column[0] for column in cursor.description]

        all_data_list = list()
        date_list = list()

        if fetch_single_column == "all":
            date_list = set()
            for i, row in enumerate(cursor.fetchall()):
                #print('row',row)
                
                ## Combine column with value in dict
                data = dict(zip(columns, row))

                # Convert datetime format
                data['Date_Status_convert'] =  datetime.strptime(data['Date_Status'],"%b %d %Y %H:%M%p") #"Feb 28 2020 12:00AM"
                
                # Extract date
                data['Date'] =  str(data['Date_Status_convert'])[0:10]

                # Formatting Date
                data['Date'] = datetime.strptime(data['Date'], '%Y-%m-%d').strftime('%d/%m/%Y')

                    # Convert datetime format
                data['Time_Status_convert'] =  datetime.strptime(data['Time_Status'],"%b %d %Y %H:%M%p") #"Feb 28 2020 12:00AM"

                # Extract Time
                data['Time1'] =  str(data['Time_Status']+'0')[13:]
                data['Time'] =  convert24(str(data['Time_Status'])[12:])
                data['Time'] = data['Time'].lstrip()
                data['Time_for_update'] =str(data['Time_Status'])[12:]

                date_list.add(data['Date'])
                all_data_list.append(data)
                
        else:
            for i, row in enumerate(cursor.fetchall()):
                #print('row',row)
                data = dict(zip(columns, row))

                # Formatting Date
                data['Date'] = datetime.strptime(data['Date'], '%Y-%m-%d').strftime('%d/%m/%Y')
                date_list.append(data['Date'])
                #all_data_list.append(data)


        return all_data_list,date_list
        

    def update_is_check_field_on_ms_sql_server(self,date,time,emp_id):
        cursor,conn = self.connection()

        sql =  "UPDATE ssil_attendance_file_upload.dbo.attendance_generate_tbl SET is_check='1'"
        sql += " WHERE convert(date, Date_Status) = '%s'" % str(date)
        sql += " AND convert(varchar(15),cast(Time_Status AS TIME),100) = '%s'" % str(time)
        sql += " AND Empid = '%s'" % str(emp_id)

        #print('sql',sql)

        cursor.execute(sql)

        conn.commit()

        #print(cursor.rowcount, "record(s) affected")

        return 1

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        
    def get(self, request, *args, **kwargs):
        #response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        #print("Please wait...")
        #print("processing...")

        data,date_list = self.fetch_attendance_data(fetch_single_column="Date")
        #data,date_list = self.fetch_attendance_data(fetch_single_column="all",date_check='2020-07-20')
        #print('data',date_list)
        #return Response({'date':date_list,'result':data})

        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        
        for day in date_list:
            if day:
                print('day',day)
                today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
                print("datetime",day,datetime.now())
                print("================================================")
                date_time_day = today_datetime.date()
                late_convence_limit = today_datetime.replace(hour=20, minute=30)
                print("late_convence_limit ::",late_convence_limit)
            
                '''
                    Delete only last Attendance  if these DATE had already in Attendance Date.
                '''
                # lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
                # if lase_attendance:
                #     print('delete_data',lase_attendance[0].__dict__['id'])
                #     AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                #     AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                #     Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

                '''
                    << Avoid attendance >>
                    IF User is Demo_user or Super_user
                    IF Punch id is ('PMSSITE000','#N/A','')
                    IF User had already Attendance for this day.
                '''
                # logic??? what is the filter logic for except avoid attendence?
                '''
                    1. Check If the user is terminated and termination date entered before termination date. 
                    2. Check if the user joining date is less than entered date.
                '''
                user_details = TCoreUserDetail.objects.filter(
                    ~Q(
                        # (   
                        #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                        # )|
                        (Q(cu_punch_id='#N/A'))|
                        (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                    ),
                    (
                        Q(
                            Q(termination_date__isnull=False)&Q(
                                Q(
                                    Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                                )|
                                Q(termination_date__date__gte=date_time_day)
                            )
                        )|
                        Q(Q(termination_date__isnull=True))
                    ),
                    #(Q(cu_punch_id__in=['00000606','00000558','00000502','00001504'])), # For checking specific punch id
                    (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

                print('Total_user',len(user_details))
                #time.sleep(30) # logic??? Wait to check the user_count.
                user_count = len(user_details) if user_details else 0
                #user_check_list = [x['cu_user_id']  for x in user_details]



                #return Response({'result':{'total_user_count':len(user_details),'msg':str(user_details)}})
            # else:
            #     return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

            # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
            '''
            Get the current month of AttendenceMonthMaster record.
            '''
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                            month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                    'year_start_date', 'year_end_date', 'month', 
                                                                                    'month_start', 'month_end','grace_available'
                                                                                    )
            # print("total_month_grace",total_month_grace)

            # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
            '''
            filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
            '''
            special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
                day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

            special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

            ##########
            for user in user_details:

                user_count = user_count-1
                #print("Wait...", user_count)
                att_filter = {}
                req_filter = {}
                pre_att_filter = {}
                pre_req_filter = {}
                late_con_filter = {}
                bench_filter = {}
                saturday_off_list = None
                pre_att = None
                saturday_off = False

                logout_time = None
                check_out = 0
                # adv_leave_type = None
                user_flag = 0
                cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
                cu_user_id = int(user['cu_user_id'])
                print("Punch Id : ", cu_user_id)
                #################
                '''
                Modified By :: Rajesh Samui
                Reason :: State Wise Holiday Calculation
                Description :: Holiday is now state wise and user dependent.
                Line :: 1289-1318
                Date :: 10-02-2020
                '''
                #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
                state_obj = tcore_user.job_location_state
                default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
                t_core_state_id = state_obj.id if state_obj else default_state.id
                holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


                print('holiday',holiday)
                print("special_full_day",special_full_day)
                print("special_day",special_day)

                # print(state_obj)
                # print(t_core_state_id)
                # print(holiday)

                ##########
                no_request = False
                day_remarks = ''
                if holiday:
                    # holiday_name = holiday[0]["holiday_name"]
                    day_remarks = holiday[0]["holiday__holiday_name"]
                    no_request = True
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    day_remarks = special_full_day[0]["remarks"]
                    no_request = True
                elif date_time_day.weekday()==6:
                    # print("Sunday")
                    day_remarks = "Sunday"
                    no_request = True

                #################
                if date_time_day.weekday()==5 and no_request is False:
                    ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                    '''
                        filtering the AttendenceSaturdayOffMaster to get the off saturday.
                        all_s_day :: All Saturday off
                    '''
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                        'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            day_remarks = 'Saturday'
                            saturday_off = True

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True

                        # print("Saturday")

                #################

                ###If user has no login/logout/lunch time >> Then fix their time##
                user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
                user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
                user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
                user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
                
                ## If Change Login-Logout time (Special Day) ##
                if special_day:
                    daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                    # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                    daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                                special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                    print("daily_logoutTime",daily_logoutTime)
                    pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
                elif today_datetime.weekday()==5:
                    daily_loginTime = user['daily_loginTime']
                    daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                    pre_att_filter['day_remarks'] = 'Present'

                else:
                    daily_loginTime = user['daily_loginTime']
                    daily_logoutTime = user['daily_logoutTime']
                    pre_att_filter['day_remarks'] = 'Present'
                
                ## LUNCH TIME ##
                lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                lunch_end = datetime.combine(today_datetime,user['lunch_end'])

                ## DAILY LOGIN-LOGOUT ##
                # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
                daily_login = datetime.combine(today_datetime,daily_loginTime)
                daily_logout = datetime.combine(today_datetime,daily_logoutTime)

                is_saturday_off = user['is_saturday_off'] 
                att_filter['employee_id'] = cu_user_id
                grace_over = False

                joining_date = user['joining_date']
                if total_month_grace:
                    grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                    print("GRACE", grace_available)
                    if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                        total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                        grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                        print("grace_available AAAA", grace_available, cu_user_id)

                availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                                Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                Q(is_requested=True) &
                                                                Q(is_deleted=False)&
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']
                print('availed_grace',availed_grace)
                availed_grace = availed_grace if availed_grace else 0
                
                # if grace_available<availed_grace: #nur code 
                #     grace_over = True
                #for index, row in data.iterrows():

                date_day = datetime.strptime(day, '%d/%m/%Y').strftime('%Y-%m-%d')
                #print('date_day',date_day)
                data,date_list = self.fetch_attendance_data(fetch_single_column="all",date_check=date_day)
                #print('data',data)
                for index, row in enumerate(data):
                    #print('row',row)
                    # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                    date_time = str(row['Date'])+'T'+str(row['Time'])
                    #date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                    date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M")
                    #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                    #print('rowEmpid',type(row['Empid']),row['Empid'])
                    if cu_punch_id == row['Empid']:
                        user_flag = 1
                        ##################### Added By Rupam #######################
                        deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                        if deviceMasterDetails:
                            current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                            # print("current_device",current_device)
                        ##################### END ###################################
                        pre_att_filter['employee_id'] = cu_user_id
                        # pre_att_filter['day_remarks'] = 'Present'
                        pre_att_filter['is_present'] = True
                        pre_att_filter['date'] = date_time_format
                        pre_att_filter['login_time'] = date_time_format
                        
                        pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour # fh

                        is_check_update = self.update_is_check_field_on_ms_sql_server(date_day,str(row['Time_for_update']),cu_punch_id)
                        
                        print("is_check_update",is_check_update)

                        ##First time log in a Day##Successful
                        if pre_att is None:                      
                            if pre_att_filter:
                                pre_att = self.att_create(pre_att_filter)
                                '''
                                TODO :: Previous benchmark time was 30 min.
                                1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
                                and this can be taken 3 days in a month.
                                '''
                                bench_time = daily_login + timedelta(minutes=15)
                                # print('bench_time',bench_time)
                                # if saturday_off is False and no_request is False:

                                ###Check login if After USER Daily login time = Duration### Successful
                                if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                    bench_filter['attendance']=pre_att
                                    bench_filter['attendance_date'] = daily_login.date()
                                    bench_filter['duration_start']=daily_login
                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                    bench_filter['punch_id'] = cu_punch_id
                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                        grace_over = True
                                    print('grace_over:', grace_over)
                        
                                    print("bench_time>pre_att_filter['login_time']:", bench_time>pre_att_filter['login_time'])
                                    print('user:', tcore_user.cu_user.get_full_name())
                                    # time.sleep(5)
                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                        bench_filter['checkin_benchmark']=True
                                        bench_filter['is_requested']=True
                                    else:
                                        bench_filter['checkin_benchmark']=False

                                    if bench_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                        bench_req = self.request_create(bench_filter)

                        ##After Daily Attendance## Successful
                        if pre_att:
                            att_log_create, create1 = AttendanceLog.objects.get_or_create(
                                attendance=pre_att,
                                employee_id=cu_user_id,
                                time=date_time_format,
                                device_no=current_device
                            )

                            


                            logout_time = date_time_format
                            duration_count = 0
                            # logic??? What is check_out? Explain 3 conditions.
                            '''

                                1. 1st time checkout for exist device.
                                2. If date_time_format is less than daily_login.
                                3. between login and logout
                            '''
                            if saturday_off is False and no_request is False:
                                if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                    # print("if current_device in device_no_list:")
                                    check_out = 1
                                    pre_req_filter['attendance'] = pre_att
                                    pre_req_filter['punch_id'] = cu_punch_id
                                    pre_req_filter['duration_start'] = date_time_format
                                elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                    check_out = 0
                                    pre_req_filter = {}
                                elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                    check_out = 0
                                    if date_time_format>daily_logout:
                                        pre_req_filter['duration_end'] = daily_logout
                                    else:
                                        pre_req_filter['duration_end'] = date_time_format

                                    if pre_req_filter['duration_start']<daily_login:
                                        pre_req_filter['duration_start'] = daily_login
                                    # else:
                                    #     pre_req_filter['duration_end'] = date_time_format

                                    # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                    #     pre_req_filter['checkin_benchmark']=True
                                    #     pre_req_filter['is_requested']=True

                                    '''
                                        Deviation duration calculation.
                                    '''
                                    if tcore_user.is_flexi_hour: # fh
                                        duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                    else:
                                        if lunch_end < pre_req_filter['duration_start']:
                                            duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_end']:
                                            duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                            duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                            duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                            duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                    # print("duration_count",duration_count, pre_req_filter)
                                    if duration_count>0:
                                        pre_req_filter['duration']=duration_count
                                        pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                        pre_req = self.request_create(pre_req_filter)
                                        pre_req_filter = {}
                                        #print("pre_req",pre_req)
                '''
                    To calculate if user can apply for late convence and create approval request based on that.
                '''
                if logout_time and pre_att:
                    # print('pre_att',pre_att.id)
                    pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                    if saturday_off is False and no_request is False:
                        ### IF Late convence ### Successful Testing
                        if daily_logoutTime < logout_time.time():
                            late_con_filter['attendance'] = pre_att
                            late_con_filter['punch_id'] = cu_punch_id
                            late_con_filter['attendance_date']=daily_logout.date()
                            late_con_filter['duration_start']=daily_logout
                            late_con_filter['duration_end']=logout_time
                            late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                            late_con_filter['is_late_conveyance']=True
                            # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                            '''
                                As per requirement and discussion with Tonmay Da(10.12.2019):
                                LATE CONVENCE always count after 08:30 PM 
                            '''
                            if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                                and late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                # print("late_con_filter",late_con_filter)
                                late_req = self.request_create(late_con_filter)
                                # print("late_req",late_req)
                        
                        ###If Logout less then User's Daily log out### Successful Testing
                        elif daily_logoutTime > logout_time.time():
                            late_con_filter['attendance']=pre_att
                            late_con_filter['punch_id'] = cu_punch_id
                            late_con_filter['attendance_date']=daily_logout.date()
                            late_con_filter['duration_start']=logout_time
                            late_con_filter['duration_end']=daily_logout
                            late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                            late_con_filter['is_late_conveyance']=False
                            # late_con_filter['request_type']='GR'
                            if late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                # print("late_con_filter",late_con_filter)
                                late_req = self.request_create(late_con_filter)
                                # print("late_req",late_req)

                '''
                TODO :: leave remarks for one type of leave 
                '''
                ## IF User Absent ###
                if user_flag==0:
                    # print("ABSENT")
                    is_required = False
                    # print("user",cu_user_id)
                    adv_leave_type = None
                    leave = EmployeeAdvanceLeaves.objects.filter(
                        Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                        (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                    # print("leave",leave)
                    # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                    spl_leave_type = None   
                    spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                        (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                    if spacial_leave:
                        spl_leave_type = spacial_leave[0]['leave_type']
                        att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                        is_required = True
                        time.sleep(5)
                        print('spacial leave found...')
                    elif leave:
                        adv_leave_type = leave[0]['leave_type']
                        # print("leave_type",leave[0]['leave_type'])
                        att_filter['day_remarks']= 'Leave'
                        is_required = True
                    elif saturday_off is True or no_request is True:
                        att_filter['day_remarks'] = day_remarks
                        print("att_filter",att_filter, saturday_off, no_request)
                    else:
                        is_required = True
                        att_filter['day_remarks']="Not Present"

                    if att_filter:
                        date = date_time[0:10]+'T'+str(daily_loginTime)
                        date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                        #print("date_time_format",date_time_date)
                        att_filter['date'] = date_time_date
                        #print("att_filter",att_filter)

                        abs_att = self.att_create(att_filter)
                        print("att_filter",abs_att, is_required)
                        if is_required is True:
                            req_filter['attendance']= abs_att
                            req_filter['attendance_date'] = daily_login.date()
                            req_filter['duration_start'] = daily_login 
                            req_filter['duration_end'] = daily_logout
                            req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60) if not tcore_user.is_flexi_hour else None
                            
                            if spl_leave_type:
                                req_filter['request_type']='FD'
                                req_filter['approved_status'] = 'approved'
                                req_filter['leave_type'] = spl_leave_type
                                req_filter['is_requested'] = True
                                req_filter['justification'] = spacial_leave[0]['reason']                            

                            elif adv_leave_type:
                                req_filter['request_type']='FD'
                                req_filter['approved_status'] = 'approved'
                                req_filter['leave_type'] = adv_leave_type
                                req_filter['is_requested'] = True
                                req_filter['justification'] = leave[0]['reason']

                            if req_filter:
                                print("req_filter,",req_filter)
                                req_filter['punch_id'] = cu_punch_id
                                if tcore_user.is_flexi_hour:
                                    if spl_leave_type or adv_leave_type:
                                        abs_req = self.request_create(req_filter)
                                else:
                                    abs_req = self.request_create(req_filter)
                                
                                print('attendance request created', abs_req, str(abs_req.id))

            
        return Response({'result':{'request_status':1,'msg':'Successful'}})



#:::::::::::::::::::::: DEVICE MASTER:::::::::::::::::::::::::::#
class DeviceMasterAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = DeviceMaster.objects.filter(is_deleted=False)
    serializer_class = DeviceMasterAddSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class DeviceMasterEditView(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = DeviceMaster.objects.filter(is_deleted=False)
	serializer_class = DeviceMasterEditSerializer

class DeviceMasterDeleteView(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = DeviceMaster.objects.filter(is_deleted=False)
	serializer_class = DeviceMasterDeleteSerializer

#:::::::::::::::::::::: ATTENDENCE MONTH MASTER:::::::::::::::::::::::::::#
class AttendenceMonthMasterAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendenceMonthMaster.objects.filter(is_deleted=False)
    serializer_class = AttendenceMonthMasterAddSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendenceMonthMasterEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendenceMonthMaster.objects.filter(is_deleted=False)
    serializer_class = AttendenceMonthMasterEditSerializer

    @response_modify_decorator_update
    def update(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)
        
    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendenceMonthMasterDeleteView(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = AttendenceMonthMaster.objects.filter(is_deleted=False)
	serializer_class = AttendenceMonthMasterDeleteSerializer

#:::::::::::::::::: DOCUMENTS UPLOAD ::::::::::::::::::::::::#
class AttendanceFileUploadOldVersion(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadOldVersionSerializer
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        os_type = platform.system().lower()
        # print("os_type",os_type)
        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        host_url = getHostWithPort(request)
        print('host_url',host_url)
        url = response.data['document'].replace(host_url,'./')
        # url = response.data['document'].replace('https://shyamsteel.tech:8002','.')
        # if os_type=="linux":
        #     url = re.sub('^http://(\d+\.)+\d+\:\d{4}','.',response.data['document'])
        # elif os_type=="windows":
        #     # url = url = re.sub('^http://(\d+\.)+\d+\:\d{4}','',response.data['document'])
        #     url = re.sub('^http://(\d+\.)+\d+\:\d{4}\/','',response.data['document'])
        # print("url", url)
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns

        # avoid_att = TMasterModuleRoleUser.objects.filter((Q(mmr_type=1)|Q(mmr_type=6))&Q(mmr_is_deleted=False)).values_list('mmr_user')
        # print("avoid_att",avoid_att)

        # user_details = TCoreUserDetail.objects.filter((~Q(cu_user__in=TMasterModuleRoleUser.objects.filter(Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)
        #                                                 ).values_list('mmr_user',flat=True))),
        #                                                 (~Q(cu_punch_id__in=['PMSSITE000','#N/A',''])),
        #                                                 (Q(cu_is_deleted=False))).values() ##avoid 'PMSSITE000','#N/A' punch ids
        # print('user_details',len(user_details))
        # user_count = len(user_details) if user_details else 0
        holiday_list = HolidaysList.objects.filter(status=True).values('holiday_date','holiday_name')
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        day = data.get('Date')[0]
        # print("dayyy", day)
        # request_checking_flag = 1
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime.date())
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            user_details = TCoreUserDetail.objects.filter(~Q(
                    (   
                        Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            user_count = len(user_details) if user_details else 0
            # return Response({'result':{'request_status':0,'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
        print("special_full_day",special_full_day)
        print("special_day",special_day)

        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            pre_att = None

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'
            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id']=cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                # print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    # print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            # print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None:                    
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            bench_time = daily_login + timedelta(minutes=30)
                            # print('bench_time',bench_time)

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time']:
                                    bench_filter['attendance']=pre_att
                                    bench_filter['attendance_date'] = daily_login.date()
                                    bench_filter['duration_start']=daily_login
                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                    bench_filter['punch_id'] = cu_punch_id
                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                        grace_over = True
                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                        bench_filter['checkin_benchmark']=True
                                        bench_filter['is_requested']=True
                                        # bench_filter['is_requested']=True
                                        # bench_filter['request_type']='GR'
                                    else:
                                        bench_filter['checkin_benchmark']=False

                                    if bench_filter['duration']>0:
                                        bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                            # print("if current_device in device_no_list:")
                            check_out = 1
                            pre_req_filter['attendance'] = pre_att
                            pre_req_filter['punch_id'] = cu_punch_id
                            pre_req_filter['duration_start'] = date_time_format
                        elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                            check_out = 0
                            pre_req_filter = {}
                        elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                            check_out = 0
                            if date_time_format>daily_logout:
                                pre_req_filter['duration_end'] = daily_logout
                            else:
                                pre_req_filter['duration_end'] = date_time_format

                            if pre_req_filter['duration_start']<daily_login:
                                pre_req_filter['duration_start'] = daily_login
                            # else:
                            #     pre_req_filter['duration_end'] = date_time_format

                            if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                pre_req_filter['checkin_benchmark']=True
                                pre_req_filter['is_requested']=True


                            if lunch_end < pre_req_filter['duration_start']:
                                duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_end']:
                                duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                            # print("duration_count",duration_count, pre_req_filter)
                            if duration_count>0:
                                pre_req_filter['duration']=duration_count
                                pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                pre_req = self.request_create(pre_req_filter)
                                pre_req_filter = {}
                                #print("pre_req",pre_req)


            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                ### IF Late convence ### Successful Testing
                if daily_logoutTime < logout_time.time():
                    late_con_filter['attendance'] = pre_att
                    late_con_filter['punch_id'] = cu_punch_id
                    late_con_filter['attendance_date']=daily_logout.date()
                    late_con_filter['duration_start']=daily_logout
                    late_con_filter['duration_end']=logout_time
                    late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                    late_con_filter['is_late_conveyance']=True
                    # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                    '''
                        As per requirement and discussion with Tonmay Da(10.12.2019):
                        LATE CONVENCE always count after 08:30 PM 
                    '''
                    if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                         and late_con_filter['duration']>0:
                        # print("late_con_filter",late_con_filter)
                        late_req = self.request_create(late_con_filter)
                        # print("late_req",late_req)
                
                ###If Logout less then User's Daily log out### Successful Testing
                elif daily_logoutTime > logout_time.time():
                    late_con_filter['attendance']=pre_att
                    late_con_filter['punch_id'] = cu_punch_id
                    late_con_filter['attendance_date']=daily_logout.date()
                    late_con_filter['duration_start']=logout_time
                    late_con_filter['duration_end']=daily_logout
                    late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                    late_con_filter['is_late_conveyance']=False
                    # late_con_filter['request_type']='GR'
                    if late_con_filter['duration']>0:
                        # print("late_con_filter",late_con_filter)
                        late_req = self.request_create(late_con_filter)
                        # print("late_req",late_req)

        ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                '''
                Modified By :: Rajesh Samui
                Reason :: State Wise Holiday Calculation
                Line :: 490-502
                Date :: 10-02-2020
                '''
                #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
                default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
                t_core_state_id = state_obj.id if state_obj else default_state.id
                holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')

                # print(state_obj)
                # print(t_core_user_state_code)
                # print(holiday)
                # print(holiday[0]["holiday__holiday_name"])


                if leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']=leave[0]['leave_type']
                    is_required = True
                elif holiday:
                    holiday_name = holiday[0]["holiday__holiday_name"]
                    att_filter['day_remarks']=holiday[0]["holiday__holiday_name"]
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    att_filter['day_remarks']=special_full_day[0]["remarks"]
                elif date_time_day.weekday()==6:
                    # print("Sunday")
                    att_filter['day_remarks']="Sunday"
                elif date_time_day.weekday()==5:
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                       'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            att_filter['day_remarks']='Saturday'

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            else:
                                #print("Not Present")
                                is_required = True
                                att_filter['day_remarks']="Not Present"
                                    
                    else:
                        is_required = True
                        att_filter['day_remarks']="Not Present"
                    # print("Saturday")

                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"
                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date']=date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    #print("att_filter",abs_att)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                        if adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['approved_status'] = 'approved'
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            req_filter['punch_id'] = cu_punch_id
                            abs_req = self.request_create(req_filter)
                            # print("abs_req",abs_req, req_filter)


        return Response({'result':{'request_status':1,'msg':'Successful'}})

#########

class AttendanceFileUploadForNewUser(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadSerializer
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        os_type = platform.system().lower()
        # print("os_type",os_type)
        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        host_url = getHostWithPort(request)
        print('host_url',host_url)
        url = response.data['document'].replace(host_url,'./')
        # if os_type=="linux":
        #     url = re.sub('^http://(\d+\.)+\d+\:\d{4}','.',response.data['document'])
        # elif os_type=="windows":
        #     # url = url = re.sub('^http://(\d+\.)+\d+\:\d{4}','',response.data['document'])
        #     url = re.sub('^http://(\d+\.)+\d+\:\d{4}\/','',response.data['document'])
        print("url", url)
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns

        # avoid_att = TMasterModuleRoleUser.objects.filter((Q(mmr_type=1)|Q(mmr_type=6))&Q(mmr_is_deleted=False)).values_list('mmr_user')
        # print("avoid_att",avoid_att)

        # user_details = TCoreUserDetail.objects.filter((~Q(cu_user__in=TMasterModuleRoleUser.objects.filter(Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)
        #                                                 ).values_list('mmr_user',flat=True))),
        #                                                 (~Q(cu_punch_id__in=['PMSSITE000','#N/A',''])),
        #                                                 (Q(cu_is_deleted=False))).values() ##avoid 'PMSSITE000','#N/A' punch ids
        # print('user_details',len(user_details))
        # user_count = len(user_details) if user_details else 0
        holiday_list = HolidaysList.objects.filter(status=True).values('holiday_date','holiday_name')
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        day = data.get('Date')[0]
        # print("dayyy", day)
        # request_checking_flag = 1
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime.date())
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            # lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            # if lase_attendance:
            #     print('delete_data',lase_attendance[0].__dict__['id'])
            #     AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
            #     AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
            #     Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # punch_id_list = []
            user_details = TCoreUserDetail.objects.filter(~Q(
                    (   
                        Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            # punch_id_list = [x['cu_punch_id'] for x in user_details]

            print('Total_user',len(user_details))
            # print('hdfhoihgfoishgoishgois',TCoreUserDetail.objects.filter(Q(cu_punch_id__in=['PMSSITE000','#N/A'])|
            #                                                             Q(cu_punch_id__exact="")).count())
            user_count = len(user_details) if user_details else 0
            # return Response({'result':{'request_status':user_count,'punch_id_list':punch_id_list,'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
        # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
        

        # print('holiday',holiday)
        # print("special_full_day",special_full_day)
        # print("special_day",special_day)
        # ##########
        # no_request = False
        # day_remarks = ''
        # if holiday:
        #     # holiday_name = holiday[0]["holiday_name"]
        #     day_remarks = holiday[0]["holiday_name"]
        #     no_request = True
        # elif special_full_day:
        #     # special_full_day_name = special_full_day[0]["full_day__date"]
        #     day_remarks = special_full_day[0]["remarks"]
        #     no_request = True
        # elif date_time_day.weekday()==6:
        #     # print("Sunday")
        #     day_remarks = "Sunday"
        #     no_request = True


        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Comment out line 725-745 because holiday is now state wise and user dependent.
            Line :: 777-798
            Date :: 10-02-2020
            '''
            # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')

            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True

                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None:                      
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            bench_time = daily_login + timedelta(minutes=30)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                    bench_filter['attendance']=pre_att
                                    bench_filter['attendance_date'] = daily_login.date()
                                    bench_filter['duration_start']=daily_login
                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                    bench_filter['punch_id'] = cu_punch_id
                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                        grace_over = True
                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                        bench_filter['checkin_benchmark']=True
                                        bench_filter['is_requested']=True
                                        # bench_filter['is_requested']=True
                                        # bench_filter['request_type']='GR'
                                    else:
                                        bench_filter['checkin_benchmark']=False

                                    if bench_filter['duration']>0:
                                        bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                if date_time_format>daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start']<daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True


                                if lunch_end < pre_req_filter['duration_start']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_end']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                    duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)


            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)

        ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                if leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']=leave[0]['leave_type']
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    # print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                        if adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['approved_status'] = 'approved'
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            # print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            abs_req = self.request_create(req_filter)
                            # print("abs_req",abs_req, req_filter)


        return Response({'result':{'request_status':1,'msg':'Successful'}})


#:::::::::::::::::: DOCUMENTS UPLOAD MODIFICATION::::::::::::::::::::::::#
class AttendanceFileUpload(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadSerializer
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        host_url = getHostWithPort(request)
        print('host_url',host_url)
        url = response.data['document'].replace(host_url,'./')
        # print("url", url)
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()

        '''
        Skip the first few rows and read the excel after this rows in pandas
        '''
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns
        #############################################################################################
        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        ##############################################################################################
        day = data.get('Date')[0]
        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(~Q(
                    (   
                        Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            time.sleep(10) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            #user_check_list = [x['cu_user_id']  for x in user_details]

            #return Response({'result':{'request_status':user_check_list,'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
        # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

        # print('holiday',holiday)
        # print("special_full_day",special_full_day)
        # print("special_day",special_day)
        # ##########
        # no_request = False
        # day_remarks = ''
        # if holiday:
        #     # holiday_name = holiday[0]["holiday_name"]
        #     day_remarks = holiday[0]["holiday_name"]
        #     no_request = True
        # elif special_full_day:
        #     # special_full_day_name = special_full_day[0]["full_day__date"]
        #     day_remarks = special_full_day[0]["remarks"]
        #     no_request = True
        # elif date_time_day.weekday()==6:
        #     # print("Sunday")
        #     day_remarks = "Sunday"
        #     no_request = True


        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Comment out line 1238-1257 because holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                '''
                    filtering the AttendenceSaturdayOffMaster to get the off saturday.
                    all_s_day :: All Saturday off
                '''
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True

                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None:                      
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            bench_time = daily_login + timedelta(minutes=30)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                    bench_filter['attendance']=pre_att
                                    bench_filter['attendance_date'] = daily_login.date()
                                    bench_filter['duration_start']=daily_login
                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                    bench_filter['punch_id'] = cu_punch_id
                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                        grace_over = True
                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                        bench_filter['checkin_benchmark']=True
                                        bench_filter['is_requested']=True
                                        # bench_filter['is_requested']=True
                                        # bench_filter['request_type']='GR'
                                    else:
                                        bench_filter['checkin_benchmark']=False

                                    if bench_filter['duration']>0:
                                        bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                if date_time_format>daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start']<daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True

                                '''
                                    Deviation duration calculation.
                                '''
                                if lunch_end < pre_req_filter['duration_start']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_end']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                    duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)

        ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                if leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']=leave[0]['leave_type']
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                        if adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['approved_status'] = 'approved'
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            abs_req = self.request_create(req_filter)
                            # abs_check = self.absent_checking(req_filter)
                            # print("abs_req",abs_req, req_filter)


        return Response({'result':{'request_status':1,'msg':'Successful'}})

#########

class AttendencePerDayDocumentAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendencePerDayDocumentAddSerializer

# class AttendenceJoiningApprovedLeaveAddView(generics.ListCreateAPIView):
#     permission_classes = [IsAuthenticated]
#     authentication_classes = [TokenAuthentication]
#     queryset = JoiningApprovedLeave.objects.filter(is_deleted=False)
#     serializer_class = AttendenceJoiningApprovedLeaveAddSerializer

#     @response_modify_decorator_get
#     def get(self, request, *args, **kwargs):
#         return response

class AttendanceGraceLeaveListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    serializer_class = AttendanceGraceLeaveListSerializer

    def get(self, request, *args, **kwargs):
        response=super(AttendanceGraceLeaveListView,self).get(self, request, args, kwargs)
        date =self.request.query_params.get('date', None)
        print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()

        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            print('sada',type(total_month_grace[0]['month_start']))
            date_object= total_month_grace[0]['month_start'].date()- timedelta(days=1)  
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
                                                                                
        print('total_month_grace',total_month_grace)
        total_grace['month_start']=total_month_grace[0]['month_start']
        total_grace['month_end']=total_month_grace[0]['month_end']
        total_grace['year_start']=total_month_grace[0]['year_start_date']
        total_grace['year_end']=total_month_grace[0]['year_end_date']
        print("total_month_grace",total_grace)

        if total_month_grace:
            total_grace['total_month_grace']=total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] else None

        # for data in response.data:
        availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']

        total_grace['availed_grace']=availed_grace if availed_grace else 0
        total_grace['grace_balance']=total_month_grace[0]['grace_available'] - total_grace['availed_grace']

        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=employee_id)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))
                                                          ).values('leave_type','start_date','end_date')
        print('advance_leave',advance_leave)     
        advance_cl=0
        advance_el=0
        advance_ab=0
        day=0
        if advance_leave:
            for leave in advance_leave:
                print('leave',leave)
                start_date=leave['start_date'].date()
                end_date=leave['end_date'].date()+timedelta(days=1)
                print('start_date,end_date',start_date,end_date)
                if date_object < end_date:
                    if date_object < start_date:
                        day=(end_date-start_date).days 
                        print('day',day)
                    elif date_object > start_date:
                        day=(end_date-date_object).days
                        print('day2',day)
                    else:
                        day=(end_date-date_object).days

                if leave['leave_type']=='CL':
                    advance_cl+=day
                elif leave['leave_type']=='EL':
                    advance_el+=day
                elif leave['leave_type']=='AB':
                    advance_ab+=day
              
            print('advance_el',advance_el)
            print('advance_cl',advance_cl)

        print("datetime_start", datetime.now()-aa)

        leave_attendence_id_data=[]
        availed_leave=[]
        availed_data=AttendanceApprovalRequest.objects.\
            filter((Q(request_type='HD')|Q(request_type='FD')),(Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=employee_id,
            is_requested=True,is_deleted=False).values('request_type','leave_type',
            'leave_type_changed_period','leave_type_changed','attendance')

        for x in availed_data:
            if x['attendance'] not in leave_attendence_id_data:
                leave_attendence_id_data.append(x['attendance'])
                availed_leave.append(x)

        print("leave_attendence_id_data",leave_attendence_id_data)
        print("actual_data",availed_leave)

        availed_cl=0
        availed_el=0
        availed_sl=0
        availed_ab=0
        type_leave = ''
        availed = 0
        if availed_leave:
            for leave in availed_leave:
                if leave['leave_type_changed_period']=='HD' and leave['leave_type_changed'] is not None:
                    availed = 0.5
                    type_leave = leave['leave_type_changed']
                elif leave['leave_type_changed_period']=='FD' and leave['leave_type_changed'] is not None:
                    availed = 1
                    type_leave = leave['leave_type_changed']
                elif leave['request_type']=='FD' and leave['leave_type'] is not None:
                    availed = 1
                    type_leave = leave['leave_type']
                elif leave['request_type']=='HD' and leave['leave_type'] is not None:
                    availed = 0.5
                    type_leave = leave['leave_type']

                if type_leave == 'CL':
                    availed_cl+=availed
                elif type_leave == 'EL':
                    availed_el+=availed
                elif type_leave == 'SL':
                    availed_sl=availed_sl + availed
                elif type_leave == 'AB':
                    availed_ab+=availed
                availed=0

        availed_cl=float(availed_cl)+float(advance_cl)
        availed_el=float(availed_el)+float(advance_el)
        availed_ab =float(availed_ab)+float(advance_ab)

        total_grace['availed_cl']=availed_cl
        total_grace['availed_el']=availed_el
        total_grace['availed_sl']=availed_sl
        total_grace['availed_ab']=availed_ab
        total_grace['total_availed_leave']=float(availed_cl) + float(availed_el) + float(availed_sl)

        core_user_detail=TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False).values('joining_date',
                                                                                                    'granted_cl',
                                                                                                    'granted_sl',
                                                                                                    'granted_el'
                                                                                                    )
        print('core_user_detail',core_user_detail)
        if core_user_detail:
            if core_user_detail[0]['joining_date']>total_month_grace[0]['year_start_date']:
                approved_leave=JoiningApprovedLeave.objects.filter(employee=employee_id,is_deleted=False).values('cl',
                                                                                                                 'el',
                                                                                                                 'sl',
                                                                                                                 'year',
                                                                                                                 'month',
                                                                                                                 'first_grace'
                                                                                                                 )
                if approved_leave:
                    total_grace['granted_cl']=approved_leave[0]['cl']
                    total_grace['cl_balance']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) -float(availed_cl)
                    total_grace['granted_el']=approved_leave[0]['el']
                    total_grace['el_balance']=float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 ) -float(availed_el)
                    total_grace['granted_sl']=approved_leave[0]['sl']
                    total_grace['sl_balance']=float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) -float(availed_sl)
                    total_grace['total_granted_leave']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) + float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0) + float(approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0)
                    total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])
                    if total_month_grace[0]['month']==approved_leave[0]['month']:    #for joining month only
                        total_grace['total_month_grace']=approved_leave[0]['first_grace']
                        total_grace['month_start']=core_user_detail[0]['joining_date']
                        total_grace['grace_balance']=total_grace['total_month_grace'] - total_grace['availed_grace']
            else:
                total_grace['granted_cl']=core_user_detail[0]['granted_cl']
                total_grace['cl_balance']=float(core_user_detail[0]['granted_cl']) - float(availed_cl)
                total_grace['granted_el']=core_user_detail[0]['granted_el']
                total_grace['el_balance']=float(core_user_detail[0]['granted_el']) - float(availed_el)
                total_grace['granted_sl']=core_user_detail[0]['granted_sl']
                total_grace['sl_balance']=float(core_user_detail[0]['granted_sl']) - float(availed_sl)
                total_grace['total_granted_leave']=float(core_user_detail[0]['granted_cl']) + float(core_user_detail[0]['granted_el']) + float(core_user_detail[0]['granted_sl'])
                total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])

        data_dict['result'] = total_grace
        
        print("total_time", datetime.now()-aa)

        if total_grace:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(total_grace) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        total_grace = data_dict
        return Response(total_grace)


class AttendanceGraceLeaveListModifiedView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    # serializer_class = AttendanceGraceLeaveListModifiedSerializer

   

    def get(self, request, *args, **kwargs):
        # response=super(AttendanceGraceLeaveListModifiedView,self).get(self, request, args, kwargs)
        date =self.request.query_params.get('date', None)
        # print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        #date_object = datetime.now().date()
        #print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            #print('sada',type(total_month_grace[0]['month_start']))
            '''
                Changed by Rupam Hazra due to same variable date_object
            '''
            date_object_previous= total_month_grace[0]['month_start'].date()- timedelta(days=1)  
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object_previous,
                                        month_end__date__gte=date_object_previous,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
                                                                                
        #print('total_month_grace',total_month_grace)
        total_grace['month_start']=total_month_grace[0]['month_start']
        total_grace['month_end']=total_month_grace[0]['month_end']
        total_grace['year_start']=total_month_grace[0]['year_start_date']
        total_grace['year_end']=total_month_grace[0]['year_end_date']
        #print("total_month_grace",total_grace)

        if total_month_grace:
            total_grace['total_month_grace']=total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] else 0

        # for data in response.data:
        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                                Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        total_grace['availed_grace']=availed_grace if availed_grace else 0
        total_grace['grace_balance']=total_month_grace[0]['grace_available'] - total_grace['availed_grace']


        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=employee_id)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_cl=0
        advance_el=0
        advance_ab=0
        day=0

        date =self.request.query_params.get('employee', None)

        last_attendance = Attendance.objects.filter(employee=employee_id).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<total_grace['year_end'].date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = total_grace['year_end'].date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='CL':
                        advance_cl+=day
                    elif leave['leave_type']=='EL':
                        advance_el+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day
        
        # if advance_leave:
        #     for leave in advance_leave.iterator():
        #         #print('leave',leave)
        #         start_date=leave['start_date'].date()
        #         end_date=leave['end_date'].date()+timedelta(days=1)
        #         #print('start_date,end_date',start_date,end_date)
        #         if date_object < end_date:
        #             if date_object < start_date:
        #                 day=(end_date-start_date).days 
        #                 #print('day',day)
        #             elif date_object > start_date:
        #                 day=(end_date-date_object).days
        #                 #print('day2',day)
        #             else:
        #                 day=(end_date-date_object).days

        #         if leave['leave_type']=='CL':
        #             advance_cl+=day
        #             #print('advance_cl_1',advance_cl)
        #         elif leave['leave_type']=='EL':
        #             advance_el+=day
        #             #print('advance_el_2',advance_el)
        #         elif leave['leave_type']=='AB':
        #             advance_ab+=day

        

        print('advance_cl',advance_cl)
        print('advance_el',advance_el)


        
        """ 
        LEAVE CALCULATION:-
        1)SINGLE LEAVE CALCULATION
        2)MULTIPLE LEAVE FOR ONE DAY IS AUTO CONVERTED TO ONE TYPE OF LEAVE 
        EDITED BY :- Abhishek.singh@shyamfuture.com
        
        """ 
        #starttime = datetime.now()
        availed_hd_cl=0.0
        availed_hd_el=0.0
        availed_hd_sl=0.0
        availed_hd_ab=0.0
        availed_cl=0.0
        availed_el=0.0
        availed_sl=0.0
        availed_ab=0.0

        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                                                        (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                                                        attendance__employee=employee_id,is_requested=True).values('duration_start__date').distinct()
        #print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        #print("date_list",date_list)
        # for data in attendence_daily_data.iterator():
            # print(datetime.now())
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance__employee=employee_id,
                        attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        #print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:

            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            availed_cl=availed_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            availed_cl=availed_cl+1.0
                        elif l_type == 'EL':
                            availed_el=availed_el+1.0
                        elif l_type == 'SL':
                            availed_sl=availed_sl+1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            availed_hd_cl=availed_hd_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            availed_hd_cl=availed_hd_cl+1.0
                        elif l_type == 'EL':
                            availed_hd_el=availed_hd_el+1.0
                        elif l_type == 'SL':
                            availed_hd_sl=availed_hd_sl+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
        

        

        print("availed_cl",availed_cl)
        print("availed_el",availed_el)

        print('availed_hd_cl',availed_hd_cl/2)
        print('availed_hd_el',availed_hd_el/2)

        total_grace['availed_cl']=float(availed_cl)+float(advance_cl)+float(availed_hd_cl/2)
        print("total_grace['availed_cl']",total_grace['availed_cl'])
        total_grace['availed_el']=float(availed_el)+float(advance_el)+float(availed_hd_el/2)
        print("total_grace['availed_el']",total_grace['availed_el'])
        total_grace['availed_sl']=float(availed_sl)+float(availed_hd_sl/2)
        #print("total_grace['availed_sl']",total_grace['availed_sl'])
        total_grace['availed_ab']=float(availed_ab)+float(advance_ab)+float(availed_hd_ab/2)
        #print("total_grace['availed_ab']",total_grace['availed_ab'])


        total_grace['total_availed_leave']=total_grace['availed_cl'] +total_grace['availed_el'] + total_grace['availed_sl']

        core_user_detail=TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False).values('joining_date',
                                                                                                    'granted_cl',
                                                                                                    'granted_sl',
                                                                                                    'granted_el',
                                                                                                    'is_confirm',
                                                                                                    'salary_type__st_name'
                                                                                                    )
        #print('core_user_detail',core_user_detail)

        if core_user_detail:
            if core_user_detail[0]['salary_type__st_name']=='13' and core_user_detail[0]['is_confirm'] is False:
                total_grace['is_confirm'] = False
            else:
                total_grace['is_confirm'] = True
            if core_user_detail[0]['joining_date']>total_month_grace[0]['year_start_date']:
                approved_leave=JoiningApprovedLeave.objects.filter(employee=employee_id,is_deleted=False).values('cl', 'el', 'sl',
                                                                                                                 'year', 'month',
                                                                                                                 'first_grace')
                if approved_leave:
                    total_grace['granted_cl']=approved_leave[0]['cl']
                    total_grace['cl_balance']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) - float(total_grace['availed_cl'])
                    total_grace['granted_el']=approved_leave[0]['el']
                    total_grace['el_balance']=float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 ) - float(total_grace['availed_el'])
                    total_grace['granted_sl']=approved_leave[0]['sl']
                    total_grace['sl_balance']=float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) - float(total_grace['availed_sl'])
                    total_grace['total_granted_leave']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) + float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0) + float(approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0)
                    total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])
                    if total_month_grace[0]['month']==approved_leave[0]['month']:    #for joining month only
                        total_grace['total_month_grace']=approved_leave[0]['first_grace']
                        total_grace['month_start']=core_user_detail[0]['joining_date']
                        total_grace['grace_balance']=total_grace['total_month_grace'] - total_grace['availed_grace']
            else:
                total_grace['granted_cl']=core_user_detail[0]['granted_cl']
                total_grace['cl_balance']=float(core_user_detail[0]['granted_cl']) -  float(total_grace['availed_cl'])
                total_grace['granted_el']=core_user_detail[0]['granted_el']
                total_grace['el_balance']=float(core_user_detail[0]['granted_el']) - float(total_grace['availed_el'])
                total_grace['granted_sl']=core_user_detail[0]['granted_sl']
                total_grace['sl_balance']=float(core_user_detail[0]['granted_sl']) - float(total_grace['availed_sl'])
                total_grace['total_granted_leave']=float(core_user_detail[0]['granted_cl']) + float(core_user_detail[0]['granted_el']) + float(core_user_detail[0]['granted_sl'])
                total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])

        data_dict['result'] = total_grace
        time_last = datetime.now()-aa
        #print("time_last",time_last)
        # data_dict['result'] = "Successful"
        if total_grace:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(total_grace) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        total_grace = data_dict
        return Response(total_grace)


class AttendanceGraceLeaveListModifiedViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)

    def get(self, request, *args, **kwargs):
        # response=super(AttendanceGraceLeaveListModifiedView,self).get(self, request, args, kwargs)
        date =self.request.query_params.get('date', None)
        # print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        #date_object = datetime.now().date()
        #print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            #print('sada',type(total_month_grace[0]['month_start']))
            '''
                Changed by Rupam Hazra due to same variable date_object
            '''
            date_object = total_month_grace[0]['month_start'].date()- timedelta(days=1)

        #user = TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False).first()
        user = TCoreUserDetail.objects.filter(cu_user=employee_id).first() # Added By Rupam Hazra
        result = all_leave_calculation_upto_applied_date(date_object=date_object, user=user)
        
        data_dict['result'] = result
        time_last = datetime.now()-aa
        #print("time_last",time_last)
        # data_dict['result'] = "Successful"
        if result:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(result) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        return Response(data_dict)


class AttendanceLateConveyanceApplyView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    serializer_class = AttendanceLateConveyanceApplySerializer

    # @response_modify_decorator_get
    # def get(self, request, *args, **kwargs):
    #     return response

    def get(self,request,*args, **kwargs):
        attandance_id = self.kwargs['pk']
        attendance_approval_request = AttendanceApprovalRequest.objects.filter(attendance=attandance_id,is_deleted=False,is_late_conveyance=True)
        data = {}
        data_dict = {}
        conveyance_data_dict = {}
        if attendance_approval_request:
            print('attendance_approval_request',attendance_approval_request)
            conveyance_data_list = []
            for conveyance_data in attendance_approval_request:
                first_name=conveyance_data.conveyance_alloted_by.first_name if conveyance_data.conveyance_alloted_by.first_name  else None
                last_name=conveyance_data.conveyance_alloted_by.last_name if conveyance_data.conveyance_alloted_by.last_name  else None
                data = {
                    'id' : conveyance_data.id,
                    'vehicle_type' : conveyance_data.vehicle_type.name if conveyance_data.vehicle_type else '',
                    'vehicle_type_desctiption' : conveyance_data.vehicle_type.description if conveyance_data.vehicle_type else '',
                    'vehicle_type_id' : conveyance_data.vehicle_type.id if conveyance_data.vehicle_type else '',
                    'conveyance_purpose':conveyance_data.conveyance_purpose,
                    'conveyance_alloted_by':conveyance_data.conveyance_alloted_by.id,
                    'conveyance_alloted_by_name':first_name +" "+ last_name,
                    'from_place' : conveyance_data.from_place,
                    'to_place' : conveyance_data.to_place,
                    'conveyance_expense' : conveyance_data.conveyance_expense,
                    'approved_expenses' : conveyance_data.conveyance_expense
                }
                print('data',data)
                conveyance_data_list.append(data)
            print('conveyance_data_list',conveyance_data_list)
            data_dict['result'] = conveyance_data_list
            if data:
                data_dict['request_status'] = 1
                data_dict['msg'] = settings.MSG_SUCCESS
            elif len(data) == 0:
                data_dict['request_status'] = 1
                data_dict['msg'] = settings.MSG_NO_DATA
            else:
                data_dict['request_status'] = 0
                data_dict['msg'] = settings.MSG_ERROR
            data = data_dict
            return Response(data)

class AttendanceLateConveyanceDocumentAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandanceApprovalDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceLateConveyanceDocumentAddSerializer


class AttandanceApprovalDocumentUploadV2(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandanceApprovalDocuments.objects.filter(is_deleted=False)
    serializer_class = AttandanceApprovalDocumentUploadSerializerV2


class AttendanceAdvanceLeaveListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdvanceLeaveListSerializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        cur_date = datetime.now().date()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=cur_date,
                                        month_end__date__gte=cur_date,is_deleted=False).values(
                                                                                 'year_start_date__date',
                                                                                 'year_end_date__date')

        emp_id = self.request.query_params.get('emp_id', None)
        if self.queryset.count():
            if total_month_grace:
                #print("total_month_grace",total_month_grace)
                return self.queryset.filter(((Q(start_date__date__gte=total_month_grace[0]['year_start_date__date'])&
                                            Q(end_date__date__lte=total_month_grace[0]['year_end_date__date']))|
                                            (Q(start_date__date__lte=total_month_grace[0]['year_start_date__date'])&
                                            Q(end_date__date__gte=total_month_grace[0]['year_start_date__date']))|
                                            (Q(start_date__date__lte=total_month_grace[0]['year_end_date__date'])&
                                            Q(end_date__date__gte=total_month_grace[0]['year_end_date__date']))
                                            ),employee_id=emp_id)
            else:
                return self.queryset.filter(((Q(start_date__date__gte=cur_date)&Q(end_date__date__lte=cur_date))|
                                            (Q(start_date__date__lte=cur_date)&Q(end_date__date__gte=cur_date))|
                                            (Q(start_date__date__lte=cur_date)&Q(end_date__date__gte=cur_date))
                                            ),employee_id=emp_id)
        else:
            return self.queryset

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdvanceLeaveListView,self).get(self, request, args, kwargs)
        for data in response.data['results']:
            #print(data['approved_status'])
            data['approved_status']=data['approved_status'].capitalize()
        return response

class AttendanceAdvanceLeaveReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceAdvanceLeaveListSerializer
    pagination_class = CSPageNumberPagination
    queryset = EmployeeAdvanceLeaves.objects.filter(Q(is_deleted=False) & 
                                                    (Q(approved_status='approved')|Q(approved_status='reject'))
                                                   )
    def get_queryset(self):

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            search = self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            sort_field='-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)

            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)


            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='start_date' and order_by=='asc':
                    sort_field='start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name =='start_date' and order_by=='desc':
                    sort_field='-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name =='end_date' and order_by=='asc':
                    sort_field='end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name =='end_date' and order_by=='desc':
                    sort_field='-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name =='date_of_application' and order_by=='asc':
                    sort_field='created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name =='date_of_application' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='employee__cu_user__hod'
                

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list
                
                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)

                    
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 


                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()



    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdvanceLeaveReportView,self).get(self, request, args, kwargs)
        data_list =list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name =='leave_count' and order_by=='asc':
            #import operator
            response.data['results'] = sorted(response.data['results'], key=lambda x: x['leave_count'])
            print('response.data',response.data['results'])
        
        
        for data in response.data['results']:
            print('data',data)
            data['employee_name'] = ''
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            data['start_date'] =   data['start_date'][0:10] if data['start_date'] else ''
            data['end_date'] =  data['end_date'][0:10] if data['end_date'] else ''
            
            data_list.append([data['employee_name'],data['start_date'],data['end_date'],data['leave_type'],data['leave_count'],
            data['approved_status'],data['reason'],data['remarks']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/advance_leave_report/document'):
                    file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'
            else:
                os.makedirs('media/attendance/advance_leave_report/document')
                file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Start Date','End Date','Leave Type','Leave Count','Approved Status',
            'Reason','Remarks'])
            export_csv = final_df.to_excel (file_name, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        response.data['url'] = url
        return response


class AttendanceAdvanceLeaveReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceAdvanceLeaveListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = EmployeeAdvanceLeaves.objects.filter(Q(is_deleted=False) & 
                                                    (Q(approved_status='approved')|Q(approved_status='reject'))
                                                   )
    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)
        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        attendance_type = self.request.query_params.get('attendance_type', None)
        if not attendance_type:
            attendance_type = 'HRMS'

        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                    
                ).values_list('cu_user')
                print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        else:
            users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                    
                ).values_list('cu_user')
            print('users_list_under_the_login_user',users_list_under_the_login_user)
            if users_list_under_the_login_user:
                attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                            employee__in=users_list_under_the_login_user,
                            is_deleted = False
                            )
                print('attedence_details',attendence_id_list)
                if attendence_id_list:
                    search_sort_flag = True
                    self.queryset = attendence_id_list.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))
                else:
                    search_sort_flag = False
                    self.queryset = self.queryset
            else:
                search_sort_flag = False
                self.queryset = []
        
        if search_sort_flag:
            filter={}
            search = self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            sort_field='-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)

            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            company = self.request.query_params.get('company', None)
            department = self.request.query_params.get('department', None)


            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='start_date' and order_by=='asc':
                    sort_field='start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name =='start_date' and order_by=='desc':
                    sort_field='-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name =='end_date' and order_by=='asc':
                    sort_field='end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name =='end_date' and order_by=='desc':
                    sort_field='-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name =='date_of_application' and order_by=='asc':
                    sort_field='created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name =='date_of_application' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='employee__cu_user__hod'
                

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list
                
                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if company:
                    filter['employee__cu_user__company__id'] = company
                if department:
                    filter['employee__cu_user__department__id'] = department


                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)

                    
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 


                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()



    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdvanceLeaveReportViewV2,self).get(self, request, args, kwargs)
        data_list =list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name =='leave_count' and order_by=='asc':
            #import operator
            response.data['results'] = sorted(response.data['results'], key=lambda x: x['leave_count'])
            print('response.data',response.data['results'])
        
        
        for data in response.data['results']:
            print('data',data)
            data['employee_name'] = ''
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            data['leave_type'] = 'All Leave' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            data['start_date'] =   data['start_date'][0:10] if data['start_date'] else ''
            data['end_date'] =  data['end_date'][0:10] if data['end_date'] else ''
            
        return response


class AttendanceAdvanceLeaveReportExportDownloadViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceAdvanceLeaveListSerializerV2
    queryset = EmployeeAdvanceLeaves.objects.filter(Q(is_deleted=False) & 
                                                    (Q(approved_status='approved')|Q(approved_status='reject'))
                                                   )
    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        attendance_type = self.request.query_params.get('attendance_type', None)
        if not attendance_type:
            attendance_type = 'HRMS'
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        else:
            users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                    
                ).values_list('cu_user')
            print('users_list_under_the_login_user',users_list_under_the_login_user)
            if users_list_under_the_login_user:
                attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                            employee__in=users_list_under_the_login_user,
                            is_deleted = False
                            )
                print('attedence_details',attendence_id_list)
                if attendence_id_list:
                    search_sort_flag = True
                    self.queryset = attendence_id_list.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))
                else:
                    search_sort_flag = False
                    self.queryset = self.queryset
            else:
                search_sort_flag = False
                self.queryset = []
        
        if search_sort_flag:
            filter={}
            search = self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            sort_field='-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)

            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            company = self.request.query_params.get('company', None)
            department = self.request.query_params.get('department', None)


            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='start_date' and order_by=='asc':
                    sort_field='start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name =='start_date' and order_by=='desc':
                    sort_field='-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name =='end_date' and order_by=='asc':
                    sort_field='end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name =='end_date' and order_by=='desc':
                    sort_field='-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name =='date_of_application' and order_by=='asc':
                    sort_field='created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name =='date_of_application' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='employee__cu_user__hod'
                

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list
                
                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if company:
                    filter['employee__cu_user__company__id'] = company
                if department:
                    filter['employee__cu_user__department__id'] = department


                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)

                    
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 


                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
            

    def get(self, request, *args, **kwargs):
        response=super(__class__,self).get(self, request, args, kwargs)
        data_list =list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name =='leave_count' and order_by=='asc':
            #import operator
            response.data = sorted(response.data, key=lambda x: x['leave_count'])
            print('response.data',response.data)
        
        
        for data in response.data:
            print('data',data)
            data['employee_name'] = ''
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            data['start_date'] =   data['start_date'][0:10] if data['start_date'] else ''
            data['end_date'] =  data['end_date'][0:10] if data['end_date'] else ''
            
            data_list.append([data['employee_name'],data['company'],data['department'],data['designation'],
                              data['reporting_head'],data['hod'],data['document'],data['start_date'],data['end_date'],data['leave_type'],
                              data['leave_count'],data['approved_status'],data['reason'],data['remarks']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/advance_leave_report/document'):
                file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/advance_leave_report/document')
                file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Company','Department','Designation','Reporting Head','Hod',
                                                        'Document','Start Date','End Date','Leave Type','Leave Count',
                                                        'Approved Status','Reason','Remarks'])
            export_csv = final_df.to_excel (file_path, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})


class AdminAttendanceAdvanceLeavePendingListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False,approved_status='pending')
    serializer_class = AdminAttendanceAdvanceLeavePendingListSerializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False,approved_status='pending'
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list
                        #self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   


        if search_sort_flag:
            sort_field='-id'
            filter={}
            search = self.request.query_params.get('search', None)
            emp_id = self.request.query_params.get('emp_id', None)
            leave_type=self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)
            
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            request_type=self.request.query_params.get('request_type', None)
            leave_type=self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            queryset_all = EmployeeAdvanceLeaves.objects.none()
            if self.queryset.count():
                # print('leave_type-->',leave_type)
                if field_name and order_by:
                    if field_name =='start_date' and order_by=='asc':
                        sort_field='start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('start_date')
                    elif field_name =='start_date' and order_by=='desc':
                        sort_field='-start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                    elif field_name =='end_date' and order_by=='asc':
                        sort_field='end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('end_date')
                    elif field_name =='end_date' and order_by=='desc':
                        sort_field='-end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                    elif field_name =='sort_applied' and order_by=='asc':
                        sort_field='created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('created_at')
                    elif field_name =='sort_applied' and order_by=='desc':
                        sort_field='-created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('-created_at')
                    elif field_name =='department' and order_by=='desc':
                        sort_field='-attendance__employee__cu_user__department'
                    elif field_name =='department' and order_by=='asc':
                        sort_field='attendance__employee__cu_user__department'
                    elif field_name =='designation' and order_by=='desc':
                        sort_field='-attendance__employee__cu_user__designation'
                    elif field_name =='designation' and order_by=='asc':
                        sort_field='attendance__employee__cu_user__designation'
                    elif field_name =='reporting_head' and order_by=='desc':
                        sort_field='-attendance__employee__cu_user__reporting_head'
                    elif field_name =='reporting_head' and order_by=='asc':
                        sort_field='attendance__employee__cu_user__reporting_head'
                    elif field_name =='hod' and order_by=='desc':
                        sort_field='-attendance__employee__cu_user__hod'
                    elif field_name =='hod' and order_by=='asc':
                        sort_field='attendance__employee__cu_user__hod'
                    
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                    
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list

                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field) 
                        return queryset      

                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field) 
                    return queryset
            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AdminAttendanceAdvanceLeavePendingListView,self).get(self, request, args, kwargs)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name =='leave_count' and order_by=='asc':
            import operator
            response.data['results'] = sorted(response.data['results'], key=operator.itemgetter('leave_count'))
            print('response.data',response.data['results'])
        for data in response.data['results']:
            data['employee_name'] = ''
            data['approved_status']=data['approved_status'].capitalize()
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
        return response


class AdminAttendanceAdvanceLeavePendingListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False,approved_status='pending')
    serializer_class = AdminAttendanceAdvanceLeavePendingListSerializerV2
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))

        
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        attendance_type = self.request.query_params.get('attendance_type', None)
        if not attendance_type:
            attendance_type = 'HRMS'

        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False,
                    attendance_type=attendance_type
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False,approved_status='pending'
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(Q(start_date__date__gte=month_master.year_start_date.date())&Q(start_date__date__lte=month_master.year_end_date.date()))
                        #self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   


        if search_sort_flag:
            sort_field='-id'
            filter={}
            search = self.request.query_params.get('search', None)
            emp_id = self.request.query_params.get('emp_id', None)
            leave_type=self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)
            
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            request_type=self.request.query_params.get('request_type', None)
            leave_type=self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            queryset_all = EmployeeAdvanceLeaves.objects.none()
            if self.queryset.count():
                # print('leave_type-->',leave_type)
                if field_name and order_by:
                    if field_name =='start_date' and order_by=='asc':
                        sort_field='start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('start_date')
                    elif field_name =='start_date' and order_by=='desc':
                        sort_field='-start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                    elif field_name =='end_date' and order_by=='asc':
                        sort_field='end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('end_date')
                    elif field_name =='end_date' and order_by=='desc':
                        sort_field='-end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                    elif field_name =='sort_applied' and order_by=='asc':
                        sort_field='created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('created_at')
                    elif field_name =='sort_applied' and order_by=='desc':
                        sort_field='-created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('-created_at')
                    elif field_name =='department' and order_by=='desc':
                        sort_field='-attendance__employee__cu_user__department'
                    elif field_name =='department' and order_by=='asc':
                        sort_field='employee__cu_user__department'
                    elif field_name =='designation' and order_by=='desc':
                        sort_field='-employee__cu_user__designation'
                    elif field_name =='designation' and order_by=='asc':
                        sort_field='employee__cu_user__designation'
                    elif field_name =='reporting_head' and order_by=='desc':
                        sort_field='-employee__cu_user__reporting_head'
                    elif field_name =='reporting_head' and order_by=='asc':
                        sort_field='employee__cu_user__reporting_head'
                    elif field_name =='hod' and order_by=='desc':
                        sort_field='-employee__cu_user__hod'
                    elif field_name =='hod' and order_by=='asc':
                        sort_field='employee__cu_user__hod'
                    
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['start_date__date__lte'] = end_object + timedelta(days=1)

                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list
                    
                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list

                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field) 
                        return queryset      

                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset
            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AdminAttendanceAdvanceLeavePendingListViewV2,self).get(self, request, args, kwargs)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name =='leave_count' and order_by=='asc':
            import operator
            response.data['results'] = sorted(response.data['results'], key=operator.itemgetter('leave_count'))
            print('response.data',response.data['results'])
        for data in response.data['results']:
            data['employee_name'] = ''
            data['approved_status']=data['approved_status'].capitalize()
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
        return response


class AdminAttendanceAdvanceLeaveApprovalView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AdminAttendanceAdvanceLeaveApprovalSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response
	
class AttendenceApprovalRequestView(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
	serializer_class = AttendenceApprovalRequestEditSerializer

class AttendanceConveyanceApprovalListView(generics.ListAPIView, mixins.UpdateModelMixin,
                                            mixins.CreateModelMixin):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(conveyance_approval=0, is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalListSerializer
    pagination_class = CSPageNumberPagination
    
    
    def get_queryset(self):
        print('sdsdsdsdsds')
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            print('login_user_details',login_user_details)
            print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        print('gfggfgfgf')
                        result = self.queryset.filter(attendance__in=attendence_id_list)
                        print('result',result)
                        if result:
                            search_sort_flag = True
                            self.queryset = result
                        else:
                            search_sort_flag = False
                            #self.queryset = []

                    else:
                        search_sort_flag = False
                        #self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    #self.queryset = self.queryset
                
            else:
                print('sdsds')
                search_sort_flag = True
                print('self.queryset',self.queryset  )
                self.queryset = self.queryset   
        # queryset=self.queryset.filter(status=1)
        if search_sort_flag:
            filter = {}
            sort_field='-id'
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field='duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')
            # if search :
            #     print("This is if condition entry")
            #     for name in search.split(" "):
            #         queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=name)|Q(attendance__employee__last_name__icontains=name)),
            #                                         conveyance_approval=0,is_deleted=False)
            #     return queryset
            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    from_object =datetime.strptime(from_date, '%Y-%m-%d')
                    to_object =datetime.strptime(to_date, '%Y-%m-%d')
                    filter['attendance_date__gte']= from_object
                    filter['attendance_date__lte']= to_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id=TCoreUserDetail.objects.filter(designation=designation,department=department).values('cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id ]
                elif department :
                    department_id=TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id ]
                    print(filter)
                elif designation:
                    designation_id=TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id ]
                    print(filter)
                

                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval=0,is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval=0,is_deleted=False,**filter).order_by(sort_field)
                        return queryset                

                else:
                    queryset = self.queryset.filter(conveyance_approval=0,is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return self.queryset.filter(conveyance_approval=0, is_deleted=False,**filter).order_by(sort_field)
        else:
            return list()
    
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):

        response = super(AttendanceConveyanceApprovalListView, self).get(self, request, *args, **kwargs)
        convay_list = []
        for data in response.data['results']:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name=VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name=None
            alloted_by=AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name +" "+ alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)
            
            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount':data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by':job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by':data['conveyance_approved_by']
            }
            doc_list=[]
            conveyance_doc=AttandanceApprovalDocuments.objects.filter(request=data['id'],is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict={
                        'id':c_d.id,
                        'document_name':c_d.document_name,
                        'document':request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc']=doc_list
            else:
                data_dict['conveyance_doc']=doc_list
            convay_list.append(data_dict)
        response.data['results'] = convay_list
        return response

    def put(self, request, *args, **kwargs):
        updated_by=request.user
        print(updated_by)

        req_id = self.request.query_params.get('req_id', None)
        conveyance_approval = request.data['conveyance_approval']

        approved_expenses= request.data['approved_expenses']
        print("req_id", req_id)
        if int(conveyance_approval) == 3 :
            AttendanceApprovalRequest.objects.filter(id=req_id).update(conveyance_approval=conveyance_approval,
                                                                    conveyance_approved_by=updated_by,approved_expenses=approved_expenses)
        else:
            AttendanceApprovalRequest.objects.filter(id=req_id).update(conveyance_approval=conveyance_approval,
                                                                        conveyance_approved_by=updated_by)
        # print(AttendanceApprovalRequest.)
        if AttendanceApprovalRequest:

            return Response({'results': {'conveyance_approval': conveyance_approval, },
                             'msg': 'success',
                             "request_status": 1})
        else:
            return Response({'results': {'conveyance_approval': conveyance_approval, },
                             'msg': 'fail',
                             "request_status": 0})
    
    def post(self, request, *args, **kwargs):

        updated_by=request.user
        log_before = []
        approve_or_reject =[]

        for data in request.data.get('conveyance_approvals'):
            log_before_query = AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).values('conveyance_approval')
            if log_before_query: log_before.append(log_before_query[0])
            conveyance_approval= data.get('conveyance_approval')
            approved_expenses=data.get('approved_expenses')
            approve_or_reject.append(conveyance_approval)
            print("conveyance_approval",conveyance_approval)
            if int(conveyance_approval) == 3 :
                AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).update(conveyance_approval=conveyance_approval,
                                                                        conveyance_approved_by=updated_by,approved_expenses=approved_expenses)
            else:
                AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).update(conveyance_approval=conveyance_approval,
                                                                            conveyance_approved_by=updated_by)
            # print(AttendanceApprovalRequest.)
            if not AttendanceApprovalRequest:

                return Response({'results': {'conveyance_approval': conveyance_approval, },
                                'msg': 'fail',
                                "request_status": 0})

        ####################LOG PART######################################################## 
        print("log_before",str(log_before))
        # master_module_role = TMasterModuleRoleUser.objects.get(mmr_module__cm_name__iexact='hrms',mmr_user=request.user).mmr_role
        # master_module_role = TMasterModuleRoleUser.objects.get(mmr_user=request.user).mmr_role
        # core_role = TCoreRole.objects.get(id=str(master_module_role)).cr_name
        print(list(set(approve_or_reject)))
        if list(set(approve_or_reject))[0] == 2:
            # if core_role.lower() == 'hr admin':
            logger.log(request.user,'bulk approved Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
            # elif core_role.lower() == 'hr user':
            #     logger.log(request.user,AttendenceAction.ACTION_HR,'bulk approved Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
        elif list(set(approve_or_reject))[0] == 1:
            # if core_role.lower() == 'hr admin':
            logger.log(request.user,'bulk reject Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
            # elif core_role.lower() == 'hr user':
            #     logger.log(request.user,AttendenceAction.ACTION_HR,'bulk reject Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
        return Response({'results': {'conveyance_approvals': request.data.get('conveyance_approvals'), },
                'msg': 'success',
                "request_status": 1})

class AttendanceConveyanceAfterApprovalListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(conveyance_approval__gt=0, is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalListSerializer
    pagination_class = CSPageNumberPagination
    
    
    def get_queryset(self):
        # queryset=self.queryset.filter(status=1)

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter = {}
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            sort_field='-id'
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
                
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field='duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')
                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')
                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')


            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id=TCoreUserDetail.objects.filter(designation=designation,department=department).values('cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id ]
                elif department :
                    department_id=TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id ]
                    print(filter)
                elif designation:
                    designation_id=TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id ]
                    print(filter)
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)
                        return queryset                

                else:
                    queryset = self.queryset.filter(conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                print('filter:',filter)
                return self.queryset.filter(conveyance_approval__gt=0, is_deleted=False,**filter).order_by(sort_field)
        else:
            return list()


       


    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):

        response = super(AttendanceConveyanceAfterApprovalListView, self).get(self, request, *args, **kwargs)
        convay_list = []
        for data in response.data['results']:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            print(user_name.employee.first_name)
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            print(benifit_id)
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            print(alloyance_per_day)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name=VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name=None

            alloted_by=AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name +" "+ alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None
            conveyance_approved_by=AttendanceApprovalRequest.objects.get(id=data['id'])
            if conveyance_approved_by.conveyance_approved_by:
                job_conveyance_approved_by = conveyance_approved_by.conveyance_approved_by.first_name +" "+ conveyance_approved_by.conveyance_approved_by.last_name
            else:
                job_conveyance_approved_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)

            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount':data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by': job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by':job_conveyance_approved_by
            }
            doc_list=[]
            conveyance_doc=AttandanceApprovalDocuments.objects.filter(request=data['id'],is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict={
                        'id':c_d.id,
                        'document_name':c_d.document_name,
                        'document':request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc']=doc_list
            else:
                data_dict['conveyance_doc']=doc_list
            convay_list.append(data_dict)
        response.data['results'] = convay_list
        return response

class AttendanceConveyanceAfterApprovalListExportDownloadView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(conveyance_approval__gt=0, is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalListSerializer
    
    
    def get_queryset(self):
        # queryset=self.queryset.filter(status=1)

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter = {}
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            sort_field='-id'
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
                
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field='duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')
                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')
                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')


            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id=TCoreUserDetail.objects.filter(designation=designation,department=department).values('cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id ]
                elif department :
                    department_id=TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id ]
                    print(filter)
                elif designation:
                    designation_id=TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id ]
                    print(filter)
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)
                        return queryset                

                else:
                    queryset = self.queryset.filter(conveyance_approval__gt=0,is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                print('filter:',filter)
                return self.queryset.filter(conveyance_approval__gt=0, is_deleted=False,**filter).order_by(sort_field)
        else:
            return list()


    def get(self, request, *args, **kwargs):

        response = super(__class__, self).get(self, request, *args, **kwargs)
        convay_list = []
        data_list = list()
        for data in response.data:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            #print(user_name.employee.first_name)
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            #print(benifit_id)
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            #print(alloyance_per_day)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name=VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name=None

            alloted_by=AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name +" "+ alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None
            conveyance_approved_by=AttendanceApprovalRequest.objects.get(id=data['id'])
            if conveyance_approved_by.conveyance_approved_by:
                job_conveyance_approved_by = conveyance_approved_by.conveyance_approved_by.first_name +" "+ conveyance_approved_by.conveyance_approved_by.last_name
            else:
                job_conveyance_approved_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)

            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount':data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by': job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by':job_conveyance_approved_by
            }
            doc_list=[]
            conveyance_doc=AttandanceApprovalDocuments.objects.filter(request=data['id'],is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict={
                        'id':c_d.id,
                        'document_name':c_d.document_name,
                        'document':request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc']=doc_list
            else:
                data_dict['conveyance_doc']=doc_list
            convay_list.append(data_dict)
            data['employee_name'] = user_name.employee.first_name + " " + user_name.employee.last_name
            data_list.append([data['employee_name'],tcore_user.cost_centre,data['deviation_amount'],
            allowance_money,data['is_conveyance'],data['is_late_conveyance'],data['conveyance_approval'],
            vehical_name,data['conveyance_purpose'],job_alloted_by,data['from_place'],
            data['to_place'],data['conveyance_expense'],data['approved_expenses'],data['conveyance_remarks'],data['duration_start'],
            data['duration_end'],data['duration'],job_conveyance_approved_by])

    
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/attendance_conveyance_approvel/document'):
                file_name = 'media/attendance/attendance_conveyance_approvel/document/attendance_conveyance_approvel.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/attendance_conveyance_approvel/document')
                file_name = 'media/attendance/attendance_conveyance_approvel/document/attendance_conveyance_approvel.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Cost Centre','Deviation amount','Eligibility',
            'Conveyance','Late Conveyance','Conveyance approval','Vehicle Type','Conveyance purpose','Conveyance alloted by',
            'From place','To place','Conveyance expense','Approved expenses','Conveyance remarks',
            'Duration start','Duration end','Duration','Conveyance approved by'])
            export_csv = final_df.to_excel (file_path, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})


class AttendanceSummaryListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = AttendanceSummaryListSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        print('blank_queryset',blank_queryset)
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        filter = {}
        date_range = None
        if self.queryset.count():
            print("self.queryset.count()",self.queryset.count())
            if current_date and emp_id:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

            if date_range:
                print("This is if")
                filter['employee']=emp_id
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']

        if filter :
            print('filter',self.queryset.filter(**filter))
            return self.queryset.filter(**filter)
        else:
            # print('else filter',self.queryset)
            return blank_queryset

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(AttendanceSummaryListView,self).get(self, request, args, kwargs)
        print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None  
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                elif att_req.checkin_benchmark == True:
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                if att_req.from_place and att_req.to_place:
                    first_name = att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else ''
                    last_name = att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else ''
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':att_req.deviation_amount,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_desctiption' : att_req.vehicle_type.description if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : att_req.conveyance_approval,
                        'conveyance_approval_name' :att_req.get_conveyance_approval_display(),
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': att_req.is_late_conveyance
                    }
                    doc_list=[]
                    conveyance_doc=AttandanceApprovalDocuments.objects.filter(request_id=att_req.id,is_deleted=False)
                    if conveyance_doc:
                        for c_d in conveyance_doc:
                            doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                            }
                            doc_list.append(doc_dict)
                        conveyance_dict['conveyance_doc']=doc_list
                    else:
                        conveyance_dict['conveyance_doc']=doc_list

                    conveyance_list.append(conveyance_dict)


            print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                    data['day_remarks'] = day_remarks

        return response


class AttendanceSummaryListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = AttendanceSummaryListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        #print('blank_queryset',blank_queryset)
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        filter = {}
        date_range = None
        if self.queryset.count():
            #print("self.queryset.count()",self.queryset.count())
            if current_date and emp_id:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                #print("date_range",date_range)

            if date_range:
                #print("This is if")
                filter['employee']=emp_id
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']

        if filter :
            #print('filter',self.queryset.filter(**filter))
            return self.queryset.filter(**filter)
        else:
            # print('else filter',self.queryset)
            return blank_queryset

    def get_address(self,ConveyanceMaster):
        request = self.request
        conveyancePlacesMapping = ConveyancePlacesMapping.objects.filter(conveyance_id=ConveyanceMaster.id,is_deleted=False).values(
            'conveyance','from_place','to_place','vehicle_type','vehicle_type__name','kilometers_travelled','amount','place_deviation_amount')
        #print('conveyancePlacesMapping',conveyancePlacesMapping)
        
        if conveyancePlacesMapping:
            for each in conveyancePlacesMapping:
                conveyanceDocument_list = list()
                #print('each',each)
                each['vehicle_type_name'] = each['vehicle_type__name']
                each.pop('vehicle_type__name')
                conveyanceDocuments = ConveyanceDocument.objects.filter(
                    conveyance_id = ConveyanceMaster.id,
                    from_place = each['from_place'],
                    to_place = each['to_place'],
                    is_deleted = False
                    )
                if conveyanceDocuments:
                    for each_conveyanceDocument in conveyanceDocuments:
                        conveyanceDocument_list.append(
                        {
                        'id':each_conveyanceDocument.id,
                        'document':request.build_absolute_uri(each_conveyanceDocument.document.url),
                        'document_name':each_conveyanceDocument.document_name}
                        )
                each['documents'] = conveyanceDocument_list
            return conveyancePlacesMapping
        # pass
       

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        # print('entry test')
        #print(self.queryset)
        response=super(AttendanceSummaryListViewV2,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None

              
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'
                if att_req.request_type =='P':
                    day_remarks = 'Present'
                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                elif att_req.checkin_benchmark == True:
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()
                    # remarks_doc = get_documents(request=request,attendance_request=att_req, remarks=att_req.remarks) if leave_type == 'AL' or leave_type == 'AB' else list()
                    status_dict = {"relese": "Released", "reject": "Rejected", "approved": "Approved",
                                   "pending": "Pending",
                                   "regular": "Regular"}
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : status_dict[att_req.approved_status],
                        'remarks' : att_req.remarks,
                        # att_req.remarks
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'is_conveyance' : att_req.is_conveyance,

                        #'approved_expenses' : att_req.approved_expenses,
                        # 'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        # 'from_place' : att_req.from_place,
                        # 'to_place' : att_req.to_place,
                        # 'conveyance_expense' : att_req.conveyance_expense,
                        # 'conveyance_remarks' : att_req.conveyance_remarks,

                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                #if att_req.from_place and att_req.to_place:
                    
                tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 10-07-2020 | Rupam Hazra ##

                print('att_req.id',att_req.id)
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)
                print('conveyance_details_queryset',conveyance_details_queryset)
                if conveyance_details_queryset:
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None
                    
                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        
                        ## Change Request HRMS_Conveyance CR-5.0 doc | Date: 17-09-2020 | Rupam Hazra ##

                        # if conveyance_details.approved_expenses > conveyance_eligibility_details.amount:
                        #     deviation_amount = (conveyance_details.approved_expenses - conveyance_eligibility_details.amount)
                        deviation_amount = conveyance_details.deviation_amount

                    if tcore_user.updated_cost_centre:
                        final_cost_centre = tcore_user.updated_cost_centre.cost_centre_name
                    elif tcore_user.cost_centre:
                        final_cost_centre = tcore_user.cost_centre
                    else:
                        final_cost_centre = None

                    conveyance_dict = {
                    'cost_centre': final_cost_centre,
                    'deviation_amount':deviation_amount,
                    'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                    'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                    'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                    'from_place' : conveyance_details.from_place,
                    'to_place' : conveyance_details.to_place,
                    'conveyance_expense' : conveyance_details.conveyance_expense,
                    'approved_expenses' : conveyance_details.approved_expenses,
                    'conveyance_purpose' : conveyance_details.conveyance_purpose,
                    'conveyance_alloted_by' : first_name + " " + last_name,
                    'conveyance_approval' : conveyance_details.status,
                    'conveyance_approval_name' :conveyance_details.status,
                    'status':conveyance_details.status,
                    'conveyance_durations' : att_req.duration,
                    'duration_start': att_req.duration_start,
                    'duration_end': att_req.duration_end,
                    'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                    'is_paid':conveyance_details.is_paid,
                    'is_round': conveyance_details.is_round,
                    'address': self.get_address(conveyance_details)
                    }
                    doc_list=[]
                    conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                    if conveyance_doc:
                        for c_d in conveyance_doc:
                            doc_dict={
                            'id':c_d.id,
                            'document_name':c_d.document_name,
                            'document':request.build_absolute_uri(c_d.document.url)
                            }
                            doc_list.append(doc_dict)
                        conveyance_dict['conveyance_doc']=doc_list
                    else:
                        conveyance_dict['conveyance_doc']=doc_list

                    conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##

            #print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list

            # def get_work_form_home(self, obj):
            work_form_home = WorkFromHomeDeviation.objects.filter(request__attendance__id=data['id'], is_deleted=False).values(
                    'start_date_time', 'end_date_time', 'work_done')
            data['work_form_home'] = work_form_home
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceDailyListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    # queryset = Attendance.objects.all()
    serializer_class = AttendanceDailyListSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        if self.queryset.count():
            if emp_id:
                filter['employee']=emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
                print("joining_date", joining_date)
            if current_date:
                print("current_date",current_date)
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                print("date_range",date_range)
                self.date_range_str = date_range[0]['month_start__date']
                self.date_range_end = date.date()

                if is_previous == 'true':
                    # print("is_previous",is_previous)
                    date = date_range[0]['month_start__date'] - timedelta(days=1)
                    # print("date",date)
                    date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                    # print("is_previous_date_range",date_range)
                    self.date_range_str = date_range[0]['month_start__date']
                    self.date_range_end = date_range[0]['month_end__date']
                # print("date_range",date_range)
            elif month and year:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            
            # print("elf.date_range",date_range)
            if date_range:
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']
            if filter:
                return self.queryset.filter(**filter)
            else:
                return self.queryset
        else:
            # print("ELLSSS", self.queryset)
            return self.queryset.filter(is_deleted=False)

    # @response_modify_decorator_list_or_get_after_execution_for_pagination
    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        is_previous = self.request.query_params.get('is_previous', None)
        response=super(AttendanceDailyListView,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        date_list_data = []

        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
          
            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)
            date_list_data.append(datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date())
            
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }                  

                    attendance_request_list.append(attendance_request_dict)
            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['is_attendance_request'] = is_attendance_request
            if day_remarks:
                data['day_remarks'] = day_remarks

        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str,self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                # print("day", day)
                new_dict={
                    'id' : None,
                    'date' : day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present' : False,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request":[],
                    "is_late_conveyance":False,
                    "is_late_conveyance_completed":False,
                    "is_deleted":False,
                    "login_time": "",
                    "logout_time": ""
                    }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks']="Not Joined"
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"
                    
                response.data.append(new_dict)

        response.data = self.list_synchronization(list(response.data))

        return response
    def last_day_of_month(self,sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        print("sdate",sdate   , edate)

        delta = edate - sdate       # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list


    def list_synchronization(self, list_data: list)-> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis = 0, ascending = True, inplace = True,)
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list,row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data


class AttendanceDailyListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    # queryset = Attendance.objects.all()
    serializer_class = AttendanceDailyListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        if self.queryset.count():
            if emp_id:
                filter['employee']=emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
                # print("joining_date", joining_date)
            if current_date:
                # print("current_date",current_date)
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
                self.date_range_str = date_range[0]['month_start__date']
                self.date_range_end = date.date()

                if is_previous == 'true':
                    # print("is_previous",is_previous)
                    date = date_range[0]['month_start__date'] - timedelta(days=1)
                    # print("date",date)
                    date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                    # print("is_previous_date_range",date_range)
                    self.date_range_str = date_range[0]['month_start__date']
                    self.date_range_end = date_range[0]['month_end__date']
                # print("date_range",date_range)
            elif month and year:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            
            # print("elf.date_range",date_range)
            if date_range:
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']
            if filter:
                return self.queryset.filter(**filter)
            else:
                return self.queryset
        else:
            # print("ELLSSS", self.queryset)
            return self.queryset.filter(is_deleted=False)

    def bench_15m_3days_check(self, date=None, user=None):
        # instance.duration_end == instance.attendance.login_time or instance.duration_start == instance.attendance.logout_time 
        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).first()
        bench_15m_request = AttendanceApprovalRequest.objects.filter(
                                                        Q(attendance__employee=user)&
                                                        Q(is_requested=True)&
                                                        Q(checkin_benchmark=False)&
                                                        Q(request_type='GR')&
                                                        Q(duration_start__date__gte=month_master.month_start.date())&
                                                        Q(duration_start__date__lt=date)&
                                                        Q(is_deleted=False))
        # print('bench_15m_request:',bench_15m_request)
        # print('bench_15m_request count:',bench_15m_request.count())

        attendance_set = { attendance_request.attendance for attendance_request in bench_15m_request }
        # print('attendance_set:', attendance_set)
        login_logout_requests = AttendanceApprovalRequest.objects.none()
        for attendance in attendance_set:
            login_logout_requests = login_logout_requests | bench_15m_request.filter(Q(attendance=attendance)&
                                                                                        Q(
                                                                                            Q(duration_end=attendance.login_time)|
                                                                                            Q(duration_start=attendance.logout_time)
                                                                                        )
                                                                                    )
        print('login_logout_requests:', login_logout_requests)
        return login_logout_requests.values('attendance').distinct().count()

    # @response_modify_decorator_list_or_get_after_execution_for_pagination
    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        is_previous = self.request.query_params.get('is_previous', None)
        response=super(AttendanceDailyListViewV2,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        date_list_data = []

        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
          
            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)
            print('date time', data['date'], '#######',data['id'])
            date_list_data.append(datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date())
            
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'
                if att_req.request_type == 'P':
                    day_remarks = 'Present'

                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)
                if conveyance_details_queryset:
                    if att_req.is_late_conveyance == True and conveyance_details_queryset:
                        is_late_conveyance_completed = True
                

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False

                    is_login = att_req.duration_end == att_req.attendance.login_time
                    is_logout = att_req.duration_start == att_req.attendance.logout_time
                    is_login_or_logout = is_login or is_logout
                    is_3days_taken = False
                    if is_login:
                        is_3days_taken = late_login_count_excluding_benchmark(instance=att_req, user=att_req.attendance.employee) >= 3
                    elif is_logout:
                        is_3days_taken = early_logout_count_excluding_benchmark(instance=att_req, user=att_req.attendance.employee) >= 3

                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    work_form_home = WorkFromHomeDeviation.objects.filter(request=att_req, is_deleted=False).values('start_date_time', 'end_date_time', 'work_done')

                    
                    

                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'work_form_home': work_form_home,
                        'is_login_or_logout': is_login_or_logout,
                        'is_3days_taken': is_3days_taken,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'is_conveyance' : att_req.is_conveyance,
                        

                        # 'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        # 'from_place' : att_req.from_place,
                        # 'to_place' : att_req.to_place,
                        # 'conveyance_expense' : att_req.conveyance_expense,
                        # 'approved_expenses' : att_req.approved_expenses,
                        # 'conveyance_remarks' : att_req.conveyance_remarks,

                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        # 'conveyance_purpose' : att_req.conveyance_purpose,
                        # 'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        # 'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }

                    deviation_amount = None
                    conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)
                    if conveyance_details_queryset:
                        if att_req.is_late_conveyance == True and conveyance_details_queryset:
                            is_late_conveyance_completed = True

                        conveyance_details = conveyance_details_queryset[0]
                        tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                        first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                        last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                        #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                        conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                        
                        if conveyance_eligibility_details:
                            conveyance_eligibility_details = conveyance_eligibility_details[0]
                            conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                            deviation_amount = conveyance_details.deviation_amount

                        attendance_request_dict['vehicle_type'] = conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        attendance_request_dict['vehicle_type_id'] = conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        attendance_request_dict['from_place'] = conveyance_details.from_place,
                        attendance_request_dict['to_place'] = conveyance_details.to_place,
                        attendance_request_dict['conveyance_expense'] = conveyance_details.conveyance_expense,
                        attendance_request_dict['approved_expenses'] = conveyance_details.approved_expenses,
                        attendance_request_dict['conveyance_remarks'] = conveyance_details.conveyance_purpose if conveyance_details.conveyance_purpose else '', 
                        attendance_request_dict['conveyance_alloted_by'] = conveyance_details.conveyance_alloted_by.id if conveyance_details.conveyance_alloted_by else '',
                        attendance_request_dict['conveyance_alloted_by_name'] = first_name + " " + last_name,


                    else:

                        attendance_request_dict['vehicle_type'] = None
                        attendance_request_dict['vehicle_type_id'] = None
                        attendance_request_dict['from_place'] = None
                        attendance_request_dict['to_place'] = None
                        attendance_request_dict['conveyance_expense'] = None
                        attendance_request_dict['approved_expenses'] = None
                        attendance_request_dict['conveyance_remarks'] = None
                        attendance_request_dict['conveyance_purpose'] = None
                        attendance_request_dict['conveyance_alloted_by'] = None
                        attendance_request_dict['conveyance_alloted_by_name'] = None


                    attendance_request_list.append(attendance_request_dict)
            
            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['is_attendance_request'] = is_attendance_request
            if day_remarks:
                data['day_remarks'] = day_remarks

        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str,self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                # print("day", day)
                new_dict={
                    'id' : None,
                    'date' : day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present' : False,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request":[],
                    "is_late_conveyance":False,
                    "is_late_conveyance_completed":False,
                    "is_deleted":False,
                    "login_time": "",
                    "logout_time": ""
                    }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks']="Not Joined"
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"
                    
                response.data.append(new_dict)


        response.data = self.list_synchronization(list(response.data))

        return response

    def last_day_of_month(self,sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        # print("sdate",sdate   , edate)

        delta = edate - sdate       # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list


    def list_synchronization(self, list_data: list)-> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis = 0, ascending = True, inplace = True,)
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list,row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data


class AttendanceAdvanceLeaveAddView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdvanceLeaveAddSerializer
    #pagination_class = CSPageNumberPagination

    # def get_queryset(self):
    #     emp_id = self.request.query_params.get('emp_id', None)
    #     if self.queryset.count():
    #         return self.queryset.filter(employee_id=emp_id)
    #     else:
    #         return self.queryset

    # @response_modify_decorator_list_or_get_after_execution_for_pagination
    # def get(self, request, *args, **kwargs):
    #     response=super(AttendanceAdvanceLeaveListView,self).get(self, request, args, kwargs)
    #     for data in response.data['results']:
    #         print(data['approved_status'])
    #         data['approved_status']=data['approved_status'].capitalize()
    #     return response

class ETaskAttendanceApprovalList(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    
    def get_queryset(self):
        filter={}
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    return self.queryset.all().order_by('-duration')
            
            if request_type:
                request_type_list=request_type.split(',')
                '''
                    Added By Rupam Hazra For Android end [29-12-2019] 
                    #Line No - 2719 - 2722
                '''
                if 'OD' in request_type_list:
                    request_type_list.remove('OD')
                    request_type_list.append('POD')
                    request_type_list.append('FOD')
                filter['request_type__in']= request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter)
                    return queryset                

            else:
                queryset = self.queryset.filter(is_deleted=False,**filter)
                return queryset
           
        else:
            return []
       

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(ETaskAttendanceApprovalList, self).get(self, request, args, kwargs)
        return response

class ETaskAttendanceApprovaGracelList(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalGraceListSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        Q(request_type='GR')&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    def get_queryset(self):
        filter={}
        sort_field="-id"
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    # return self.queryset.all().order_by('duration_start__date')
                    sort_field='duration_start__date'
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')
            
            # if request_type:
            #     request_type_list=request_type.split(',')
            #     filter['request_type__in']= request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset                
            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
        else:
            return []
       
  
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(ETaskAttendanceApprovaGracelList, self).get(self, request, args, kwargs)
        return response


class ETaskAttendanceApprovaWithoutGracelList(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovaWithoutGracelSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(request_type='HD')|
                                                        Q(request_type='FD')|
                                                        Q(request_type='WO')|
                                                        Q(request_type='OD')|
                                                        Q(request_type='FOD')|
                                                        Q(request_type='POD')|
                                                        Q(request_type='LC'))&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    
    def get_queryset(self):
        filter={}
        sort_field="-id"
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field="duration_start__date"
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field="-duration_start__date"
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field="duration_start"
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field="-duration_start"
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field="duration_end"
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field="-duration_end"
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field="duration"
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field="-duration"
                    # return self.queryset.all().order_by('-duration')
            
            if request_type:
                request_type_list=request_type.split(',')
                filter['request_type__in']= request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset                

            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
           
        else:
            return []
       


  
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(ETaskAttendanceApprovaWithoutGracelList, self).get(self, request, args, kwargs)
        return response


class ETaskAttendanceApprovaWithoutGracelListV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovaWithoutGracelSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(request_type='HD')|
                                                        Q(request_type='FD')|
                                                        Q(request_type='WFH')|
                                                        Q(request_type='WO')|
                                                        Q(request_type='OD')|
                                                        Q(request_type='FOD')|
                                                        Q(request_type='POD')|
                                                        Q(request_type='P')|
                                                        Q(request_type='LC'))&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    
    def get_queryset(self):
        filter={}
        sort_field="-id"
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field="duration_start__date"
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field="-duration_start__date"
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field="duration_start"
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field="-duration_start"
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field="duration_end"
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field="-duration_end"
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field="duration"
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field="-duration"
                    # return self.queryset.all().order_by('-duration')
            
            if request_type:
                request_type_list=request_type.split(',')
                filter['request_type__in']= request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset                

            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
           
        else:
            return []
  
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(ETaskAttendanceApprovaWithoutGracelListV2, self).get(self, request, args, kwargs)
        return response


class ETaskAttendanceApprovalView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class =  ETaskAttendanceApprovalSerializer
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))


class ETaskAttendanceApprovalViewV2(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class =  ETaskAttendanceApprovalSerializerV2
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))


class ETaskAttendanceApprovalModifyView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class =  ETaskAttendanceApprovalModifySerializer
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))

class AttendanceApprovalReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(approved_status='approved')|
                                                        Q(approved_status='reject')) &
                                                        (Q(request_type='HD')|
                                                        Q(request_type='FD'))
                                                        )
    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod
                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceApprovalReportView, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data['results']:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
            data_list.append([data['employee_name'],data['duration_start'][:10],data['duration_start'][11:19],data['duration_end'][11:19],\
                                    data['duration'],data['deviation_amount'],data['request_date'],data['request_type'],data['justification'],data['justified_at'],data['remarks'],
                                    data['approved_status'],data['approved_at'],data['leave_type'],data['created_at'][:10],\
                                    data['created_at'][11:19],data['department'],data['designation'],data['reporting_head'],data['hod']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/approval_report/document'):
                    file_name = 'media/attendance/approval_report/document/approval_report.xlsx'
            else:
                os.makedirs('media/attendance/approval_report/document')
                file_name = 'media/attendance/approval_report/document/approval_report.xlsx'

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Date','Duration Start','Duration End','Duration(Min.)',
            'Deviation Amount','Requested Date','Request Type','Justification','Justified Date','Remarks',
            'Approved Status','Approved at','Leave Type','Requested(Date)','Requested(Time)','Department','Designation','Reporting Head','HOD'])
            export_csv = final_df.to_excel (file_name, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        response.data['url'] = url
        return response


class AttendanceApprovalReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(approved_status='approved')|Q(approved_status='reject')) &
                                                        (Q(request_type='HD')|Q(request_type='FD'))&
                                                        (Q(leave_type='AL')|Q(leave_type='AB'))
                                                        )
    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(attendance_date__gte=month_master.year_start_date)&Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)
            company = self.request.query_params.get('company', None)
            # designation = self.request.query_params.get('dsg', None)
            department = self.request.query_params.get('department', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if company:
                    filter['attendance__employee__cu_user__company__id'] = company
                if department:
                    filter['attendance__employee__cu_user__department__id'] = department

                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceApprovalReportViewV2, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data['results']:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'All Leave' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
        return response
     
class AttendanceApprovalReportExportDownloadViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(approved_status='approved')|Q(approved_status='reject')) &
                                                        (Q(request_type='HD')|Q(request_type='FD'))&
                                                        (Q(leave_type='AL')|Q(leave_type='AB'))
                                                        )
    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(attendance_date__gte=month_master.year_start_date)&Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            company = self.request.query_params.get('company', None)
            # dsg = self.request.query_params.get('dsg', None)
            department = self.request.query_params.get('department', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod
                if company:
                    filter['attendance__employee__cu_user__company__id'] = company
                if department:
                    filter['attendance__employee__cu_user__department__id'] = department

                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    
    def get(self, request, *args, **kwargs):
        response=super(__class__, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
            data_list.append([data['employee_name'],data['duration_start'][:10],data['duration_start'][11:19],data['duration_end'][11:19],\
                                    data['duration'],data['deviation_amount'],data['request_date'],data['request_type'],data['justification'],data['justified_at'],data['remarks'],
                                    data['approved_status'],data['approved_at'],data['leave_type'],data['created_at'][:10],\
                                    data['created_at'][11:19],data['department'],data['designation'],data['reporting_head'],data['hod']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/approval_report/document'):
                file_name = 'media/attendance/approval_report/document/approval_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/approval_report/document')
                file_name = 'media/attendance/approval_report/document/approval_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Date','Duration Start','Duration End','Duration(Min.)',
            'Deviation Amount','Requested Date','Request Type','Justification','Justified Date','Remarks',
            'Approved Status','Approved at','Leave Type','Requested(Date)','Requested(Time)','Department','Designation','Reporting Head','HOD'])
            export_csv = final_df.to_excel (file_path, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})


class AttendanceVehicleTypeMasterAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = VehicleTypeMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceVehicleTypeMasterAddSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceVehicleTypeMasterEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = VehicleTypeMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceVehicleTypeMasterEditSerializer

    # @response_modify_decorator_update
    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceVehicleTypeMasterDeleteView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = VehicleTypeMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceVehicleTypeMasterDeleteSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceAdminSummaryListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdminSummaryListSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        #print('queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence= Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False
                    
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            blank_queryset = Attendance.objects.none()
            print('blank_queryset',blank_queryset)
            emp_id = self.request.query_params.get('emp_id', None)
            current_date = self.request.query_params.get('current_date', None)
            month = self.request.query_params.get('month', None)
            year = self.request.query_params.get('year', None)
            filter = {}
            date_range = None
           
                #print("self.queryset.count()",self.queryset.count())
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

                if date_range:
                    print("This is if")
                    filter['employee']=emp_id
                    filter['date__date__gte'] = date_range[0]['month_start__date']
                    filter['date__date__lte'] = date_range[0]['month_end__date']

            if filter :
                # print('filter',self.queryset.filter(**filter))
                return self.queryset.filter(**filter).order_by('date')
            else:
                # print('else filter',self.queryset)
                return self.queryset.filter(is_deleted=False).order_by('date')
        else:
            return []

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(AttendanceAdminSummaryListView,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'


                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                elif att_req.checkin_benchmark == True:
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                if att_req.from_place and att_req.to_place:
                    first_name = att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else ''
                    last_name = att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else ''
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':att_req.deviation_amount,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_desctiption' : att_req.vehicle_type.description if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : att_req.conveyance_approval,
                        'conveyance_approval_name' :att_req.get_conveyance_approval_display(),
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': att_req.is_late_conveyance
                    }
                    doc_list=[]
                    conveyance_doc=AttandanceApprovalDocuments.objects.filter(request_id=att_req.id,is_deleted=False)
                    if conveyance_doc:
                        for c_d in conveyance_doc:
                            doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                            }
                            doc_list.append(doc_dict)
                        conveyance_dict['conveyance_doc']=doc_list
                    else:
                        conveyance_dict['conveyance_doc']=doc_list
                    conveyance_list.append(conveyance_dict)


            print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceAdminSummaryListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdminSummaryListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        #print('queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence= Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    # print('attedence_details',attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False
                    
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            blank_queryset = Attendance.objects.none()
            # print('blank_queryset',blank_queryset)
            emp_id = self.request.query_params.get('emp_id', None)
            current_date = self.request.query_params.get('current_date', None)
            month = self.request.query_params.get('month', None)
            year = self.request.query_params.get('year', None)
            filter = {}
            date_range = None
           
                #print("self.queryset.count()",self.queryset.count())
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                # print("date_range",date_range)

                if date_range:
                    # print("This is if")
                    filter['employee']=emp_id
                    filter['date__date__gte'] = date_range[0]['month_start__date']
                    filter['date__date__lte'] = date_range[0]['month_end__date']

            if filter :
                # print('filter',self.queryset.filter(**filter))
                return self.queryset.filter(**filter).order_by('date')
            else:
                # print('else filter',self.queryset)
                return self.queryset.filter(is_deleted=False).order_by('date')
        else:
            return []


    def get_address(self,ConveyanceMaster):
        request = self.request
        conveyancePlacesMapping = ConveyancePlacesMapping.objects.filter(conveyance_id=ConveyanceMaster.id,is_deleted=False).values(
            'conveyance','from_place','to_place','vehicle_type','vehicle_type__name','kilometers_travelled','amount','place_deviation_amount')
        #print('conveyancePlacesMapping',conveyancePlacesMapping)
        
        if conveyancePlacesMapping:
            for each in conveyancePlacesMapping:
                conveyanceDocument_list = list()
                #print('each',each)
                each['vehicle_type_name'] = each['vehicle_type__name']
                each.pop('vehicle_type__name')
                conveyanceDocuments = ConveyanceDocument.objects.filter(
                    conveyance_id = ConveyanceMaster.id,
                    from_place = each['from_place'],
                    to_place = each['to_place'],
                    is_deleted = False
                    )
                if conveyanceDocuments:
                    for each_conveyanceDocument in conveyanceDocuments:
                        conveyanceDocument_list.append(
                        {
                        'id':each_conveyanceDocument.id,
                        'document':request.build_absolute_uri(each_conveyanceDocument.document.url),
                        'document_name':each_conveyanceDocument.document_name}
                        )
                each['documents'] = conveyanceDocument_list
            return conveyancePlacesMapping
        # pass
       

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        # print('entry test')
        # print(self.queryset)
        response=super(AttendanceAdminSummaryListViewV2,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.request_type =='P':
                    day_remarks = 'Present'
                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                elif att_req.checkin_benchmark == True:
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:

                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()
                    status_dict = {"relese":"Released", "reject":"Rejected","approved":"Approved", "pending":"Pending",
                                   "regular":"Regular"}
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : status_dict[att_req.approved_status],
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                if conveyance_details_queryset:
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount
                        if tcore_user.updated_cost_centre:
                            final_cost_centre = tcore_user.updated_cost_centre.cost_centre_name
                        elif tcore_user.cost_centre:
                            final_cost_centre = tcore_user.cost_centre
                        else:
                            final_cost_centre = None

                        conveyance_dict = {
                        'cost_centre': final_cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid,
                        'is_round': conveyance_details.is_round,
                        'address': self.get_address(conveyance_details)
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##


            print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            work_form_home = WorkFromHomeDeviation.objects.filter(request__attendance__id=data['id'],is_deleted=False)\
                .values('start_date_time', 'end_date_time', 'work_done')
            data['work_form_home'] = work_form_home
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceAdminDailyListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdminDailyListSerializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence= Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False
                    
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   


        if search_sort_flag:
            start_date = self.request.query_params.get('start_date', None)
            end_date = self.request.query_params.get('end_date', None)
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            users = self.request.query_params.get('users', None)
            sort_field='-id'
            filter = {}
            date_range = None

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst
            if self.queryset.count():
                print("self.queryset.count()",self.queryset.count())
                if field_name and order_by:
                    if field_name == 'date' and order_by == 'asc':
                        sort_field='date'
                        # return self.queryset.filter(is_deleted=False).order_by('date')
                    elif field_name == 'date' and order_by == 'desc':
                        sort_field='-date'
                        # return self.queryset.filter(is_deleted=False).order_by('-date')
                    elif field_name == 'login_time' and order_by == 'asc':
                        sort_field='login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('login_time')
                    elif field_name == 'login_time' and order_by == 'desc':
                        sort_field='-login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-login_time')
                    elif field_name == 'logout_time' and order_by == 'asc':
                        sort_field='logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('logout_time')
                    elif field_name == 'logout_time' and order_by == 'desc':
                        sort_field='-logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-logout_time')
                
            if start_date or end_date or designation or department or search:
                if start_date and end_date:
                    start_object = datetime.strptime(start_date, '%Y-%m-%d').date()
                    filter['date__gte'] = start_object
                    end_object = datetime.strptime(end_date, '%Y-%m-%d').date()
                    filter['date__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id=TCoreUserDetail.objects.filter(designation=designation,department=department).values('cu_user')
                    print(desi_dep_id)
                    filter['employee__in'] = [x['cu_user'] for x in desi_dep_id ]
                elif department :
                    department_id=TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['employee__in'] = [x['cu_user'] for x in department_id ]
                    print(filter)
                elif designation:
                    designation_id=TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['employee__in'] = [x['cu_user'] for x in designation_id ]
                    print(filter)
                
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field) 
                        return queryset      

                # if search :
                #     print("This is if condition entry")
                #     for name in search.split(" "):

                #         queryset = self.queryset.filter((Q(employee__first_name__icontains=name)|Q(employee__last_name__icontains=name)),
                #                                         is_deleted=False,**filter)
                #         # print(queryset.query)                                
                #         return queryset
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field) 
                    return queryset

            else:
                return self.queryset.filter(is_deleted=False, **filter).order_by(sort_field) 
        else:
            return []


    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdminDailyListView,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        for data in response.data['results']:
            data['is_attendance_request'] = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
            conveyance_dict = {}
            conveyance_list = []
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            # print('employee__first_name-->',data['employee'])
            # data['employee_name'] = data['employee']
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name

            attendance_request_list = []
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.from_place and att_req.to_place and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True


                benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
                alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=data['employee'], benefits_id=benifit_id)
                allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
                if allowance:
                    allowance_money = allowance[0]
                else:
                    allowance_money = 0.0

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                # if att_req.checkin_benchmark==False:
                    attendance_request_dict = {                        
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'eligibility_amount' : allowance_money,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        'conveyance_approval' : att_req.get_conveyance_approval_display(),
                        'conveyance_approved_by' : att_req.conveyance_approved_by.id if att_req.conveyance_approved_by else '',
                        'conveyance_approved_by_name' : (att_req.conveyance_approved_by.first_name if att_req.conveyance_approved_by else '') + " " +(att_req.conveyance_approved_by.last_name if att_req.conveyance_approved_by else ''),
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }
                    attendance_request_list.append(attendance_request_dict)

                if att_req.from_place and att_req.to_place:
                    first_name = att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else ''
                    last_name = att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else ''
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':att_req.deviation_amount,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_desctiption' : att_req.vehicle_type.description if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : att_req.conveyance_approval,
                        'conveyance_approval_name' :att_req.get_conveyance_approval_display(),
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': att_req.is_late_conveyance
                    }
                    conveyance_list.append(conveyance_dict)

            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['conveyance_details'] = conveyance_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceAdminDailyListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdminDailyListSerializerV2
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence= Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False
                    
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   


        if search_sort_flag:
            start_date = self.request.query_params.get('start_date', None)
            end_date = self.request.query_params.get('end_date', None)
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            users = self.request.query_params.get('users', None)
            sort_field='-id'
            filter = {}
            date_range = None

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst
            if self.queryset.count():
                print("self.queryset.count()",self.queryset.count())
                if field_name and order_by:
                    if field_name == 'date' and order_by == 'asc':
                        sort_field='date'
                        # return self.queryset.filter(is_deleted=False).order_by('date')
                    elif field_name == 'date' and order_by == 'desc':
                        sort_field='-date'
                        # return self.queryset.filter(is_deleted=False).order_by('-date')
                    elif field_name == 'login_time' and order_by == 'asc':
                        sort_field='login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('login_time')
                    elif field_name == 'login_time' and order_by == 'desc':
                        sort_field='-login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-login_time')
                    elif field_name == 'logout_time' and order_by == 'asc':
                        sort_field='logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('logout_time')
                    elif field_name == 'logout_time' and order_by == 'desc':
                        sort_field='-logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-logout_time')
                
            if start_date or end_date or designation or department or search:
                if start_date and end_date:
                    start_object = datetime.strptime(start_date, '%Y-%m-%d').date()
                    filter['date__gte'] = start_object
                    end_object = datetime.strptime(end_date, '%Y-%m-%d').date()
                    filter['date__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id=TCoreUserDetail.objects.filter(designation=designation,department=department).values('cu_user')
                    print(desi_dep_id)
                    filter['employee__in'] = [x['cu_user'] for x in desi_dep_id ]
                elif department :
                    department_id=TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['employee__in'] = [x['cu_user'] for x in department_id ]
                    print(filter)
                elif designation:
                    designation_id=TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['employee__in'] = [x['cu_user'] for x in designation_id ]
                    print(filter)
                
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field) 
                        return queryset      

                # if search :
                #     print("This is if condition entry")
                #     for name in search.split(" "):

                #         queryset = self.queryset.filter((Q(employee__first_name__icontains=name)|Q(employee__last_name__icontains=name)),
                #                                         is_deleted=False,**filter)
                #         # print(queryset.query)                                
                #         return queryset
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field) 
                    return queryset

            else:
                return self.queryset.filter(is_deleted=False, **filter).order_by(sort_field) 
        else:
            return []

    def get_address(self,ConveyanceMaster):
        request = self.request
        conveyancePlacesMapping = ConveyancePlacesMapping.objects.filter(conveyance_id=ConveyanceMaster.id,is_deleted=False).values(
            'conveyance','from_place','to_place','vehicle_type','vehicle_type__name','kilometers_travelled','amount','place_deviation_amount')
        #print('conveyancePlacesMapping',conveyancePlacesMapping)
        
        if conveyancePlacesMapping:
            for each in conveyancePlacesMapping:
                conveyanceDocument_list = list()
                #print('each',each)
                each['vehicle_type_name'] = each['vehicle_type__name']
                each.pop('vehicle_type__name')
                conveyanceDocuments = ConveyanceDocument.objects.filter(
                    conveyance_id = ConveyanceMaster.id,
                    from_place = each['from_place'],
                    to_place = each['to_place'],
                    is_deleted = False
                    )
                if conveyanceDocuments:
                    for each_conveyanceDocument in conveyanceDocuments:
                        conveyanceDocument_list.append(
                        {
                        'id':each_conveyanceDocument.id,
                        'document':request.build_absolute_uri(each_conveyanceDocument.document.url),
                        'document_name':each_conveyanceDocument.document_name}
                        )
                each['documents'] = conveyanceDocument_list
            return conveyancePlacesMapping
        # pass
       

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdminDailyListViewV2,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        for data in response.data['results']:
            data['is_attendance_request'] = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
            conveyance_dict = {}
            conveyance_list = []
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            # print('employee__first_name-->',data['employee'])
            # data['employee_name'] = data['employee']
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name

            attendance_request_list = []
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'
                if att_req.request_type =='P':
                    day_remarks = 'Present'
                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.from_place and att_req.to_place and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True


                benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
                alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=data['employee'], benefits_id=benifit_id)
                allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
                if allowance:
                    allowance_money = allowance[0]
                else:
                    allowance_money = 0.0

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                # if att_req.checkin_benchmark==False:
                    
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    work_form_home = WorkFromHomeDeviation.objects.filter(request=att_req,is_deleted=False).values('start_date_time', 'end_date_time', 'work_done')

                    attendance_request_dict = {                        
                        'id' : att_req.id,
                        'documents': doc_list,
                        'work_form_home': work_form_home,
                        'duration_start' : att_req.duration_start,
                        'eligibility_amount' : allowance_money,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'is_conveyance' : att_req.is_conveyance,
                        # 'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        # 'from_place' : att_req.from_place,
                        # 'to_place' : att_req.to_place,
                        # 'conveyance_expense' : att_req.conveyance_expense,
                        # 'approved_expenses' : att_req.approved_expenses,
                        # 'conveyance_purpose' : att_req.conveyance_purpose,
                        # 'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        'conveyance_approval' : att_req.get_conveyance_approval_display(),
                        'conveyance_approved_by' : att_req.conveyance_approved_by.id if att_req.conveyance_approved_by else '',
                        'conveyance_approved_by_name' : (att_req.conveyance_approved_by.first_name if att_req.conveyance_approved_by else '') + " " +(att_req.conveyance_approved_by.last_name if att_req.conveyance_approved_by else ''),
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }
                    attendance_request_list.append(attendance_request_dict)
                
                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                if conveyance_details_queryset:
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount

                        conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid,
                        'is_round': conveyance_details.is_round,
                        'address':self.get_address(conveyance_details)
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##

            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['conveyance_details'] = conveyance_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceLeaveApprovalList(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceLeaveApprovalListSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        ~Q(leave_type=None)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    def get_queryset(self):
        #print('self.queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        sort_field='-id'
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            print('login_user_details',login_user_details)
            print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                #print('check')
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        result = self.queryset.filter(attendance__in=attendence_id_list)
                        print('result',result)
                        if result:
                            search_sort_flag = True
                            self.queryset = result
                        else:
                            search_sort_flag = False
                            #self.queryset = []
                        #print('self.queryset',self.queryset.query)
                    else:
                        search_sort_flag = False
                        #self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    #self.queryset =  self.queryset
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset  
        if search_sort_flag:     
            print('enter') 
            filter = dict()  
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            users = self.request.query_params.get('users', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            request_type=self.request.query_params.get('request_type', None)
            leave_type=self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field='duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')
                if field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                if field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                if field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                if field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                if field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                if field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                if field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                if field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'


            if from_date and to_date:
                start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                filter['duration_start__date__gte'] = start_object
                end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                filter['duration_start__date__lte'] = end_object + timedelta(days=1)
            
            if dept_filter:
                dept_list = dept_filter.split(',')
                emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                filter['attendance__employee__in'] = emp_list

            if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
            if reporting_head:
                filter['attendance__employee__cu_user__reporting_head'] = reporting_head

            if hod:
                filter['attendance__employee__cu_user__hod'] = hod
            
            if leave_type:
                leave_type_list=leave_type.split(',')
                filter['leave_type__in']= leave_type_list

            if request_type:
                request_type_list=request_type.split(',')
                filter['request_type__in']= request_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset      
           
            
            else:
                # print('filter',**filter)
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
        else:
            print('sdsdsdsds')
            return []

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceLeaveApprovalList, self).get(self, request, args, kwargs)
        return response


class AttendanceLeaveApprovalListV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceLeaveApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        ~Q(leave_type=None)&
                                                        (Q(approved_status='pending')|
                                                        Q(approved_status='relese')))
    def get_queryset(self):
        #print('self.queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        sort_field='-id'
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            print('login_user_details',login_user_details)
            print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                #print('check')
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        result = self.queryset.filter(attendance__in=attendence_id_list)
                        print('result',result)
                        if result:
                            search_sort_flag = True
                            self.queryset = result
                        else:
                            search_sort_flag = False
                            #self.queryset = []
                        #print('self.queryset',self.queryset.query)
                    else:
                        search_sort_flag = False
                        #self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    #self.queryset =  self.queryset
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset  
        if search_sort_flag:     
            print('enter') 
            filter = dict()  
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            users = self.request.query_params.get('users', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            request_type=self.request.query_params.get('request_type', None)
            leave_type=self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field='duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field='-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field='-duration'
                    # return self.queryset.all().order_by('-duration')
                if field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                if field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                if field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                if field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                if field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                if field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                if field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                if field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'


            if from_date and to_date:
                start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                filter['duration_start__date__gte'] = start_object
                end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                filter['duration_start__date__lte'] = end_object + timedelta(days=1)
            
            if dept_filter:
                dept_list = dept_filter.split(',')
                emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                filter['attendance__employee__in'] = emp_list

            if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
            if reporting_head:
                filter['attendance__employee__cu_user__reporting_head'] = reporting_head

            if hod:
                filter['attendance__employee__cu_user__hod'] = hod
            
            if leave_type:
                leave_type_list=leave_type.split(',')
                filter['leave_type__in']= leave_type_list

            if request_type:
                request_type_list=request_type.split(',')
                filter['request_type__in']= request_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset      
           
            
            else:
                # print('filter',**filter)
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
        else:
            print('sdsdsdsds')
            return []

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceLeaveApprovalListV2, self).get(self, request, args, kwargs)
        return response


class AttendanceAdminMispunchCheckerView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceAdminMispunchCheckerSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(attendance__employee__is_active=True) & Q(is_requested=True) & Q(lock_status=False) & Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False) & Q(checkin_benchmark=False)&
                                                        Q(request_type='MP')& (Q(approved_status='pending')|Q(approved_status='Approved')|Q(approved_status='Reject')))

    ## If mispunch will be accepted then we need to check the 
     # approved_status and keep only for visual not for use.
    ##

    def get_queryset(self):
        filter={}
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            start_date = self.request.query_params.get('start_date', None)
            end_date = self.request.query_params.get('end_date', None)
            users = self.request.query_params.get('users', None)
            approval_type = self.request.query_params.get('approval_type', None)
            sort_field='-id'
            if field_name and order_by:
                if field_name == 'attendance_date' and order_by == 'asc':
                    sort_field='attendance_date'
                elif field_name == 'attendance_date' and order_by == 'desc':
                    sort_field='-attendance_date'

                if field_name == 'request_date' and order_by == 'asc':
                    sort_field='request_date'
                elif field_name == 'request_date' and order_by == 'desc':
                    sort_field='-request_date'
                
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field='duration_start'
                elif field_name == 'duration_start' and order_by == 'desc':
                    sort_field='-duration_start'

                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field='duration_end'
                elif field_name == 'duration_end' and order_by == 'desc':
                    sort_field='-duration_end'

                if field_name == 'duration' and order_by == 'asc':
                    sort_field='duration'
                elif field_name == 'duration' and order_by == 'desc':
                    sort_field='-duration'

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
            
            if start_date and end_date:
                start_date_obj = datetime.strptime(start_date, '%Y-%m-%d').date()
                end_date_obj = datetime.strptime(end_date, '%Y-%m-%d').date()
                filter['duration_start__date__gte'] = start_date_obj
                filter['duration_end__date__lte'] = end_date_obj

            if approval_type:
                type_list = approval_type.split(',')
                print('approved_status',type_list)
                filter['approved_status__in'] = type_list
        
            # if search :
            #     search_data = list(map(str,search.split(" ")))
            #     print("This is if condition entry")
            #     if len(search.split(" "))>0 and len(search.split(" "))<2:
            #         print("length 1 hai ")
            #         queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
            #                                         is_deleted=False,**filter).order_by(sort_field)                            
            #         return queryset
            #     elif len(search.split(" "))>1:
            #         print("length 2 hai ")
            #         queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
            #                                         is_deleted=False,**filter).order_by(sort_field)
            #         return queryset                
            # else:
            queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
            return queryset
        else:
            return []
       
  
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdminMispunchCheckerView, self).get(self, request, args, kwargs)
        for data in response.data['results']:
            get_employee = Attendance.objects.filter(id=data['attendance']).values('employee__first_name','employee__last_name')
            print(get_employee[0]['employee__first_name'])
            print(get_employee[0]['employee__last_name'])
            data['employee'] = get_employee[0]['employee__first_name'] + ' ' + get_employee[0]['employee__last_name']
            
        return response

class AttendanceAdminMispunchCheckerCSVReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceAdminMispunchCheckerCSVReportSerializer
    # pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(attendance__employee__is_active=True) & Q(is_requested=True) & Q(lock_status=False) & Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False) & Q(checkin_benchmark=False)&
                                                        Q(request_type='MP')& (Q(approved_status='pending')|Q(approved_status='Approved')|Q(approved_status='Reject')))

    ## If mispunch will be accepted then we need to check the 
     # approved_status and keep only for visual not for use.
    ##

    def get_queryset(self):
        filter={}
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            start_date = self.request.query_params.get('start_date', None)
            end_date = self.request.query_params.get('end_date', None)
            users = self.request.query_params.get('users', None)
            approval_type = self.request.query_params.get('approval_type', None)
            sort_field='-id'

            if field_name and order_by:
                if field_name == 'attendance_date' and order_by == 'asc':
                    sort_field='attendance_date'
                elif field_name == 'attendance_date' and order_by == 'desc':
                    sort_field='-attendance_date'

                if field_name == 'request_date' and order_by == 'asc':
                    sort_field='request_date'
                elif field_name == 'request_date' and order_by == 'desc':
                    sort_field='-request_date'
                
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field='duration_start'
                elif field_name == 'duration_start' and order_by == 'desc':
                    sort_field='-duration_start'

                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field='duration_end'
                elif field_name == 'duration_end' and order_by == 'desc':
                    sort_field='-duration_end'

                if field_name == 'duration' and order_by == 'asc':
                    sort_field='duration'
                elif field_name == 'duration' and order_by == 'desc':
                    sort_field='-duration'
            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
            
            if start_date and end_date:
                start_date_obj = datetime.strptime(start_date, '%Y-%m-%d').date()
                end_date_obj = datetime.strptime(end_date, '%Y-%m-%d').date()
                filter['duration_start__date__gte'] = start_date_obj
                filter['duration_end__date__lte'] = end_date_obj

            if approval_type:
                type_list = approval_type.split(',')
                print('approved_status',type_list)
                filter['approved_status__in'] = type_list
        
            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset                
            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset
        else:
            return []
       
  
    def get(self, request, *args, **kwargs):
        response=super(AttendanceAdminMispunchCheckerCSVReportView, self).get(self, request, args, kwargs)
        if response.data:
            data_list = []
            for data in response.data:
                get_employee = Attendance.objects.filter(id=data['attendance']).values('employee__first_name','employee__last_name')
                print(get_employee[0]['employee__first_name'])
                print(get_employee[0]['employee__last_name'])
                data['employee'] = get_employee[0]['employee__first_name'] + ' ' + get_employee[0]['employee__last_name']
                print("jgjhghjg",data['duration_start'][:10],data['duration_start'][10:])
                data_list.append([data['employee'],data['attendance'],data['duration_start'][:10],data['duration_start'][11:19],data['duration_end'][11:19],\
                                    data['duration'],data['request_type'],data['justification'],data['remarks'],data['approved_status'],data['created_at'][:10],\
                                    data['created_at'][11:19]])


            ####################
            if os.path.isdir('media/attendance/misspunch_report/document'):
                file_name = 'media/attendance/misspunch_report/document/misspunch_report.csv'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/misspunch_report/document')
                file_name = 'media/attendance/misspunch_report/document/misspunch_report.csv'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name


            final_df = pd.DataFrame(data_list, columns=['Employee Name','Attendance Id','Date','Duration Start','Duration End','Duration(Min.)','Request Type',\
                            'Justification','Remarks','Approved Status','Requested(Date)','Requested(Time)'])

            final_df.index = np.arange(1,len(final_df)+1)
            final_df.to_csv(file_path)
            # print("final_df",final_df)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

            url = getHostWithPort(request) + file_name if file_name else None

            return Response(url)
                ####################
        else:
            return Response('No data found')
                    
class AttandanceRequestFreeByHRListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttandanceRequestFreeByHRListSerializer
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(attendance__employee__is_active=True) & Q(is_requested=True)&
                                                        Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (Q(approved_status='approved')|
                                                        Q(approved_status='reject')|
                                                        Q(approved_status='pending')))
    
    def get_queryset(self):
        filter={}
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search= self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            sort_field="-id"
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst
            
        
            if field_name and order_by:      
                if field_name =='date' and order_by=='asc':
                    sort_field="duration_start__date"
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name =='date' and order_by=='desc':
                    sort_field="-duration_start__date"
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name =='duration_start' and order_by=='asc':
                    sort_field="duration_start"
                    # return self.queryset.all().order_by('duration_start')
                if field_name =='duration_start' and order_by=='desc':
                    sort_field="-duration_start"
                    # return self.queryset.all().order_by('-duration_start')

                if field_name =='duration_end' and order_by=='asc':
                    sort_field="duration_end"
                    # return self.queryset.all().order_by('duration_end')
                if field_name =='duration_end' and order_by=='desc':
                    sort_field="-duration_end"
                    # return self.queryset.all().order_by('-duration_end')

                if field_name =='duration' and order_by=='asc':
                    sort_field="duration"
                    # return self.queryset.all().order_by('duration')
                if field_name =='duration' and order_by=='desc':
                    sort_field="-duration"
                    # return self.queryset.all().order_by('-duration')
            
            if request_type:
                request_type_list=request_type.split(',')
                filter['request_type__in']= request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    return queryset
                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    return queryset                

            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field) 
                return queryset
           
        else:
            return []
       

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttandanceRequestFreeByHRListView, self).get(self, request, args, kwargs)
        return response

class AttendanceMonthlyHRListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = AttendanceMonthlyHRListSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        print('blank_queryset',blank_queryset)
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        filter = {}
        date_range = None
        if self.queryset.count():
            print("self.queryset.count()",self.queryset.count())
            if current_date and emp_id:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

            if date_range:
                print("This is if")
                filter['employee']=emp_id
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']

        if filter :
            print('filter',self.queryset.filter(**filter))
            return self.queryset.filter(**filter)
        else:
            # print('else filter',self.queryset)
            return blank_queryset

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(AttendanceMonthlyHRListView,self).get(self, request, args, kwargs)
        print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                if att_req.from_place and att_req.to_place:
                    first_name = att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else ''
                    last_name = att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else ''
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':att_req.deviation_amount,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_desctiption' : att_req.vehicle_type.description if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : att_req.get_conveyance_approval_display()
                    }
                    conveyance_list.append(conveyance_dict)


            print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceMonthlyHRListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = AttendanceMonthlyHRListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        print('blank_queryset',blank_queryset)
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        filter = {}
        date_range = None
        if self.queryset.count():
            print("self.queryset.count()",self.queryset.count())
            if current_date and emp_id:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

            if date_range:
                print("This is if")
                filter['employee']=emp_id
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']

        if filter :
            print('filter',self.queryset.filter(**filter))
            return self.queryset.filter(**filter)
        else:
            # print('else filter',self.queryset)
            return blank_queryset

    def bench_15m_3days_check(self, date=None, user=None):
        # instance.duration_end == instance.attendance.login_time or instance.duration_start == instance.attendance.logout_time 
        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).first()
        bench_15m_request = AttendanceApprovalRequest.objects.filter(
                                                        Q(attendance__employee=user)&
                                                        Q(is_requested=True)&
                                                        Q(checkin_benchmark=False)&
                                                        Q(request_type='GR')&
                                                        Q(duration_start__date__gte=month_master.month_start.date())&
                                                        Q(duration_start__date__lt=date)&
                                                        Q(is_deleted=False))
        # print('bench_15m_request:',bench_15m_request)
        # print('bench_15m_request count:',bench_15m_request.count())

        attendance_set = { attendance_request.attendance for attendance_request in bench_15m_request }
        # for attendance_request in bench_15m_request:
        #     attendance_set.add(attendance_request.attendance)
        # print('attendance_set:', attendance_set)
        login_logout_requests = AttendanceApprovalRequest.objects.none()
        for attendance in attendance_set:
            login_logout_requests = login_logout_requests | bench_15m_request.filter(Q(attendance=attendance)&
                                                                                        Q(
                                                                                            Q(duration_end=attendance.login_time)|
                                                                                            Q(duration_start=attendance.logout_time)
                                                                                        )
                                                                                    )
        print('login_logout_requests:', login_logout_requests)
        return login_logout_requests.values('attendance').distinct().count()

    def get_address(self,ConveyanceMaster):
        request = self.request
        conveyancePlacesMapping = ConveyancePlacesMapping.objects.filter(conveyance_id=ConveyanceMaster.id,is_deleted=False).values(
            'conveyance','from_place','to_place','vehicle_type','vehicle_type__name','kilometers_travelled','amount','place_deviation_amount')
        #print('conveyancePlacesMapping',conveyancePlacesMapping)
        
        if conveyancePlacesMapping:
            for each in conveyancePlacesMapping:
                conveyanceDocument_list = list()
                #print('each',each)
                each['vehicle_type_name'] = each['vehicle_type__name']
                each.pop('vehicle_type__name')
                conveyanceDocuments = ConveyanceDocument.objects.filter(
                    conveyance_id = ConveyanceMaster.id,
                    from_place = each['from_place'],
                    to_place = each['to_place'],
                    is_deleted = False
                    )
                if conveyanceDocuments:
                    for each_conveyanceDocument in conveyanceDocuments:
                        conveyanceDocument_list.append(
                        {
                        'id':each_conveyanceDocument.id,
                        'document':request.build_absolute_uri(each_conveyanceDocument.document.url),
                        'document_name':each_conveyanceDocument.document_name}
                        )
                each['documents'] = conveyanceDocument_list
            return conveyancePlacesMapping
        # pass
       

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(AttendanceMonthlyHRListViewV2,self).get(self, request, args, kwargs)
        print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.request_type =='P':
                    day_remarks='Present'
                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:

                    is_login = att_req.duration_end == att_req.attendance.login_time
                    is_logout = att_req.duration_start == att_req.attendance.logout_time
                    is_login_or_logout = is_login or is_logout
                    is_3days_taken = False
                    if is_login:
                        is_3days_taken = late_login_count_excluding_benchmark(instance=att_req, user=att_req.attendance.employee) >= 3
                    elif is_logout:
                        is_3days_taken = early_logout_count_excluding_benchmark(instance=att_req, user=att_req.attendance.employee) >= 3

                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    work_form_home = WorkFromHomeDeviation.objects.filter(request=att_req,is_deleted=False).values('start_date_time', 'end_date_time', 'work_done')

                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'work_form_home': work_form_home,
                        'is_login_or_logout':is_login_or_logout,
                        'is_3days_taken': is_3days_taken,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                '''
                    Author : Rupam Hazra
                    Reason : Modifed For optional Fields
                    Date : 07-04-2020
                '''
                #if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense:
                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)
                print('conveyance_details_queryset',conveyance_details_queryset)
                if conveyance_details_queryset:
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount

                        conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid,
                        'is_round': conveyance_details.is_round,
                        'address':self.get_address(conveyance_details)
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##


            print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class AttendanceMonthlyHRSummaryListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceMonthlyHRListSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        #print('queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence= Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False
                    
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            blank_queryset = Attendance.objects.none()
            print('blank_queryset',blank_queryset)
            emp_id = self.request.query_params.get('emp_id', None)
            current_date = self.request.query_params.get('current_date', None)
            month = self.request.query_params.get('month', None)
            year = self.request.query_params.get('year', None)
            filter = {}
            date_range = None
           
                #print("self.queryset.count()",self.queryset.count())
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

                if date_range:
                    print("This is if")
                    filter['employee']=emp_id
                    filter['date__date__gte'] = date_range[0]['month_start__date']
                    filter['date__date__lte'] = date_range[0]['month_end__date']

            if filter :
                print('filter',self.queryset.filter(**filter))
                return self.queryset.filter(**filter).order_by('date')
            else:
                # print('else filter',self.queryset)
                return self.queryset.filter(is_deleted=False).order_by('date')
        else:
            return []

    def get_address(self,ConveyanceMaster):
        request = self.request
        conveyancePlacesMapping = ConveyancePlacesMapping.objects.filter(conveyance_id=ConveyanceMaster.id,is_deleted=False).values(
            'conveyance','from_place','to_place','vehicle_type','vehicle_type__name','kilometers_travelled','amount','place_deviation_amount')
        #print('conveyancePlacesMapping',conveyancePlacesMapping)
        
        if conveyancePlacesMapping:
            for each in conveyancePlacesMapping:
                conveyanceDocument_list = list()
                #print('each',each)
                each['vehicle_type_name'] = each['vehicle_type__name']
                each.pop('vehicle_type__name')
                conveyanceDocuments = ConveyanceDocument.objects.filter(
                    conveyance_id = ConveyanceMaster.id,
                    from_place = each['from_place'],
                    to_place = each['to_place'],
                    is_deleted = False
                    )
                if conveyanceDocuments:
                    for each_conveyanceDocument in conveyanceDocuments:
                        conveyanceDocument_list.append(
                        {
                        'id':each_conveyanceDocument.id,
                        'document':request.build_absolute_uri(each_conveyanceDocument.document.url),
                        'document_name':each_conveyanceDocument.document_name}
                        )
                each['documents'] = conveyanceDocument_list
            return conveyancePlacesMapping
        # pass
       

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(AttendanceMonthlyHRSummaryListView,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            grace_duration_list = []
            grace_remarks_list = []
            od_duration_list = []
            od_remarks_list = []
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'
                if att_req.request_type =='P':
                    day_remarks = 'Present'
                if att_req.request_type == 'WFH':
                    day_remarks = 'Present'

                if att_req.leave_type_changed_period=='GR':
                    daily_grace+=att_req.duration
                    grace_duration_list.append(att_req.duration)
                    grace_remarks_list.append(att_req.justification)
                elif att_req.request_type=='GR':
                    daily_grace+=att_req.duration
                    grace_duration_list.append(att_req.duration)
                    grace_remarks_list.append(att_req.justification)
                elif att_req.checkin_benchmark == True:
                    daily_grace+=att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5
                elif att_req.request_type=='OD':
                    od_duration_list.append(att_req.duration)
                    od_remarks_list.append(att_req.justification)

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                    
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    status_dict = {"relese": "Released", "reject": "Rejected", "approved": "Approved",
                                   "pending": "Pending",
                                   "regular": "Regular"}
                    doc_list = get_documents(request=request,
                                             attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents':doc_list,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : status_dict[att_req.approved_status],
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        # 'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        # 'from_place' : att_req.from_place,
                        # 'to_place' : att_req.to_place,
                        # 'conveyance_expense' : att_req.conveyance_expense,
                        # 'approved_expenses' : att_req.approved_expenses,
                        # 'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                if conveyance_details_queryset:

                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount

                        conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid,
                        'is_round': conveyance_details.is_round,
                        'address': self.get_address(conveyance_details)
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##


            print("conveyance_list", conveyance_list)
            data['conveyance_details'] = conveyance_list
            data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            data['grace_duration_list'] = grace_duration_list
            data['grace_remarks_list'] = grace_remarks_list
            data['od_duration_list'] = od_duration_list
            data['od_remarks_list'] = od_remarks_list
            work_form_home = WorkFromHomeDeviation.objects.filter(request__attendance__id=data['id'], is_deleted=False) \
                .values('start_date_time', 'end_date_time', 'work_done')
            data['work_form_home'] = work_form_home
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response

class AttendanceGraceLeaveListForHRModifiedView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)

    def get(self, request, *args, **kwargs):
        date =self.request.query_params.get('date', None)
        print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            print('sada',type(total_month_grace[0]['month_start']))
            date_object= total_month_grace[0]['month_start'].date()- timedelta(days=1)  
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
                                                                                
        print('total_month_grace',total_month_grace)
        total_grace['month_start']=total_month_grace[0]['month_start']
        total_grace['month_end']=total_month_grace[0]['month_end']
        total_grace['year_start']=total_month_grace[0]['year_start_date']
        total_grace['year_end']=total_month_grace[0]['year_end_date']
        print("total_month_grace",total_grace)

        if total_month_grace:
            total_grace['total_month_grace']=total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] else 0

        # for data in response.data:
        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                                Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        total_grace['availed_grace']=availed_grace if availed_grace else 0
        total_grace['grace_balance']=total_month_grace[0]['grace_available'] - total_grace['availed_grace']

        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=employee_id)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))
                                                          ).values('leave_type','start_date','end_date')
        print('advance_leave',advance_leave)     
        advance_cl=0
        advance_el=0
        advance_ab=0
        day=0

        ###############################################################################################
        '''
            Advanced Leave Calculation till month.
            If employee's last attendance date less then till month's last date.
            Then calculate CL/EL/AB.
        '''
        last_attendance = Attendance.objects.filter(employee=employee_id).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<total_grace['month_end'].date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = total_grace['month_end'].date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days


                        
                    if leave['leave_type']=='CL':
                        advance_cl+=day
                    elif leave['leave_type']=='EL':
                        advance_el+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day

        ############################################################
        # if advance_leave:
        #     for leave in advance_leave:
        #         print('leave',leave)
        #         start_date=leave['start_date'].date()
        #         end_date=leave['end_date'].date()+timedelta(days=1)
        #         print('start_date,end_date',start_date,end_date)
        #         if date_object < end_date:
        #             if date_object < start_date:
        #                 day=(end_date-start_date).days 
        #                 print('day',day)
        #             elif date_object > start_date:
        #                 day=(end_date-date_object).days
        #                 print('day2',day)
        #             else:
        #                 day=(end_date-date_object).days

        #         if leave['leave_type']=='CL':
        #             advance_cl+=day
        #         elif leave['leave_type']=='EL':
        #             advance_el+=day
        #         elif leave['leave_type']=='AB':
        #             advance_ab+=day
        ##################################################################
        ###################################### yearly ############################################
        # yearly_availed_data = AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,is_requested=True,is_deleted=False,
        #                                                         duration_start__gte=total_month_grace[0]['year_start_date'],
        #                                                         duration_start__lte=total_month_grace[0]['year_end_date'])

        """ 
        LEAVE CALCULATION:-
        1)SINGLE LEAVE CALCULATION
        2)MULTIPLE LEAVE FOR ONE DAY IS AUTO CONVERTED TO ONE TYPE OF LEAVE 
        EDITED BY :- Abhishek.singh@shyamfuture.com
        
        """ 

        availed_hd_cl=0.0
        availed_hd_el=0.0
        availed_hd_sl=0.0
        availed_hd_ab=0.0
        availed_cl=0.0
        availed_el=0.0
        availed_sl=0.0
        availed_ab=0.0

        yearly_attendence_daily_data = AttendanceApprovalRequest.objects.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                            attendance__employee=employee_id,is_requested=True,
                                            attendance__date__gte=total_month_grace[0]['year_start_date'],
                                            attendance__date__lte=total_month_grace[0]['month_end']).values('duration_start__date').distinct()
                                            
        print("yearly_attendence_daily_data",yearly_attendence_daily_data)
        yearly_date_list = [x['duration_start__date'] for x in yearly_attendence_daily_data.iterator()]
        print("yearly_date_list",yearly_date_list)
        # for data in attendence_daily_data.iterator():
            # print(datetime.now())
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance__employee=employee_id,
                        attendance_date__in=yearly_date_list,is_requested=True,is_deleted=False).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:

            for data in yearly_date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            availed_cl=availed_cl+1.0
                                    
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            availed_cl=availed_cl+1.0
                        elif l_type == 'EL':
                            availed_el=availed_el+1.0
                        elif l_type == 'SL':
                            availed_sl=availed_sl+1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            availed_hd_cl=availed_hd_cl+1.0
                                    
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            availed_hd_cl=availed_hd_cl+1.0
                        elif l_type == 'EL':
                            availed_hd_el=availed_hd_el+1.0
                        elif l_type == 'SL':
                            availed_hd_sl=availed_hd_sl+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0


        total_grace['yearly_availed_cl']=float(availed_cl)+float(advance_cl)+float(availed_hd_cl/2)
        total_grace['yearly_availed_el']=float(availed_el)+float(advance_el)+float(availed_hd_el/2)
        total_grace['yearly_availed_sl']=float(availed_sl)+float(availed_hd_sl/2)
        total_grace['yearly_availed_ab']=float(availed_ab)+float(advance_ab)+float(availed_hd_ab/2)
        total_grace['yearly_total_availed_leave']=total_grace['yearly_availed_cl'] + total_grace['yearly_availed_el'] + total_grace['yearly_availed_sl']
        ############################################################################################################

        ##################################### MONTHLY ##############################################
        monthly_availed_data = AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,is_requested=True,is_deleted=False,
                                                                duration_start__gte=total_month_grace[0]['month_start'],
                                                                duration_start__lte=total_month_grace[0]['month_end'])
        
        
        """ 
        LEAVE CALCULATION:-
        1)SINGLE LEAVE CALCULATION
        2)MULTIPLE LEAVE FOR ONE DAY IS AUTO CONVERTED TO ONE TYPE OF LEAVE 
        EDITED BY :- Abhishek.singh@shyamfuture.com
        
        """ 
        
        ####Monthly GR request date count##########################
        grace_month_count_total=0
        # attendence_daily_gr_count_data = Attendance.objects.filter(employee=employee_id,date__gte=total_month_grace[0]['month_start'],
        #                                                             date__lte=total_month_grace[0]['month_end'])
        # for data in attendence_daily_gr_count_data:
        #     grace_per_month=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id)&
        #                                                     Q(is_requested=True)&Q(request_type='GR')&
        #                                                     Q(duration_start__gte=total_month_grace[0]['month_start'])&
        #                                                     Q(duration_start__lte=total_month_grace[0]['month_end'])&
        #                                                     Q(is_deleted=False),attendance_date=data.date.date()
        #                                                     ).values('request_type').distinct().count()
        #     print("grace_per_month",grace_per_month)
        #     grace_month_count_total+=grace_per_month
        #     print('grace_per_month',grace_month_count_total)
        grace_month_count_total = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                                Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True)) &
                                                                (Q(approved_status='pending')|Q(approved_status='approved'))
                                                                ).aggregate(Sum('duration'))['duration__sum']
        print('grace_month_count_total',grace_month_count_total)
        ####Monthly GR request date count##########################

        monthly_availed_hd_cl=0.0
        monthly_availed_hd_el=0.0
        monthly_availed_hd_sl=0.0
        monthly_availed_hd_ab=0.0
        monthly_availed_cl=0.0
        monthly_availed_el=0.0
        monthly_availed_sl=0.0
        monthly_availed_ab=0.0

        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                            attendance__employee=employee_id,is_requested=True,
                                            attendance__date__gte=total_month_grace[0]['month_start'],
                                            attendance__date__lte=total_month_grace[0]['month_end']).values('duration_start__date').distinct()

        print("attendence_daily_data",attendence_daily_data)
        month_date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("month_date_list",month_date_list)
        # for data in attendence_daily_data.iterator():
            # print(datetime.now())
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance__employee=employee_id,
                        attendance_date__in=month_date_list,is_requested=True,is_deleted=False).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:

            for data in month_date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            monthly_availed_ab=monthly_availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            monthly_availed_cl=monthly_availed_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            monthly_availed_cl=monthly_availed_cl+1.0
                        elif l_type == 'EL':
                            monthly_availed_el=monthly_availed_el+1.0
                        elif l_type == 'SL':
                            monthly_availed_sl=monthly_availed_sl+1.0
                        elif l_type == 'AB':
                            monthly_availed_ab=monthly_availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            monthly_availed_hd_ab=monthly_availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            monthly_availed_hd_cl=monthly_availed_hd_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            monthly_availed_hd_cl=monthly_availed_hd_cl+1.0
                        elif l_type == 'EL':
                            monthly_availed_hd_el=monthly_availed_hd_el+1.0
                        elif l_type == 'SL':
                            monthly_availed_hd_sl=monthly_availed_hd_sl+1.0
                        elif l_type == 'AB':
                            monthly_availed_hd_ab=monthly_availed_hd_ab+1.0
       

        total_grace['monthly_grace_count']=grace_month_count_total
        total_grace['monthly_availed_cl']=float(monthly_availed_cl)+float(monthly_availed_hd_cl/2)
        total_grace['monthly_availed_el']=float(monthly_availed_el)+float(monthly_availed_hd_el/2)
        total_grace['monthly_availed_sl']=float(monthly_availed_sl)+float(monthly_availed_hd_sl/2)
        total_grace['monthly_availed_ab']=float(monthly_availed_ab)+float(monthly_availed_hd_ab/2)
        total_grace['monthly_total_availed_leave']= total_grace['monthly_availed_cl'] + total_grace['monthly_availed_el'] + total_grace['monthly_availed_sl']

        total_grace['monthly_od_count'] = monthly_availed_data.filter(Q(is_requested=True)& Q(is_deleted=False)&
                                                        (Q(request_type='FOD')|Q(request_type='POD'))&
                                                        (Q(approved_status='pending')|Q(approved_status='approved')
                                                        )).count()

        total_grace['monthly_od_duration'] = monthly_availed_data.filter(Q(is_requested=True)&Q(is_deleted=False)&
                                                        (Q(request_type='FOD')|Q(request_type='POD'))&
                                                        (Q(approved_status='pending')|Q(approved_status='approved')
                                                        )).aggregate(Sum('duration'))['duration__sum']

        ###############

        core_user_detail=TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False).values('joining_date',
                                                                                                    'granted_cl',
                                                                                                    'granted_sl',
                                                                                                    'granted_el'
                                                                                                    )
        print('core_user_detail',core_user_detail)
        if core_user_detail:
            if core_user_detail[0]['joining_date']>total_month_grace[0]['year_start_date']:
                approved_leave=JoiningApprovedLeave.objects.filter(employee=employee_id,is_deleted=False).values('cl', 'el', 'sl',
                                                                                                                 'year', 'month',
                                                                                                                 'first_grace')
                if approved_leave:
                    total_grace['granted_cl']=approved_leave[0]['cl']
                    total_grace['cl_balance']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) -float(total_grace['yearly_availed_cl'])
                    total_grace['granted_el']=approved_leave[0]['el']
                    total_grace['el_balance']=float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 ) -float(total_grace['yearly_availed_el'])
                    total_grace['granted_sl']=approved_leave[0]['sl']
                    total_grace['sl_balance']=float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) -float(total_grace['yearly_availed_sl'])
                    total_grace['total_granted_leave']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) + float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0) + float(approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0)
                    total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['yearly_total_availed_leave'])
                    if total_month_grace[0]['month']==approved_leave[0]['month']:    #for joining month only
                        total_grace['total_month_grace']=approved_leave[0]['first_grace']
                        total_grace['month_start']=core_user_detail[0]['joining_date']
                        total_grace['grace_balance']=total_grace['total_month_grace'] - total_grace['availed_grace']
            else:
                total_grace['granted_cl']=core_user_detail[0]['granted_cl']
                total_grace['cl_balance']=float(core_user_detail[0]['granted_cl']) - float(total_grace['yearly_availed_cl'])
                total_grace['granted_el']=core_user_detail[0]['granted_el']
                total_grace['el_balance']=float(core_user_detail[0]['granted_el']) - float(total_grace['yearly_availed_el'])
                total_grace['granted_sl']=core_user_detail[0]['granted_sl']
                total_grace['sl_balance']=float(core_user_detail[0]['granted_sl']) - float(total_grace['yearly_availed_sl'])
                total_grace['total_granted_leave']=float(core_user_detail[0]['granted_cl']) + float(core_user_detail[0]['granted_el']) + float(core_user_detail[0]['granted_sl'])
                total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['yearly_total_availed_leave'])

        data_dict['result'] = total_grace
        time_last = datetime.now()-aa
        print("time_last",time_last)
        # data_dict['result'] = "Successful"
        if total_grace:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(total_grace) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        total_grace = data_dict
        return Response(total_grace)


class AttendanceGraceLeaveListForHRModifiedViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)


    def all_leave_calculation_upto_applied_date(self, date_object=None, user=None):
        from django.db.models import Sum

        '''
        Start :: Normal leave availed by user
        '''

        sl_eligibility = 0
        el_eligibility = 0
        cl_eligibility = 0

        availed_hd_ab=0.0
        availed_ab=0.0
        availed_al = 0.0
        availed_cl = 0.0
        availed_el = 0.0
        availed_sl = 0.0

        availed_hd_al=0.0
        availed_hd_cl=0.0
        availed_hd_sl=0.0
        availed_hd_el=0.0

        carry_forward_leave = AttendanceCarryForwardLeaveBalanceYearly.objects.filter(
                    employee=user.cu_user, 
                    is_deleted=False,
                    ).first() #.aggregate(Sum('leave_balance'))
        print('carry_forward_leave:',carry_forward_leave)

        salary13_carry_forward_al = 0.0
        total_carry_forward_leave = 0.0

        if carry_forward_leave and user.salary_type and (user.salary_type.st_code=='FF' or user.salary_type.st_code=='EE'):
            salary13_carry_forward_al = carry_forward_leave.leave_balance
        
        # salary13_carry_forward_al = carry_forward_leave.leave_balance if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13'and user.is_confirm else 0.0
        print('salary13_carry_forward_al:', salary13_carry_forward_al)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                                    month_end__date__gte=date_object,is_deleted=False).first()
        
        print("month_master:", month_master)
        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((
            Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
            duration_start__date__gte=month_master.year_start_date.date(),
            attendance__employee=user.cu_user.id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("date_list",date_list)
        
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
            filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                    (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                    attendance__employee=user.cu_user.id,
                    attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                        leave_type_final = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    leave_type_final_hd = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print('availed_master_wo_reject_fd',availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:
            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0
                        elif availed_FD.filter(leave_type_final='AL'):
                            availed_al = availed_al + 1.0
                        elif availed_FD.filter(leave_type_final='EL'):
                            availed_el = availed_el + 1.0
                        elif availed_FD.filter(leave_type_final='SL'):
                            availed_sl = availed_sl + 1.0
                        elif availed_FD.filter(leave_type_final='CL'):
                            availed_cl = availed_cl + 1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'AL':
                            availed_al = availed_al + 1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0
                        elif l_type == 'EL':
                            availed_el=availed_el+1.0
                        elif l_type == 'SL':
                            availed_sl=availed_sl+1.0
                        elif l_type == 'CL':
                            availed_cl=availed_cl+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0
                        elif availed_FD.filter(leave_type_final_hd='AL'):
                            availed_hd_al=availed_hd_al+1.0
                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            availed_hd_cl=availed_hd_cl+1.0
                        elif availed_FD.filter(leave_type_final_hd='EL'):
                            availed_hd_el=availed_hd_el+1.0
                        elif availed_FD.filter(leave_type_final_hd='SL'):
                            availed_hd_sl=availed_hd_sl+1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'AL':
                            availed_hd_al=availed_hd_al+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
                        elif l_type == 'CL':
                            availed_hd_cl=availed_hd_cl+1.0
                        elif l_type == 'SL':
                            availed_hd_sl=availed_hd_sl+1.0
                        elif l_type == 'EL':
                            availed_hd_el=availed_hd_el+1.0
        
        '''
            Get total leave allocation(monthly) by request start and end date
        '''
        leave_allocation_per_month = 0.0
        leave_allocation_per_month_cl = 0.0
        leave_allocation_per_month_sl = 0.0
        leave_allocation_per_month_el = 0.0


        leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(
            (
                Q(month__month_start__date__gte=month_master.year_start_date.date(),month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,month__month_end__date__gte=date_object)
            ),employee=user.cu_user)

        if user.salary_type and leave_allocation_per_month_d:
        
            if user.salary_type.st_code == 'FF' or user.salary_type.st_code == 'EE':
                leave_allocation_per_month = leave_allocation_per_month_d.aggregate(Sum('round_figure'))['round_figure__sum']

            if user.salary_type.st_code == 'CC' or user.salary_type.st_code == 'DD':
                #print('round_cl_allotted',leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum'])
                #print('round_el_allotted',leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum'])
                #print('round_sl_allotted',leave_allocation_per_month_d.aggregate(Sum('round_sl_allotted'))['round_sl_allotted__sum'])
                leave_allocation_per_month_cl = leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum']
                leave_allocation_per_month_el = leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum']
                leave_allocation_per_month_sl = leave_allocation_per_month_d.aggregate(Sum('round_sl_allotted'))['round_sl_allotted__sum']

            
            if user.salary_type.st_code == 'BB':
                leave_allocation_per_month_cl = leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum']
                leave_allocation_per_month_el = leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum']
        
            if user.salary_type.st_code == 'AA':
                leave_allocation_per_month_cl = 0
                leave_allocation_per_month_el = 0
                leave_allocation_per_month_sl = 0
                leave_allocation_per_month = 0

        else:
            leave_allocation_per_month_cl = 0
            leave_allocation_per_month_el = 0
            leave_allocation_per_month_sl = 0
            leave_allocation_per_month = 0.0

        print('leave_allocation_per_month',leave_allocation_per_month)      


        # ::````Advance Leave Calculation```:: #
        '''
            Advance leave calculation from  after last attendance date to current month master end date.
        '''
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=user.cu_user)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))&
                                                           Q(start_date__date__lte=month_master.month_end.date())
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_al=0
        advance_ab=0
        advance_el=0
        advance_cl=0
        day=0

        last_attendance = Attendance.objects.filter(employee=user.cu_user).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<month_master.month_end.date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = month_master.month_end.date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='AL':
                        advance_al+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day
                    elif leave['leave_type']=='CL':
                        advance_cl+=day
                    elif leave['leave_type']=='EL':
                        advance_el+=day
                    print('advance_al loop', advance_al)


        '''
            Section for count total leave count which means 
            total of advance leaves and approval leave
        '''
        
        #print('advance_al',advance_al)
        # print('how_many_days_ab_taken',how_many_days_ab_taken)
        
        #print("availed_el",availed_el)
        # print("availed_al",availed_al)
        # print('availed_ab',availed_ab)
        # print('advance_ab',advance_sl)
        # print('availed_hd_ab',availed_hd_ab)

        total_availed_al=float(availed_al)+float(advance_al)+float(availed_hd_al/2)
        total_availed_ab=float(availed_ab) + float(advance_ab) +float(availed_hd_ab/2)
        total_availed_cl=float(availed_cl) + float(advance_cl) +float(availed_hd_cl/2)
        total_availed_el=float(availed_el) + float(advance_el) +float(availed_hd_el/2)
        total_availed_sl=float(availed_sl) + float(availed_hd_sl/2)




        #print("total_availed_al",total_availed_al)
        print('total_availed_sl', total_availed_sl)

        '''
            Section for remaining leaves from granted leave - availed leave
        '''
        leave_allocation_per_month  = float(leave_allocation_per_month) + float(salary13_carry_forward_al)
        balance_al = leave_allocation_per_month - float(total_availed_al)
        balance_cl = float(leave_allocation_per_month_cl) - float(total_availed_cl)
        balance_sl = float(leave_allocation_per_month_sl) - float(total_availed_sl)
        balance_el = float(leave_allocation_per_month_el) - float(total_availed_el)


        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=user.cu_user) &
                                                                Q(duration_start__gte=month_master.month_start) &
                                                                Q(duration_start__lte=month_master.month_end) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        availed_grace = availed_grace if availed_grace else 0
        total_month_grace = month_master.grace_available
        grace_balance = total_month_grace - availed_grace

        # if user.salary_type and user.salary_type.st_name=='Bonus 13' and user.is_confirm == False:
        #     is_confirm = False
        # else:
        #     is_confirm = user.is_confirm

        yearly_leave_allocation = float(user.granted_cl) + float(user.granted_sl) + float(user.granted_el) + float(total_carry_forward_leave)
        sl_eligibility = float(user.granted_sl)
        el_eligibility = float(user.granted_el)
        cl_eligibility = float(user.granted_cl)


        month_start = month_master.month_start
        if user.joining_date > month_master.year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            if approved_leave:
                yearly_leave_allocation = float(approved_leave.cl) + float(approved_leave.sl) + float(approved_leave.el)
                sl_eligibility = float(approved_leave.sl)
                el_eligibility = float(approved_leave.el)
                cl_eligibility = float(approved_leave.cl)

                if month_master.month==approved_leave.month:    #for joining month only
                    total_month_grace=approved_leave.first_grace
                    month_start=user.joining_date
                    grace_balance=total_month_grace - availed_grace

        # ad_lv_cal = advance_leave_calculation_excluding_current_month(tcore_user=user, date_object=date_object)
        # print('ad_lv_cal', ad_lv_cal)

        result = {
            "month_start":month_start,
            "month_end":month_master.month_end,
            "year_start":month_master.year_start_date,
            "year_end":month_master.year_end_date,
            "is_confirm": False,
            "total_month_grace": total_month_grace,
            "availed_grace": availed_grace,
            "grace_balance": grace_balance,
            "salary_type_code": user.salary_type.st_code if user.salary_type else "",
            "salary_type": user.salary_type.st_name if user.salary_type else "",
            "total_eligibility": yearly_leave_allocation,
            "total_accumulation": leave_allocation_per_month,
            "total_consumption": total_availed_al,
            "total_available_balance": balance_al,
            "total_absent": total_availed_ab,
            "granted_cl":leave_allocation_per_month_cl,
            "availed_cl":total_availed_cl,
            "cl_balance":balance_cl if balance_cl > 0 else 0.0,
            "granted_el":leave_allocation_per_month_el,
            "availed_el":total_availed_el,
            "el_balance":balance_el if balance_el > 0 else 0.0,
            "granted_sl":leave_allocation_per_month_sl,
            "availed_sl":total_availed_sl,
            "sl_balance": balance_sl if  balance_sl > 0 else 0.0,
            "cl_eligibility":cl_eligibility,
            "el_eligibility":el_eligibility,
            "sl_eligibility":sl_eligibility,

            }

        return result


    def get(self, request, *args, **kwargs):
        date =self.request.query_params.get('date', None)
        print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            print('sada',type(total_month_grace[0]['month_start']))
            date_object= total_month_grace[0]['month_start'].date()- timedelta(days=1)  
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        # removed 'cu_is_deleted=False' from the below query - updated by Shubhadeep
        user = TCoreUserDetail.objects.filter(cu_user=employee_id).first()
        result = self.all_leave_calculation_upto_applied_date(date_object=date_object, user=user)

        data_dict['result'] = result
        time_last = datetime.now()-aa
        print("time_last",time_last)
        # data_dict['result'] = "Successful"
        if result:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(result) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        return Response(data_dict)


class AttendanceGraceLeaveMonthWiseView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)


    def all_leave_calculation_upto_applied_date(self, date_object=None, user=None):
        from django.db.models import Sum

        '''
        Start :: Normal leave availed by user
        '''
        how_many_days_ab_taken = 0.0
        how_many_days_al_taken = 0.0

        availed_hd_ab=0.0
        availed_ab=0.0
        availed_al = 0.0
        availed_hd_al=0.0
        carry_forward_leave = AttendanceCarryForwardLeaveBalanceYearly.objects.filter(
                    employee=user.cu_user, 
                    is_deleted=False,
                    ).first() #.aggregate(Sum('leave_balance'))
        print('carry_forward_leave:',carry_forward_leave)

        salary13_carry_forward_al = 0.0
        total_carry_forward_leave = 0.0
        if carry_forward_leave and user.salary_type:
            if user.salary_type.st_name in ['12.5(new)','13(new)']:
                total_carry_forward_leave = carry_forward_leave.leave_balance
                salary13_carry_forward_al = carry_forward_leave.leave_balance
            # if user.is_confirm:
            #     salary13_carry_forward_al = carry_forward_leave.leave_balance
            # else:
            #     approved_leave = JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            #     salary13_carry_forward_al = float(carry_forward_leave.leave_balance) - float(approved_leave.el)

        # salary13_carry_forward_al = carry_forward_leave.leave_balance if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13'and user.is_confirm else 0.0
        print('salary13_carry_forward_al:', salary13_carry_forward_al)


        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                                    month_end__date__gte=date_object,is_deleted=False).first()
        
        print("month_master:", month_master)
        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((
            Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
            duration_start__date__gte=month_master.year_start_date.date(),
            attendance__employee=user.cu_user.id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("date_list",date_list)
        
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
            filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                    (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                    attendance__employee=user.cu_user.id,
                    attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                        leave_type_final = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    leave_type_final_hd = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print('availed_master_wo_reject_fd',availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:
            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0
                        elif availed_FD.filter(leave_type_final='AL'):
                            availed_al = availed_al + 1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'AL':
                            availed_al = availed_al + 1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0
                        elif availed_FD.filter(leave_type_final_hd='AL'):
                            availed_hd_al=availed_hd_al+1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'AL':
                            availed_hd_al=availed_hd_al+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
        
        '''
            Get total leave allocation(monthly) by request start and end date
        '''
        leave_allocation_per_month = 0.0
        # leave_allocation_yearly = 0.0

        if user.is_confirm == False: 
            if user.salary_type and user.salary_type.st_name=='13':
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                    month__month_end__date__lte=date_object)|Q(month__month_start__date__lte=date_object,
                    month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))
                print('leave_allocation_per_month_d',leave_allocation_per_month_d)
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure_not_confirm__sum'] if leave_allocation_per_month_d['round_figure_not_confirm__sum'] else 0.0
                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))['round_figure_not_confirm__sum']
                # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0

            else:
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0

                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        else:
            leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
            leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0
            print('leave_allocation_per_month',leave_allocation_per_month)

            # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
            #                                                         employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        
        # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0
        
        # current year leave + salary 13 leave carry forward
        # leave_allocation_yearly = leave_allocation_yearly + total_carry_forward_leave

        print('leave_allocation_per_month',leave_allocation_per_month)           

        # ::````Advance Leave Calculation```:: #
        
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=user.cu_user)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))&
                                                           Q(start_date__date__lte=month_master.month_end.date())
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_al=0
        advance_ab=0
        day=0


        last_attendance = Attendance.objects.filter(employee=user.cu_user).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<month_master.month_end.date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = month_master.month_end.date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='AL':
                        advance_al+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day


        '''
            Section for count total leave count which means 
            total of advance leaves and approval leave
        '''
        
        print('advance_al',advance_al)
        # print('advance_ab',advance_ab)

        


        
        
        #print("availed_el",availed_el)
        print("availed_al",availed_al)
        
        total_availed_al=float(availed_al)+float(advance_al)+float(availed_hd_al/2)
        total_availed_ab=float(availed_ab) + float(advance_ab) +float(availed_hd_ab/2)
        print("total_availed_al",total_availed_al)
        print('total_availed_ab', total_availed_ab)

        '''
            Section for remaining leaves from granted leave - availed leave
        '''
        leave_allocation_per_month  = float(leave_allocation_per_month) + float(salary13_carry_forward_al)
        balance_al = leave_allocation_per_month - float(total_availed_al)


        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=user.cu_user) &
                                                                Q(duration_start__gte=month_master.month_start) &
                                                                Q(duration_start__lte=month_master.month_end) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        availed_grace = availed_grace if availed_grace else 0
        total_month_grace = month_master.grace_available
        grace_balance = total_month_grace - availed_grace

        if user.salary_type and user.salary_type.st_name=='13' and user.is_confirm == False:
            is_confirm = False
        else:
            is_confirm = True

        yearly_leave_allocation = float(user.granted_leaves_cl_sl) + float(user.granted_el) + float(total_carry_forward_leave)
        month_start = month_master.month_start
        if user.joining_date > month_master.year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            if approved_leave:
                yearly_leave_allocation = float(approved_leave.granted_leaves_cl_sl) + float(approved_leave.el)
                if month_master.month==approved_leave.month:    #for joining month only
                    total_month_grace=approved_leave.first_grace
                    month_start=user.joining_date
                    grace_balance=total_month_grace - availed_grace

        monthly_availed_data = AttendanceApprovalRequest.objects.filter(attendance__employee=user.cu_user,is_requested=True,is_deleted=False,
                                                        duration_start__gte=month_master.month_start,
                                                        duration_start__lte=month_master.month_end)
        
        # monthly_od_count = monthly_availed_data.filter(Q(is_requested=True)& Q(is_deleted=False)&
        #                                                 (Q(request_type='FOD')|Q(request_type='POD'))&
        #                                                 (Q(approved_status='pending')|Q(approved_status='approved')
        #                                                 )).count()
        #
        # monthly_od_duration = monthly_availed_data.filter(Q(is_requested=True)&Q(is_deleted=False)&
        #                                                 (Q(request_type='FOD')|Q(request_type='POD'))&
        #                                                 (Q(approved_status='pending')|Q(approved_status='approved')
        #                                                 )).aggregate(Sum('duration'))['duration__sum']
        # monthly_od_duration = monthly_od_duration if monthly_od_duration else 0
        monthDict = {1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun', 7: 'Jul', 8: 'Aug', 9: 'Sep',
                     10: 'Oct', 11: 'Nov', 12: 'Dec'}
        if user.is_confirm:
            leave_allocation_obj = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(employee=user.cu_user,
                                                                                         employee__cu_user__is_confirm=True)
            print("in if")
            print(leave_allocation_obj.count())
            print(leave_allocation_obj[0].month.month, leave_allocation_obj[0].month.month_start)
            month_wise_leave = list()
            for each in leave_allocation_obj:
                temp_month_data = dict()
                temp_month_data["accumulation"] = int(each.round_figure)
                temp_month_data["month"] = monthDict[each.month.month]

                month_wise_leave.append(temp_month_data)
            print(month_wise_leave)



        else:
            leave_allocation_obj = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(employee=user.cu_user,
                                                                                         employee__cu_user__is_confirm=False)
            print("in else")
            print(leave_allocation_obj)
            month_wise_leave = list()
            for each in leave_allocation_obj:
                temp_month_data = dict()
                temp_month_data["accumulation"] = int(each.round_figure_not_confirm)
                temp_month_data["month"] = monthDict[each.month.month]

                month_wise_leave.append(temp_month_data)
            print(month_wise_leave)



        result = {
            # "month_start":month_start,
            # "month_end":month_master.month_end,
            # "year_start":month_master.year_start_date,
            # "year_end":month_master.year_end_date,
            "is_confirm": is_confirm,
            # "total_month_grace": total_month_grace,
            # "availed_grace": availed_grace,
            # "grace_balance": grace_balance,
            "total_eligibility": yearly_leave_allocation,
            "total_accumulation": leave_allocation_per_month,
            "total_consumption": total_availed_al,
            "total_balance": yearly_leave_allocation - total_availed_al ,
            "carry_leaves": total_carry_forward_leave,
            # "total_absent": total_availed_ab,
            "monthly_accumulation":month_wise_leave,
            # "monthly_od_count":monthly_od_count,
            # "monthly_od_duration":monthly_od_duration
            }

        return result


    def get(self, request, *args, **kwargs):
        date =self.request.query_params.get('date', None)
        print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            print('sada',type(total_month_grace[0]['month_start']))
            date_object= total_month_grace[0]['month_start'].date()- timedelta(days=1)  
            total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                                'year_start_date',
                                                                                                'year_end_date',
                                                                                                'month',
                                                                                                'month_start',
                                                                                                'month_end')


        user = TCoreUserDetail.objects.filter(cu_user=employee_id, cu_is_deleted=False).first()
        if user:
            result = self.all_leave_calculation_upto_applied_date(date_object=date_object, user=user)

            data_dict['result'] = result
            time_last = datetime.now() - aa
            print("time_last", time_last)
            if result:
                data_dict['request_status'] = 1
                data_dict['msg'] = settings.MSG_SUCCESS
            elif len(result) == 0:
                data_dict['request_status'] = 1
                data_dict['msg'] = settings.MSG_NO_DATA
            else:
                data_dict['request_status'] = 0
                data_dict['msg'] = settings.MSG_ERROR
        else:
            data_dict['result'] = "employee not found"
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR


        # data_dict['result'] = "Successful"
        # if result:
        #     data_dict['request_status'] = 1
        #     data_dict['msg'] = settings.MSG_SUCCESS
        # elif len(result) == 0:
        #     data_dict['request_status'] = 1
        #     data_dict['msg'] = settings.MSG_NO_DATA
        # else:
        #     data_dict['request_status'] = 0
        #     data_dict['msg'] = settings.MSG_ERROR
        return Response(data_dict)



#:::::::::::::::::::::: ATTENDANCE SPECIALDAY MASTER:::::::::::::::::::::::::::#
class AttendanceSpecialdayMasterAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceSpecialdayMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialdayMasterAddSerializer

    def get_queryset(self):
        ## decleare the date parameret
        # modified by Swarup Adhukary on 04.01.2020
        year = self.request.query_params.get('year', None)
        print('year', year)
        month = self.request.query_params.get('month', None)
        print('month', month)
        start_date = self.request.query_params.get('start_date', None)
        end_date = self.request.query_params.get('end_date', None)
        if start_date and end_date:
            start_object = datetime.strptime(start_date, '%Y-%m-%d')
            delta = timedelta(days=1)
            end_object = datetime.strptime(end_date, '%Y-%m-%d')

        if month:
            print("in month")
            self.queryset = self.queryset.filter(Q(day_start_time__month=month) | Q(full_day__month=month))

        if year:
            queryset = self.queryset.filter(Q(day_start_time__year=year) | Q(full_day__year=year)).order_by('-id')
        else:
            print("in else")
            queryset = self.queryset.all().order_by('-id')
        return queryset


    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceSpecialdayMasterEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceSpecialdayMaster.objects.all()
    serializer_class = AttendanceSpecialdayMasterEditSerializer
    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceSpecialdayMasterDeleteView(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = AttendanceSpecialdayMaster.objects.all()
	serializer_class = AttendanceSpecialdayMasterDeleteSerializer

class AttendanceEmployeeReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = TCoreUserDetail.objects.filter(cu_is_deleted=False)
    serializer_class = AttendanceEmployeeReportSerializer

    def get(self, request, *args, **kwargs):
        
        ## decleare the date parameret
        date =self.request.query_params.get('date', None)
        print('date',date)
        
        ## convert date argument to date object
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        print('date_object',date_object)

        response = super(AttendanceEmployeeReportView,self).get(self, request, args, kwargs)

        ## get month from MonthMaster by date from argument ##
        total_month=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        ###### Sunday count in month range ######

        ## Thease prints for month start and month end ##
        print('month_start-->',total_month[0]['month_start'].date())
        print('month_end-->',total_month[0]['month_end'].date())

        sunday_count = 0
        saturday_count = 0
        start_date = total_month[0]['month_start'].date()
        end_date = total_month[0]['month_end'].date()
        print(start_date," ",end_date)
        current_month= ((total_month[0]['month_end'].date()+ timedelta(days=1)) - total_month[0]['month_start'].date()).days
        date_generated = [start_date + timedelta(days=x) for x in range(0, current_month)] 
        # print('current_month-->',current_month)
        for get_day in date_generated:
            if get_day.weekday()==6:
                sunday_count +=1
            if get_day.weekday()==5:
                saturday_count +=1 
        print('sunday_count-->',sunday_count)

        for data in response.data:
            
            ## get the user name and set first_name and last_name in different veriable ##
            user_name = User.objects.filter(id=data['cu_user'],is_active=True).values('first_name','last_name')
            first_name = user_name[0]['first_name'] if user_name[0]['first_name'] else '' 
            last_name = user_name[0]['last_name'] if user_name[0]['last_name'] else ''

            ## get current month filter ##
            monthly_availed_data = AttendanceApprovalRequest.objects.filter(attendance__employee=data['cu_user'],is_requested=True,is_deleted=False,
                                                                duration_start__gte=total_month[0]['month_start'],
                                                                duration_start__lte=total_month[0]['month_end'])

            ## Present Days calculation ##
            atten_count = Attendance.objects.filter(employee=data['cu_user'],is_present=True,is_deleted=False,date__gte=total_month[0]['month_start'].date(),
                                                    date__lte=total_month[0]['month_end'].date()).count()
            ## Print For debugging ##
            print('atten_count-->',atten_count)

            ## Half Day calculation ##
            half_day = monthly_availed_data.filter(Q(is_deleted=False)& Q(attendance__employee=data['cu_user']) & Q(request_type='HD')).count()
            print('half_day-->',half_day)
            half_day =half_day/2

            ### cl,el,sl,ab Full Day count ###
            fd_cl = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='FD', leave_type='CL',is_requested=True,is_deleted=False).count()
            fd_el = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='FD', leave_type='EL',is_requested=True,is_deleted=False).count()
            fd_sl = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='FD', leave_type='SL',is_requested=True,is_deleted=False).count()
            fd_ab = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='FD', leave_type='AB',is_requested=True,is_deleted=False).count()

            ### cl,el,sl,ab Half Day count ###
            hd_cl = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='HD', leave_type='CL',is_requested=True,is_deleted=False).count()
            hd_el = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='HD', leave_type='EL',is_requested=True,is_deleted=False).count()
            hd_sl = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='HD', leave_type='SL',is_requested=True,is_deleted=False).count()
            hd_ab = monthly_availed_data.filter((Q(approved_status='pending')|Q(approved_status='approved')),attendance__employee=data['cu_user'],
                                                                request_type='HD', leave_type='AB',is_requested=True,is_deleted=False).count()

            ## comment by developer for few days and tesing ##
            # current_month = ((total_month[0]['month_end'].date()+ timedelta(days=1)) - total_month[0]['month_start'].date()).days
            
            ## Holiday count in month range ##
            holyday_count = HolidaysList.objects.filter(status=True,is_deleted=False,holiday_date__gte=total_month[0]['month_start'].date(),
                                                        holiday_date__lte=total_month[0]['month_end'].date()).count()

            ### cl,el,sl,ab Half Day count ###
            cl_taken = float(fd_cl)+float(hd_cl/2)
            el_taken = float(fd_el)+float(hd_el/2)
            sl_taken = float(fd_sl)+float(hd_sl/2)
            ab_taken = float(fd_ab)+float(hd_ab/2)

            ## Present day calculation ##
            present_days = (atten_count-half_day)

            ## total Woring days calculation ##
            total_working_day = (sunday_count + holyday_count + present_days + cl_taken + el_taken + sl_taken) - ab_taken
            
            ## Print fo debuging ##
            print('get_holyday_count-->',holyday_count)          
            print('name : ',first_name+' '+last_name)
            print('total_days_in_month-->',current_month)
            print('user--------->',data['cu_user'])
            print('half_day-->',half_day)
            print('CL_taken-->',cl_taken)
            print('EL_taken-->',el_taken)
            print('SL_taken-->',sl_taken)
            print('AB_taken-->',ab_taken)
            print('total_working_day-->',total_working_day)

            ### Data Binding in JSON ##
            data['cu_user'] = first_name+' '+last_name
            data['sunday'] = sunday_count
            data['present_days'] = present_days
            data['cl_taken'] = cl_taken
            data['el_taken'] = el_taken
            data['sl_taken'] = sl_taken
            data['ab_taken'] = ab_taken
            data['total_days_in_month'] = current_month
            data['holiday'] = holyday_count
            data['total_working_day'] = total_working_day
            
        return response

class logListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendenceAction.objects.all().order_by('-id')
    serializer_class = logListSerializer
    pagination_class = CSPageNumberPagination
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(logListView,self).get(self, request, args, kwargs)
        for data in response.data['results']:
            data['user_role_details']={
                'user_id':data['user'],
                'user_name':userdetails(data['user']),
                'role':TCoreRole.objects.get(id=str(TMasterModuleRoleUser.objects.get(mmr_module__cm_name__iexact='hrms',mmr_user=request.user).mmr_role)).cr_name ,
                'department': department(data['user']),
                'designation': designation(data['user'])
            }

        return response

#::::::::::::::::::::::::::::::::::::::::: Report :::::::::::::::::::::::::::::::::::::::#
class AttandanceAdminOdMsiReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttandanceAdminOdMsiReportSerializer

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        total_list = []
        year =self.request.query_params.get('year', None)
        month =self.request.query_params.get('month', None)
        attendance_type = self.request.query_params.get('attendance_type', None)

        month_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
        if month_range:
            month_start = month_range[0]['month_start__date']
            month_end = month_range[0]['month_end__date']
            module_user_list = list(TMasterModuleRoleUser.objects.filter(
                mmr_module__cm_name='ATTENDANCE & HRMS',mmr_type=3, mmr_user__is_active=True).values_list('mmr_user',flat=True))

            if attendance_type:
                module_user_list = list(TCoreUserDetail.objects.filter(
                attendance_type=attendance_type,cu_user__is_active=True,cu_is_deleted=False).values_list('cu_user',flat=True))

                

            print('module_user_list',module_user_list)
            od_emp_list = set(AttendanceApprovalRequest.objects.filter(
                Q(is_requested=True)&
                Q(is_deleted=False)&
                Q(duration_start__date__gte=month_start)&
                Q(duration_start__date__lte=month_end)&
                (Q(request_type='FOD')|Q(request_type='POD'))&
                (Q(approved_status='pending')|
                Q(approved_status='approved')|
                Q(approved_status='reject')),
                attendance__employee__in=module_user_list).values_list('attendance__employee', flat=True))

            print("get_od_emp_details",od_emp_list)
            od_details = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)& Q(is_deleted=False)&
                                                                    Q(duration_start__date__gte=month_start)&
                                                                    Q(duration_start__date__lte=month_end)&
                                                                    (Q(request_type='FOD')|Q(request_type='POD'))&
                                                                    (Q(approved_status='pending')|Q(approved_status='approved')|
                                                                    Q(approved_status='reject')),attendance__employee__in=od_emp_list)

            if od_emp_list:
                for emp in od_emp_list:
                    data_list = []
                    print("emp",emp)
                    od_duration = od_details.filter(attendance__employee=emp).aggregate(Sum('duration'))['duration__sum']
                    approved_od = od_details.filter(attendance__employee=emp,approved_status='approved').count()
                    pending_od = od_details.filter(attendance__employee=emp,approved_status='pending').count()
                    reject_od = od_details.filter(attendance__employee=emp,approved_status='reject').count()
                    total_od = approved_od + pending_od + reject_od

                    print("khlkhkjg", total_od , approved_od , pending_od , reject_od)

                    # user_details = TCoreUserDetail.objects.filter(cu_user=emp,cu_is_deleted=False).values('cu_user__first_name',
                    #                                                 'cu_user__last_name', 'cu_punch_id', 'hod__first_name','hod__last_name')#reporting_head
                    user_details = TCoreUserDetail.objects.filter(cu_user=emp,cu_user__is_active=True, cu_is_deleted=False).annotate(
                                                                        user_first_name=Case(
                                                                        When(cu_user__first_name__isnull=True, then=Value("")),
                                                                        When(cu_user__first_name__isnull=False, then=F('cu_user__first_name')),
                                                                        output_field=CharField()
                                                                        ),user_last_name=Case(
                                                                        When(cu_user__last_name__isnull=True, then=Value("")),
                                                                        When(cu_user__last_name__isnull=False, then=F('cu_user__last_name')),
                                                                        output_field=CharField()
                                                                        ),reporting_head_first_name=Case(
                                                                        When(reporting_head__first_name__isnull=True, then=Value("")),
                                                                        When(reporting_head__first_name__isnull=False, then=F('reporting_head__first_name')),
                                                                        output_field=CharField()
                                                                        ),reporting_head_last_name=Case(
                                                                        When(reporting_head__last_name__isnull=True, then=Value("")),
                                                                        When(reporting_head__last_name__isnull=False, then=F('reporting_head__last_name')),
                                                                        output_field=CharField()
                                                                        ),hod_first_name=Case(
                                                                        When(hod__first_name__isnull=True, then=Value("")),
                                                                        When(hod__first_name__isnull=False, then=F('hod__first_name')),
                                                                        output_field=CharField()
                                                                        ),hod_last_name=Case(
                                                                        When(hod__last_name__isnull=True, then=Value("")),
                                                                        When(hod__last_name__isnull=False, then=F('hod__last_name')),
                                                                        output_field=CharField()
                                                                        ),cu_emp_code_n=Case(
                                                                        When(cu_emp_code__isnull=True, then=Value("")),
                                                                        When(cu_emp_code__isnull=False, then=F('cu_emp_code')),
                                                                        output_field=CharField()),).values(
                                                                        'user_first_name','user_last_name','reporting_head_first_name','reporting_head_last_name',
                                                                        'hod_first_name','hod_last_name','cu_emp_code_n').order_by('-hod_first_name')
                    print("user_details",  user_details[0])
                    employee_name = user_details[0]['user_first_name']+" "+user_details[0]['user_last_name']
                    reporting_head = user_details[0]['reporting_head_first_name']+" "+user_details[0]['reporting_head_last_name']
                    hod_name = user_details[0]['hod_first_name']+" "+user_details[0]['hod_last_name']
                    # data_dict['employee_name'] = user_details.__dict__['cu_user__first_name']
                    employee_code = user_details[0]['cu_emp_code_n']
                    data_list = [employee_name, reporting_head, hod_name, employee_code, total_od, od_duration, approved_od, pending_od, reject_od]

                    total_list.append(data_list)

        # print('total_list--->',total_list)
        if os.path.isdir('media/attendance/od_mis_report/document'):
            file_name = 'media/attendance/od_mis_report/document/od_mis_report.xlsx'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/od_mis_report/document')
            file_name = 'media/attendance/od_mis_report/document/od_mis_report.xlsx'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        
        #########################################################
        df = DataFrame(total_list, columns= ['Employee Name', 'Reporting Head', 'HOD Name', 'Employee_code', 'Total Od', 'Total Min', 'Approved', 'Pending', 'Rejected'])
        df.sort_values(['Reporting Head'], inplace=True,ascending=True)
        export_csv = df.to_excel (file_path, index = None, header=True)

        #########################################################
        #url_path = request.build_absolute_uri(file_name) if file_name else None
        #print("url_path",url_path)
        
        '''
            Editied By Rupam Hazra on 2019-12-17
        '''
        #print('host',request.get_host())

        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        #print('url',url)
        #url = re.search('https://(\d+\.)+\d+\:\d{4}\/',str(url_path)).group()
        #print("url",url)
        #url_path = url+file_name
        # url_path = "http://13.232.240.233:8000/"+file_name
        return Response(url)

class AttandanceAdminOdMsiReportDetailsView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttandanceAdminOdMsiReportSerializer

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        total_list = []
        day_start =self.request.query_params.get('day_start', None)
        employee_id = self.request.query_params.get('employee_id', None)
        day_end =self.request.query_params.get('day_end', None)
        year =self.request.query_params.get('year', None)
        month =self.request.query_params.get('month', None)
        dept_filter = self.request.query_params.get('dept_filter', None)

        emp_list = []
        total_user_list = []
        filter_search = {}
        module_user_list = list(TMasterModuleRoleUser.objects.filter(mmr_module__cm_name='ATTENDANCE & HRMS',mmr_type=3).values_list('mmr_user',flat=True))
        print('module_user_list',module_user_list)

        if employee_id:
            filter_search['attendance__employee__id'] = employee_id

        if dept_filter:
            dept_list = dept_filter.split(',')
            emp_list = list(TCoreUserDetail.objects.filter(cu_user__is_active=True,department__in=dept_list).values_list('cu_user',flat=True))
            print("emp_list",emp_list)
            # filter_search['attendance__employee__in']=emp_list
            total_user_list = [val for val in module_user_list if val in emp_list]
            filter_search['attendance__employee__in']=total_user_list
        else:
            filter_search['attendance__employee__in'] = module_user_list

        if day_start and day_end:
            month_start = datetime.strptime(day_start,"%Y-%m-%d").date()
            month_end = datetime.strptime(day_end,"%Y-%m-%d").date()

        elif year and month:
            month_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
            if month_range:
                month_start = month_range[0]['month_start__date']
                month_end = month_range[0]['month_end__date']
        if month_start and month_end:       
            od_emp_list = set(AttendanceApprovalRequest.objects.filter(Q(**filter_search)&
                                                                        Q(is_requested=True)& Q(is_deleted=False)&
                                                                        Q(duration_start__date__gte=month_start)&
                                                                        Q(duration_start__date__lte=month_end)&
                                                                        (Q(request_type='FOD')|Q(request_type='POD'))&
                                                                        (Q(approved_status='pending')|Q(approved_status='approved')|
                                                                        Q(approved_status='reject'))).values_list('attendance__employee', 
                                                                        flat=True))

            print("get_od_emp_details",od_emp_list)
            od_details = AttendanceApprovalRequest.objects.filter(Q(**filter_search)&
                                                                    Q(is_requested=True)& Q(is_deleted=False)&
                                                                    Q(duration_start__date__gte=month_start)&
                                                                    Q(duration_start__date__lte=month_end)&
                                                                    (Q(request_type='FOD')|Q(request_type='POD'))&
                                                                    (Q(approved_status='pending')|Q(approved_status='approved')|
                                                                    Q(approved_status='reject')))

            if od_emp_list:
                for emp in od_emp_list:
                    # print("emp",emp)
                    user_details = TCoreUserDetail.objects.filter(cu_user=emp, cu_user__is_active=True,cu_is_deleted=False).annotate(
                                                                        user_first_name=Case(
                                                                        When(cu_user__first_name__isnull=True, then=Value("")),
                                                                        When(cu_user__first_name__isnull=False, then=F('cu_user__first_name')),
                                                                        output_field=CharField()
                                                                        ),user_last_name=Case(
                                                                        When(cu_user__last_name__isnull=True, then=Value("")),
                                                                        When(cu_user__last_name__isnull=False, then=F('cu_user__last_name')),
                                                                        output_field=CharField()
                                                                        ),reporting_head_first_name=Case(
                                                                        When(reporting_head__first_name__isnull=True, then=Value("")),
                                                                        When(reporting_head__first_name__isnull=False, then=F('reporting_head__first_name')),
                                                                        output_field=CharField()
                                                                        ),reporting_head_last_name=Case(
                                                                        When(reporting_head__last_name__isnull=True, then=Value("")),
                                                                        When(reporting_head__last_name__isnull=False, then=F('reporting_head__last_name')),
                                                                        output_field=CharField()
                                                                        ),hod_first_name=Case(
                                                                        When(hod__first_name__isnull=True, then=Value("")),
                                                                        When(hod__first_name__isnull=False, then=F('hod__first_name')),
                                                                        output_field=CharField()
                                                                        ),hod_last_name=Case(
                                                                        When(hod__last_name__isnull=True, then=Value("")),
                                                                        When(hod__last_name__isnull=False, then=F('hod__last_name')),
                                                                        output_field=CharField()
                                                                        ),sap_personnel_no_n=Case(
                                                                        When(sap_personnel_no__isnull=True, then=Value("")),
                                                                        When(sap_personnel_no__isnull=False, then=F('sap_personnel_no')),
                                                                        output_field=CharField()
                                                                        ),cu_emp_code_n=Case(
                                                                        When(cu_emp_code__isnull=True, then=Value("")),
                                                                        When(cu_emp_code__isnull=False, then=F('cu_emp_code')),
                                                                        output_field=CharField()),).values(
                                                                        'user_first_name','user_last_name','reporting_head_first_name',
                                                                        'reporting_head_last_name','hod_first_name','hod_last_name','sap_personnel_no_n',
                                                                        'cu_emp_code_n').order_by('-hod_first_name')
                    # print("user_details",  user_details)
                    employee_name = user_details[0]['user_first_name']+" "+user_details[0]['user_last_name']
                    reporting_head = user_details[0]['reporting_head_first_name']+" "+user_details[0]['reporting_head_last_name']
                    hod_name = user_details[0]['hod_first_name']+" "+user_details[0]['hod_last_name']
                    # data_dict['employee_name'] = user_details.__dict__['cu_user__first_name']
                    emp_sap_id = user_details[0]['sap_personnel_no_n']
                    emp_code = user_details[0]['cu_emp_code_n']
                    request_list = od_details.filter(attendance__employee=emp)
                    if request_list:
                        for request_data in request_list:
                            data_list = []
                            req_date = request_data.duration_start.date()
                            req_start = request_data.duration_start.time()
                            req_end = request_data.duration_end.time()
                            justification = request_data.justification
                            approved_status = request_data.approved_status

                            data_list = [employee_name, reporting_head, hod_name, emp_code, emp_sap_id, req_date, req_start, req_end, justification, approved_status]

                            total_list.append(data_list)

        # print('total_list--->',total_list)
        if os.path.isdir('media/attendance/od_mis_report/document'):
            file_name = 'media/attendance/od_mis_report/document/od_mis_details_report.xlsx'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/od_mis_report/document')
            file_name = 'media/attendance/od_mis_report/document/od_mis_details_report.xlsx'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        
        #########################################################
        df = DataFrame(total_list, columns= ['Employee Name', 'Reporting Head','HOD Name','Employee Code','SAP No','Attendance Date','Duration Start','Duration End', 'Justification','Approved Status'])
        df.sort_values(['Reporting Head'], inplace=True,ascending=True)
        export_csv = df.to_excel (file_path, index = None, header=True)

        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        print('url',url)

        return Response(url)

class AttandanceAdminSAPReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    
    def get_SapCode(self):
        return TCoreLeaveCodeForSapReport.objects.filter(is_deleted=False)

    def get_pmsAttandanceLeaveBalanceTransferLog(self):
        sap_code_for_leave = self.get_SapCode()
        subtype,sap_no = None,None
        total_list = list()
        dept_filter = self.request.query_params.get('dept_filter', None)
        year = self.request.query_params.get('year', None)
        month = self.request.query_params.get('month', None)
        filter = {
        'is_deleted':False
        }
        if month and year:
            date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
            filter['attendance_date__gte'] = date_range[0]['month_start__date']
            filter['attendance_date__lte'] = date_range[0]['month_end__date']

        if dept_filter:
            filter['employee__in'] = TCoreUserDetail.objects.filter(department=dept_filter.split(',')).values_list('cu_user',flat=True)
            
        pmsAttandanceLeaveBalanceTransferLog = PmsAttandanceLeaveBalanceTransferLog.objects.filter(**filter)

        #print('pmsAttandanceLeaveBalanceTransferLog',pmsAttandanceLeaveBalanceTransferLog)
        #print('fortnightLeaveDeductionLogdetails',pmsAttandanceLeaveBalanceTransferLog.query)

        for  each in pmsAttandanceLeaveBalanceTransferLog:
            data_str = each.attendance_date.strftime("%d.%m.%Y")
            data_list = []
            employee_obj = TCoreUserDetail.objects.get(cu_user=each.employee)
            company_code = employee_obj.company
            name = employee_obj.cu_user.get_full_name()
            dept = employee_obj.department
            dept = dept.cd_name
            is_exit = 'Yes' if  employee_obj.termination_date else ''
            termination_date = employee_obj.termination_date

            if each.deviation_type == 'HD':
                if each.leave_type == 'AL':
                    subtype = sap_code_for_leave.only('code').get(name='All Leave(Half)').code
                if each.leave_type == 'AB':
                    subtype = sap_code_for_leave.only('code').get(name='Absent(Half)').code
                if each.leave_type == 'CL':
                    subtype = sap_code_for_leave.only('code').get(name='Casual Leave(Half)').code
                if each.leave_type == 'EL':
                    subtype = sap_code_for_leave.only('code').get(name='Earn Leave(Half)').code
                if each.leave_type == 'SL':
                    subtype = sap_code_for_leave.only('code').get(name='Sick Leave(Half)').code
                
            if each.deviation_type == 'FD':
                if each.leave_type == 'AL':
                    subtype = sap_code_for_leave.only('code').get(name='All Leave').code
                if each.leave_type == 'AB':
                    subtype = sap_code_for_leave.only('code').get(name='Absent').code
                if each.leave_type == 'CL':
                    subtype = sap_code_for_leave.only('code').get(name='Casual Leave').code
                if each.leave_type == 'EL':
                    subtype = sap_code_for_leave.only('code').get(name='Earn Leave').code
                if each.leave_type == 'SL':
                    subtype = sap_code_for_leave.only('code').get(name='Sick Leave').code

            data_list = [name,dept,each.sap_personnel_no, subtype, data_str, data_str,is_exit,termination_date]
            total_list.append(data_list)
            self.insert_AttendanceSapReport(
                each.employee.cu_user.company.coc_code if each.employee.cu_user.company else None,
                each.sap_personnel_no,
                subtype,
                each.attendance_date,
                each.attendance_date
                )

        return total_list

    def get_fortnight_leave_deduction_count(self):
        sap_code_for_leave = self.get_SapCode()
        subtype,sap_no = None,None
        total_list = list()
        dept_filter = self.request.query_params.get('dept_filter', None)
        year = self.request.query_params.get('year', None)
        month = self.request.query_params.get('month', None)
        filter = {
        'is_deleted':False
        }
        if month and year:
            date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
            filter['attendance_date__gte'] = date_range[0]['month_start__date']
            filter['attendance_date__lte'] = date_range[0]['month_end__date']

        if dept_filter:
            filter['employee__in'] = TCoreUserDetail.objects.filter(department=dept_filter.split(',')).values_list('cu_user',flat=True)

        fortnightLeaveDeductionLogdetails = PmsAttandanceFortnightLeaveDeductionLog.objects.filter(**filter)
        
        #print('fortnightLeaveDeductionLogdetails',fortnightLeaveDeductionLogdetails)
        #print('fortnightLeaveDeductionLogdetails',fortnightLeaveDeductionLogdetails.query)
        
        for  e_fortnightLeaveDeductionLogdetails in fortnightLeaveDeductionLogdetails:
            data_str = e_fortnightLeaveDeductionLogdetails.attendance_date.strftime("%d.%m.%Y")
            data_list = []
            employee_obj = TCoreUserDetail.objects.get(cu_user=e_fortnightLeaveDeductionLogdetails.employee)
            company_code = employee_obj.company
            name = employee_obj.cu_user.get_full_name()
            dept = employee_obj.department
            dept = dept.cd_name
            is_exit = 'Yes' if  employee_obj.termination_date else ''
            termination_date = employee_obj.termination_date

            if e_fortnightLeaveDeductionLogdetails.deviation_type == 'HD':
                
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'AL':
                    subtype = sap_code_for_leave.only('code').get(name='All Leave(Half)').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'AB':
                    subtype = sap_code_for_leave.only('code').get(name='Absent(Half)').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'CL':
                    subtype = sap_code_for_leave.only('code').get(name='Casual Leave(Half)').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'EL':
                    subtype = sap_code_for_leave.only('code').get(name='Earn Leave(Half)').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'SL':
                    subtype = sap_code_for_leave.only('code').get(name='Sick Leave(Half)').code
                
            if e_fortnightLeaveDeductionLogdetails.deviation_type == 'FD':
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'AL':
                    subtype = sap_code_for_leave.only('code').get(name='All Leave').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'AB':
                    subtype = sap_code_for_leave.only('code').get(name='Absent').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'CL':
                    subtype = sap_code_for_leave.only('code').get(name='Casual Leave').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'EL':
                    subtype = sap_code_for_leave.only('code').get(name='Earn Leave').code
                if e_fortnightLeaveDeductionLogdetails.leave_type == 'SL':
                    subtype = sap_code_for_leave.only('code').get(name='Sick Leave').code

            data_list = [name,dept,e_fortnightLeaveDeductionLogdetails.sap_personnel_no, subtype, data_str, data_str,is_exit,termination_date]
            total_list.append(data_list)
            self.insert_AttendanceSapReport(
                e_fortnightLeaveDeductionLogdetails.employee.cu_user.company.coc_code if e_fortnightLeaveDeductionLogdetails.employee.cu_user.company else None,
                e_fortnightLeaveDeductionLogdetails.sap_personnel_no,
                subtype,
                e_fortnightLeaveDeductionLogdetails.attendance_date,
                e_fortnightLeaveDeductionLogdetails.attendance_date
                )
            
        return total_list

    def insert_AttendanceSapReport(self,company_code,sap_no,sub_type,begin_date,end_date):
        return AttendanceSapReport.objects.create(
            company_code = company_code,
            sap_no = sap_no,
            sub_type = sub_type,
            begin_date = begin_date,
            end_date = end_date,
            is_read = False
            )

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        
        total_list = []
        cur_date =self.request.query_params.get('cur_date', None)
        dept_filter =self.request.query_params.get('dept_filter', None)
        is_sap =self.request.query_params.get('is_sap', None)
        year = self.request.query_params.get('year', None)
        month = self.request.query_params.get('month', None)
        emp_list = []
        attendance_type=self.request.query_params.get('attendance_type', None)
        total_user_list = []
        module_user_list = []
        req_filter = {}
        date_range = []
        header = []

        if cur_date:
            date = datetime.strptime(cur_date, "%Y-%m-%d")
            date_range_first = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
            date = date_range_first[0]['month_start__date'] - timedelta(days=1)
            date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')

        elif year and month:
            date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')

        if date_range:
            #print("date_range",date_range)
            req_filter['duration_start__date__gte']=date_range[0]['month_start__date']
            req_filter['duration_start__date__lte']=date_range[0]['month_end__date']
            req_filter['is_requested'] = True
            #req_filter['is_deleted'] = False

            exclude_sap_id = ['10300331','10300044','10300051','10300047','10300192','10300291','10300050','10300052','10300054','10300048',
            '10300302','10300355','10300227','10300328','10300015','10200754','10300383','10300376','10300387']

            module_user_list = TCoreUserDetail.objects.filter(
                    ~Q(user_type__in=('Director','3rd Party')),
                    ~Q(cu_punch_id='#N/A'),
                    attendance_type='HRMS',
                    ).values_list('cu_user',flat=True).exclude(sap_personnel_no__in = exclude_sap_id)

            if dept_filter:
                dept_list = dept_filter.split(',')
                emp_list = list(TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True))
                print("emp_list",emp_list)
                # req_filter['attendance__employee__in']=emp_list
                total_user_list = [val for val in module_user_list if val in emp_list]
                req_filter['attendance__employee__in']=total_user_list
            else:
                req_filter['attendance__employee__in']=module_user_list
            
        if req_filter:
            request_details = AttendanceApprovalRequest.objects.filter(
                ((Q(leave_type_changed_period__isnull=False)&
                (Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                **req_filter)

            #print("request_details",request_details.query)
            #time.sleep(15)
            lv_emp_list = set(request_details.filter().values_list('attendance__employee',flat=True))
            if lv_emp_list:
                sap_code_for_leave = self.get_SapCode()
                # print("lv_emp_list",lv_emp_list)
                for employee_id in lv_emp_list:
                    sap_no = None
                    employee_obj = TCoreUserDetail.objects.get(cu_user=employee_id)
                    sap_no = employee_obj.sap_personnel_no
                    company_code = employee_obj.company
                    name = employee_obj.cu_user.get_full_name()
                    dept = employee_obj.department
                    dept = dept.cd_name
                    is_exit = '' if  User.objects.get(pk=employee_id).is_active else 'Yes'
                    termination_date = TCoreUserDetail.objects.only('termination_date').get(cu_user=employee_id).termination_date
                    # user_details = TCoreUserDetail.objects.filter(cu_user=employee_id).values('cu_user__first_name','cu_user__last_name','sap_personnel_no',
                    #                                                                             'cu_emp_code','cu_punch_id')
                    # print("sap_no",sap_no)
                    if sap_no and sap_no!='#N/A':
                        
                        date_list = set(request_details.filter(attendance__employee=employee_id).values_list('duration_start__date',flat=True))
                        availed_master_wo_reject_fd = request_details.\
                        filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                                (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                                attendance__employee=employee_id,
                                attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                                    leave_type_final = Case(
                                    When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                                    When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                                    output_field=CharField()
                                ),
                                leave_type_final_hd = Case(
                                    When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                                    When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                                    output_field=CharField()
                                ),
                                ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
                        # print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)

                        if availed_master_wo_reject_fd:
                            for data in date_list:
                                data_str = data.strftime("%d.%m.%Y")
                                # print("data_str",data_str, type(data_str))
                                subtype = None
                                data_list = []
                                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                                
                                #print("availed_HD",availed_FD)
                                if availed_FD.filter(leave_type_final__isnull=False):
                                    if availed_FD.values('leave_type_final').count() >1:
                                        if availed_FD.filter(leave_type_final='AL'):
                                            subtype = sap_code_for_leave.only('code').get(name='All Leave').code
                                        elif availed_FD.filter(leave_type_final='AB'):
                                            subtype = sap_code_for_leave.only('code').get(name='Absent').code
                                        elif availed_FD.filter(leave_type_final='CL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Casual Leave').code
                                        elif availed_FD.filter(leave_type_final='EL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Earn Leave').code
                                        elif availed_FD.filter(leave_type_final='SL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Sick Leave').code

                                    else:
                                        l_type=availed_FD[0]['leave_type_final']
                                        if l_type == 'AB':
                                            subtype = sap_code_for_leave.only('code').get(name='Absent').code
                                        elif l_type == 'AL':
                                            subtype = sap_code_for_leave.only('code').get(name='All Leave').code
                                        elif l_type == 'CL':
                                            subtype = sap_code_for_leave.only('code').get(name='Casual Leave').code
                                        elif l_type == 'EL':
                                            subtype = sap_code_for_leave.only('code').get(name='Earn Leave').code
                                        elif l_type == 'SL':
                                            subtype = sap_code_for_leave.only('code').get(name='Sick Leave').code

                                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                                    if availed_FD.values('leave_type_final_hd').count() >1:
                                        if availed_FD.filter(leave_type_final_hd='AL'):
                                            subtype = sap_code_for_leave.only('code').get(name='All Leave(Half)').code
                                        elif availed_FD.filter(leave_type_final_hd='AB'):
                                            subtype = sap_code_for_leave.only('code').get(name='Absent(Half)').code
                                        elif availed_FD.filter(leave_type_final_hd='CL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Casual Leave(Half)').code
                                        elif availed_FD.filter(leave_type_final_hd='EL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Earn Leave(Half)').code
                                        elif availed_FD.filter(leave_type_final_hd='SL'):
                                            subtype = sap_code_for_leave.only('code').get(name='Sick Leave(Half)').code
                                                    

                                    else:
                                        l_type=availed_FD[0]['leave_type_final_hd']
                                        if l_type == 'AL':
                                            # availed_hd_ab=availed_hd_ab+1.0
                                            subtype = sap_code_for_leave.only('code').get(name='All Leave(Half)').code
                                            
                                        elif l_type == 'AB':
                                            # availed_hd_ab=availed_hd_ab+1.0
                                            subtype = sap_code_for_leave.only('code').get(name='Absent(Half)').code
                                        elif l_type == 'CL':
                                            # availed_hd_cl=availed_hd_cl+0.5
                                           subtype = sap_code_for_leave.only('code').get(name='Casual Leave(Half)').code

                                        elif l_type == 'EL':
                                            # availed_hd_el=availed_hd_el+0.5
                                            subtype = sap_code_for_leave.only('code').get(name='Earn Leave(Half)').code
                                        elif l_type == 'SL':
                                            # availed_hd_sl=availed_hd_sl+0.5
                                            subtype = sap_code_for_leave.only('code').get(name='Sick Leave(Half)').code

                                if subtype:
                                    data_list = [name,dept,sap_no, subtype, data_str, data_str,is_exit,termination_date]
                                    # header = ['PERSONNEL NUMBER(SAP ID)',' SUBTYPE',' BEGIN DATE',' ENDDATE']
                                    total_list.append(data_list)

                                    ## Insert ioto sap report table | Rupam Hazra
                                    self.insert_AttendanceSapReport(company_code.coc_code,sap_no,subtype,data,data)
                                    ## Insert ioto sap report table | Rupam Hazra

        total_list = total_list + self.get_pmsAttandanceLeaveBalanceTransferLog() + self.get_fortnight_leave_deduction_count()
        my_logger.info('get_pmsAttandanceLeaveBalanceTransferLog')
        my_logger.info(self.get_pmsAttandanceLeaveBalanceTransferLog())
        my_logger.info('get_fortnight_leave_deduction_count')
        my_logger.info(self.get_fortnight_leave_deduction_count())
        # print('total_list--->',total_list)
        if os.path.isdir('media/attendance/sap_report/document'):
            file_name = 'media/attendance/sap_report/document/sap_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/sap_report/document')
            file_name = 'media/attendance/sap_report/document/sap_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        
        #########################################################
        df = DataFrame(total_list, columns= ['NAME','DEPT','PERSONNEL NUMBER(SAP ID)',' SUBTYPE',' BEGIN DATE',' ENDDATE','IS EXIT','TERMINATION DATE'])
        export_csv = df.to_csv (file_path, index = None, header=True)

        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        print('url',url)

        return Response(url)

class AttandanceAvailedGraceReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    # serializer_class = AttandanceAdminOdMsiReportSerializer

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        
        department = self.request.query_params.get('department', None)
        designation = self.request.query_params.get('designation', None)

        total_list = []
        date_range = []
        header = []
        count = 0
        
        date = datetime.now().date()
        date_range_first = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
        date = date_range_first[0]['month_start__date'] - timedelta(days=1)
        date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values(
                                                        'month_start__date','month_end__date','year_start_date__date')


        if date_range:
            print("date_range",date_range)
            month_start = date_range[0]['month_start__date']
            month_end = date_range[0]['month_end__date']
            year_start = date_range[0]['year_start_date__date']



        # user_list = TCoreUserDetail.objects.filter(~Q(Q(sap_personnel_no__isnull=True)|Q(sap_personnel_no='#N/A')),
        #                                             joining_date__isnull=False,cu_is_deleted=False
        #                                         ).values('cu_user','department__cd_name','sap_personnel_no','joining_date__date')
        
        if department and designation:
            user_list = TCoreUserDetail.objects.filter(~Q(
                    (   
                        Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(sap_personnel_no__isnull=True)|Q(sap_personnel_no='#N/A'))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=date.year)&Q(termination_date__month=date.month)
                            )|
                            Q(termination_date__date__gte=date)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                (Q(joining_date__date__lte=date)),designation_id=designation,department_id=department
                    ).values('cu_user','department__cd_name','sap_personnel_no','joining_date__date','designation__cod_name')

        
        elif department:
            print('department.......')
            user_list = TCoreUserDetail.objects.filter(~Q(
                        (   
                            Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                            Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                        )|
                        (Q(cu_punch_id='#N/A'))|
                        (Q(sap_personnel_no__isnull=True)|Q(sap_personnel_no='#N/A'))
                    ),
                    (
                        Q(
                            Q(termination_date__isnull=False)&Q(
                                Q(
                                    Q(termination_date__year=date.year)&Q(termination_date__month=date.month)
                                )|
                                Q(termination_date__date__gte=date)
                            )
                        )|
                        Q(Q(termination_date__isnull=True))
                    ),
                    (Q(joining_date__date__lte=date)),department_id=department
                        ).values('cu_user','department__cd_name','sap_personnel_no','joining_date__date','designation__cod_name')

        elif designation:
            print('designation.......')
            user_list = TCoreUserDetail.objects.filter(~Q(
                    (   
                        Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(sap_personnel_no__isnull=True)|Q(sap_personnel_no='#N/A'))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=date.year)&Q(termination_date__month=date.month)
                            )|
                            Q(termination_date__date__gte=date)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                (Q(joining_date__date__lte=date)),designation_id=designation
                    ).values('cu_user','department__cd_name','sap_personnel_no','joining_date__date','designation__cod_name')
        
        else:
            print('designation.......')
            user_list = TCoreUserDetail.objects.filter(~Q(
                        (   
                            Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                            Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                        )|
                        (Q(cu_punch_id='#N/A'))|
                        (Q(sap_personnel_no__isnull=True)|Q(sap_personnel_no='#N/A'))
                    ),
                    (
                        Q(
                            Q(termination_date__isnull=False)&Q(
                                Q(
                                    Q(termination_date__year=date.year)&Q(termination_date__month=date.month)
                                )|
                                Q(termination_date__date__gte=date)
                            )
                        )|
                        Q(Q(termination_date__isnull=True))
                    ),
                    (Q(joining_date__date__lte=date))
                        ).values('cu_user','department__cd_name','sap_personnel_no','joining_date__date','designation__cod_name')

        


        print("user_list_count ", len(user_list))
        for user in user_list:
            if user['sap_personnel_no'] and user['sap_personnel_no']!='#N/A':
                count += 1
                data_list = []
                employee_id = user['cu_user']
                emp_name = userdetails(int(user['cu_user']))
                #print("emp_name", emp_name , user['joining_date__date'])
                sap_id = str(user['sap_personnel_no'])
                dept = user['department__cd_name']
                desig = user['designation__cod_name']
                if user['joining_date__date']>year_start:
                    join = AttendenceMonthMaster.objects.filter(month_start__date__lte=user['joining_date__date'],
                                                                month_end__date__gte=user['joining_date__date']).values(
                                                                'month_start__date','month_end__date','year_start_date__date')
                    if join:
                        joining_date = join[0]['month_start__date']
                    else:
                        joining_date = user['joining_date__date']
                else:
                    joining_date = year_start

                # print("joining_date",joining_date)
                # print("date_range[0]['month_start__date']",date_range[0]['month_start__date'])
                # print("year_start", year_start, "month_end",month_end)
                last_month_gr = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                                    Q(duration_start__date__gte=month_start)&
                                                                    Q(duration_start__date__lte=month_end)&
                                                                    Q(is_requested=True) & Q(is_deleted=False) &
                                                                    (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                    ).aggregate(Sum('duration'))['duration__sum']
                last_month_grace = 0 if last_month_gr is None else last_month_gr
                # print("last_month_gr",last_month_gr, last_month_grace)

                yearly_gr = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=employee_id) &
                                                                    Q(duration_start__date__gte=joining_date)&
                                                                    Q(duration_start__date__lte=month_end)&
                                                                    Q(is_requested=True) & Q(is_deleted=False) &
                                                                    (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                    ).aggregate(Sum('duration'))['duration__sum']
                yearly_grace = 0 if yearly_gr is None else yearly_gr
                # print("yearly_gr",yearly_gr, yearly_grace)
                mon_count = AttendenceMonthMaster.objects.filter(month_start__date__gte=joining_date,month_end__date__lte=month_end).count()
                month_count =mon_count if mon_count != 0 else 1
                avg_grace = yearly_grace//month_count
                # print("month_count",month_count, avg_grace)

                data_list = [count,sap_id,emp_name,user['joining_date__date'], dept, desig,last_month_grace, avg_grace]
                total_list.append(data_list)
        # print("month_end",month_end.strftime("%B"))
        month_name = "Total Grace availed("+month_end.strftime("%B")+")"
        avg_mon_name = "Avaerage grace(from April to "+month_end.strftime("%B")+")"
        # print('total_list--->',total_list)
        if os.path.isdir('media/attendance/grace_report/document'):
            file_name = 'media/attendance/grace_report/document/grace_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/grace_report/document')
            file_name = 'media/attendance/grace_report/document/grace_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        
        #########################################################
        df = DataFrame(total_list, columns= ['Sl. No.','SAP ID ','Emp. Name','DoJ','Dept.','Desig.',month_name,avg_mon_name])
        export_csv = df.to_csv (file_path, index = None, header=True)

        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        print('url',url)

        return Response(url)

class AttandanceUserLeaveReportTillDateView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    # @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        '''
            If "is_sap = 1" then API returns excel with SAP id otherwise return with Epm_name,code,punch id.
        '''
        total_list = []
        start_date = self.request.query_params.get('start_date', None)
        end_date = self.request.query_params.get('end_date', None)
        total_user_list = []
        req_filter = {}
        header = []

        if start_date and end_date:
            # print("kjgjkk",datetime.strptime(start_date, "%Y-%m-%d").date())
            req_filter['attendance__date__gte'] = datetime.strptime(start_date, "%Y-%m-%d").date()
            req_filter['attendance__date__lte'] = datetime.strptime(end_date, "%Y-%m-%d").date()

        # user_details = TCoreUserDetail.objects.filter(
        #     cu_user_id__in=list(
        #         Attendance.objects.filter(is_deleted=False).values_list('employee_id',flat=True))
        #         ).values('cu_user_id','cu_punch_id','cu_emp_code','sap_personnel_no','joining_date','granted_cl','granted_sl','granted_el')
        
        '''
            Modified By Rupam Hazra 18.02.2020
        '''
        user_details = TCoreUserDetail.objects.filter(
            cu_user_id__in=(TCoreUserDetail.objects.filter(~Q(cu_punch_id='#N/A')).values_list('cu_user_id',flat=True)),cu_is_deleted=False).values('cu_user_id','cu_punch_id','cu_emp_code','sap_personnel_no',
                'joining_date','granted_cl','granted_sl','granted_el','is_confirm','salary_type__st_name')
        
        
        print("user_details",user_details)
        time.sleep(10)
        for user in user_details:
            data_list = []
            # print("user['cu_user_id']",user['cu_user_id'])
            req_filter['attendance__employee'] = user['cu_user_id']
            req_filter['is_requested']=True
            user_name = userdetails(int(user['cu_user_id']))
            sap_personnel_no = str(user['sap_personnel_no']) if user['sap_personnel_no'] else ''
            punch_id = str(user['cu_punch_id']) if user['cu_punch_id'] else ''
            emp_code = str(user['cu_emp_code']) if user['cu_emp_code'] else ''
            granted_cl = user['granted_cl']
            if user['is_confirm'] == False:
                if user['salary_type__st_name'] == '13':
                    granted_el = 0.0
                else:
                    granted_el = user['granted_el']
            else:
                granted_el = user['granted_el']
            granted_sl = user['granted_sl']
            print("user['joining_date']",user['joining_date'])
            if user['joining_date'].date()>datetime.strptime(start_date, "%Y-%m-%d").date():
                approved_leave=JoiningApprovedLeave.objects.filter(employee=user['cu_user_id'],is_deleted=False).values('cl', 'el', 'sl')
                if approved_leave:
                    granted_cl = approved_leave[0]['cl']
                    if user['is_confirm'] == False:
                        if user['salary_type__st_name'] == '13':
                            granted_el = 0.0
                        else:
                            granted_el = approved_leave[0]['el']
                    else:
                        granted_el = approved_leave[0]['el']
                    granted_sl = approved_leave[0]['sl']
            availed_hd_cl=0.0
            availed_hd_el=0.0
            availed_hd_sl=0.0
            availed_hd_ab=0.0
            availed_cl=0.0
            availed_el=0.0
            availed_sl=0.0
            availed_ab=0.0

            print("end_date",req_filter)
            daily_data = AttendanceApprovalRequest.objects.filter(((Q(leave_type_changed_period__isnull=False)&
                                                                    (Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                                                    (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                                                    **req_filter).values('duration_start__date').distinct()
                                                
            # print("yearly_attendence_daily_data",daily_data)
            yearly_date_list = [x['duration_start__date'] for x in daily_data.iterator()]
            # print("yearly_date_list",yearly_date_list)
            # for data in attendence_daily_data.iterator():
                # print(datetime.now())
            availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
                    filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                            (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                            attendance__employee=user['cu_user_id'],
                            attendance_date__in=yearly_date_list,is_requested=True,is_deleted=False).annotate(
                                leave_type_final = Case(
                                When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                                When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                                output_field=CharField()
                            ),
                            leave_type_final_hd = Case(
                                When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                                When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                                output_field=CharField()
                            ),
                            ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
            # print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
            if availed_master_wo_reject_fd:

                for data in yearly_date_list:
                    availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                    
                    if availed_FD.filter(leave_type_final__isnull=False):
                        if availed_FD.values('leave_type_final').count() >1:
                            if availed_FD.filter(leave_type_final='AB'):
                                availed_ab=availed_ab+1.0

                            elif availed_FD.filter(leave_type_final='CL'):
                                availed_cl=availed_cl+1.0
                                        
                        else:
                            l_type=availed_FD[0]['leave_type_final']
                            if l_type == 'CL':
                                availed_cl=availed_cl+1.0
                            elif l_type == 'EL':
                                availed_el=availed_el+1.0
                            elif l_type == 'SL':
                                availed_sl=availed_sl+1.0
                            elif l_type == 'AB':
                                availed_ab=availed_ab+1.0

                    elif availed_FD.filter(leave_type_final_hd__isnull=False):
                        if availed_FD.values('leave_type_final_hd').count() >1:
                            if availed_FD.filter(leave_type_final_hd='AB'):
                                availed_hd_ab=availed_hd_ab+1.0

                            elif availed_FD.filter(leave_type_final_hd='CL'):
                                availed_hd_cl=availed_hd_cl+1.0
                                        
                        else:
                            l_type=availed_FD[0]['leave_type_final_hd']
                            if l_type == 'CL':
                                availed_hd_cl=availed_hd_cl+1.0
                            elif l_type == 'EL':
                                availed_hd_el=availed_hd_el+1.0
                            elif l_type == 'SL':
                                availed_hd_sl=availed_hd_sl+1.0
                            elif l_type == 'AB':
                                availed_hd_ab=availed_hd_ab+1.0

            yearly_availed_cl = float(availed_cl)+float(availed_hd_cl/2)
            yearly_availed_el = float(availed_el)+float(availed_hd_el/2)
            yearly_availed_sl = float(availed_sl)+float(availed_hd_sl/2)
            # yearly_availed_ab = float(availed_ab)+float(availed_hd_ab/2)

            granted_cl_1 = granted_cl if granted_cl else '0.00'
            yearly_availed_cl_1 = yearly_availed_cl if yearly_availed_cl else '0.00'
            granted_el_1 = granted_el if granted_el else '0.00'
            yearly_availed_el_1 = yearly_availed_el if yearly_availed_el else '0.00'
            granted_sl_1 = granted_sl if granted_sl else '0.00'
            yearly_availed_sl_1 = yearly_availed_sl if yearly_availed_sl else '0.00'

            yearly_balanced_cl = float(granted_cl_1) - float(yearly_availed_cl_1)
            yearly_balanced_el = float(granted_el_1) - float(yearly_availed_el_1)
            yearly_balanced_sl = float(granted_sl_1) - float(yearly_availed_sl_1)
            
            data_list = [user_name,"'"+punch_id,"'"+sap_personnel_no,"'"+emp_code,granted_cl,yearly_availed_cl,yearly_balanced_cl,granted_el,yearly_availed_el,yearly_balanced_el,granted_sl,yearly_availed_sl,yearly_balanced_sl]
            # header = ['PERSONNEL NUMBER(SAP ID)',' SUBTYPE',' BEGIN DATE',' ENDDATE']
            total_list.append(data_list)


        # print('total_list--->',total_list)
        if os.path.isdir('media/attendance/leave_report/document'):
            file_name = 'media/attendance/leave_report/document/leave_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/leave_report/document')
            file_name = 'media/attendance/leave_report/document/leave_report.csv'
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        
        #########################################################
        df = DataFrame(total_list, columns= [' Employee Name ',' Punch Id ',' SAP No ',' Emp Code ',' Granted CL',' Availed CL ',' Balanced CL ',' Granted EL',' Availed EL',' Balanced EL ',' Granted SL',' Availed SL','Balanced SL'])
        export_csv = df.to_csv (file_path, index = None, header=True)

        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        print('url',url)

        return Response(url)

class AttendanceFileUploadCheck(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadCheckSerializer
    #parser_classes = (MultiPartParser,)
    
    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        date_input = request.data['date_input']
        
        from django.db import connection
        print('connection',connection)
        with connection.cursor() as cursor:
            print('cursor',cursor)
            #cursor.execute("SELECT eid AS Empid,event_date AS Date,event_time AS Time,terminal_id AS CID FROM attendence_table where eid='00001063' and event_date like '2019-05-%'")
            cursor.execute('SELECT eid AS Empid,event_date AS Date,event_time AS Time,terminal_id AS CID FROM attendence_table where event_date LIKE %s',[date_input])
            rows = cursor.fetchall()
        print("rows",rows)
        print("rows",len(rows))






        ### IF Demo_user or Super_user >> Avoid attendance ###
        avoid_att = TMasterModuleRoleUser.objects.filter((Q(mmr_type=1)|Q(mmr_type=6))&Q(mmr_is_deleted=False)).values_list('mmr_user')
        print("avoid_att",avoid_att)

        user_details = TCoreUserDetail.objects.filter(~Q(cu_user__in=avoid_att),~Q(cu_punch_id='PMSSITE000'),cu_is_deleted=False).values() ##avoid 'PMSSITE000' punch ids
        #print('user_details',user_details)
        user_count = len(user_details) if user_details else 0
        holiday_list = HolidaysList.objects.filter(status=True).values('holiday_date','holiday_name')
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        
        
        
        
        

        day = request.data['date_input']
        # day = rows[0]
        # day = day[1]
        print('day',day)


        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%Y-%m-%dT%H:%M:%S")
            print("today_datetime",today_datetime.date())
            date_time_day = today_datetime.date()
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
        #print("special_full_day",special_full_day)
        #print("special_day",special_day)

        for user in user_details:
            print('user',user)
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            pre_att = None

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            #cu_punch_id = int(user['cu_punch_id']) if user['cu_punch_id'] else None
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            print('cu_punch_id',cu_punch_id)
            cu_user_id = int(user['cu_user_id'])

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'
            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id']=cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                # print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    # print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            # print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            rows = list(rows)
            for index, row in enumerate(rows):
                #print('index',index)
                #print('row under',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])


                #print('row[index][1]',row[1])
                #print('row[index][2]',row[2])
                date_time = str(row[1])+'T'+str(row[2])
                print('date_time',date_time)
                date_time_format = datetime.strptime(date_time, "%Y-%m-%dT%H:%M:%S")
                print('row[0]',row[0])
                if cu_punch_id == row[0]:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row[3]))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row[3]))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    print("pre_att_filter",pre_att_filter)


                    ##First time log in a Day##Successful
                    if pre_att is None:                      
                        if pre_att_filter:
                            print('pre_att')
                            pre_att = self.att_create(pre_att_filter)
                            bench_time = daily_login + timedelta(minutes=30)
                            # print('bench_time',bench_time)

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time']:
                                    bench_filter['attendance']=pre_att
                                    bench_filter['attendance_date'] = daily_login.date()
                                    bench_filter['duration_start']=daily_login
                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                        grace_over = True
                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                        bench_filter['checkin_benchmark']=True
                                        bench_filter['is_requested']=True
                                        # bench_filter['is_requested']=True
                                        # bench_filter['request_type']='GR'
                                    else:
                                        bench_filter['checkin_benchmark']=False

                                    if bench_filter['duration']>0:
                                        bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        print('logggggg')
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                            # print("if current_device in device_no_list:")
                            check_out = 1
                            pre_req_filter['attendance'] = pre_att
                            pre_req_filter['duration_start'] = date_time_format
                        elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                            check_out = 0
                            pre_req_filter = {}
                        elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                            check_out = 0
                            if date_time_format>daily_logout:
                                pre_req_filter['duration_end'] = daily_logout
                            else:
                                pre_req_filter['duration_end'] = date_time_format

                            if pre_req_filter['duration_start']<daily_login:
                                pre_req_filter['duration_start'] = daily_login
                            # else:
                            #     pre_req_filter['duration_end'] = date_time_format

                            if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                pre_req_filter['checkin_benchmark']=True
                                pre_req_filter['is_requested']=True


                            if lunch_end < pre_req_filter['duration_start']:
                                duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_end']:
                                duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                            elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                            elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                            # print("duration_count",duration_count, pre_req_filter)
                            if duration_count>0:
                                pre_req_filter['duration']=duration_count
                                pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                pre_req = self.request_create(pre_req_filter)
                                #print("pre_req",pre_req)


            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                ### IF Late convence ### Successful Testing
                if daily_logoutTime < logout_time.time():
                    late_con_filter['attendance']=pre_att
                    late_con_filter['attendance_date']=daily_logout.date()
                    late_con_filter['duration_start']=daily_logout
                    late_con_filter['duration_end']=logout_time
                    late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                    late_con_filter['is_late_conveyance']=True
                    if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes. 
                        # print("late_con_filter",late_con_filter)
                        late_req = self.request_create(late_con_filter)
                        # print("late_req",late_req)
                
                ###If Logout less then User's Daily log out### Successful Testing
                elif daily_logoutTime > logout_time.time():
                    late_con_filter['attendance']=pre_att
                    late_con_filter['attendance_date']=daily_logout.date()
                    late_con_filter['duration_start']=logout_time
                    late_con_filter['duration_end']=daily_logout
                    late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                    late_con_filter['is_late_conveyance']=False
                    # late_con_filter['request_type']='GR'
                    if late_con_filter['duration']>0:
                        # print("late_con_filter",late_con_filter)
                        late_req = self.request_create(late_con_filter)
                        # print("late_req",late_req)

        ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                '''
                Modified By :: Rajesh Samui
                Reason :: State Wise Holiday Calculation
                Line :: 6553-6567
                Date :: 10-02-2020
                '''
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
                default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
                t_core_state_id = state_obj.id if state_obj else default_state.id
                holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')



                if leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']=leave[0]['leave_type']
                    is_required = True
                elif holiday:
                    holiday_name = holiday[0]["holiday__holiday_name"]
                    att_filter['day_remarks']=holiday[0]["holiday__holiday_name"]
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    att_filter['day_remarks']=special_full_day[0]["remarks"]
                elif date_time_day.weekday()==6:
                    # print("Sunday")
                    att_filter['day_remarks']="Sunday"
                elif date_time_day.weekday()==5:
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                       'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            att_filter['day_remarks']='Saturday'

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                att_filter['day_remarks']='Saturday'
                            else:
                                #print("Not Present")
                                is_required = True
                                att_filter['day_remarks']="Not Present"
                                    
                    else:
                        is_required = True
                        att_filter['day_remarks']="Not Present"
                    # print("Saturday")

                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"
                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%Y-%m-%dT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date']=date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    #print("att_filter",abs_att)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                        if adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['approved_status'] = 'approved'
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            abs_req = self.request_create(req_filter)
                            # print("abs_req",abs_req, req_filter)


        return Response({'result':{'request_status':1,'msg':'Successful'}})


class AttendanceFileUploadCheckPunchOldData(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    # serializer_class = AttendanceFileUploadCheckSerializer
    #parser_classes = (MultiPartParser,)
    
    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        # response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        # date_input = request.data['date_input']
        day_start = request.data['day_start']
        day_end = request.data['day_end']
        punch_ids = request.data['punch_ids']
        date_list = []
        punch_list = []
        if day_start and day_end and punch_ids:
            punch_list = punch_ids.split(',')
            day_start = datetime.strptime(day_start, "%Y-%m-%d").date()
            day_end = datetime.strptime(day_end, "%Y-%m-%d").date()
            print("day_start", day_start, day_end)

            
            while day_end>=day_start:
                date_list.append(day_start)
                day_start+=timedelta(days=1)

            # print("date_list",date_list)
        
        if punch_list and date_list:
            device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
            if device_details:
                device_no_list = [x['id'] for x in device_details]
            print("device_no_list", device_no_list)

            from django.db import connection
            print('connection',connection)
            with connection.cursor() as cursor:
                print('cursor',cursor)

                for punch_id in punch_list:
                    for date_input in date_list:    
                        print('date_input--punch_id', date_input, punch_id)    
                        cursor.execute('SELECT eid AS Empid,event_date AS Date,event_time AS Time,terminal_id AS CID FROM attendence_table where event_date LIKE %s AND eid = %s',[date_input,punch_id])
                        rows = cursor.fetchall()
                        # print("rows",rows)
                        # print("rows",len(rows))
                        # return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})


                        ### IF Demo_user or Super_user >> Avoid attendance ###
                        # avoid_att = TMasterModuleRoleUser.objects.filter((Q(mmr_type=1)|Q(mmr_type=6))&Q(mmr_is_deleted=False)).values_list('mmr_user')
                        # print("avoid_att",avoid_att)

                        user_details = TCoreUserDetail.objects.filter(cu_punch_id=punch_id).values()
                        #print('user_details',user_details)
                        user_count = len(user_details) if user_details else 0
                        holiday_list = HolidaysList.objects.filter(status=True).values('holiday_date','holiday_name')            
                        
                        
                        day = date_input
                        # day = rows[0]
                        # day = day[1]
                        print('day',day)


                        # print("dayyy", day)
                        if day:
                            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%Y-%m-%dT%H:%M:%S")
                            print("today_datetime",today_datetime)
                            date_time_day = today_datetime.date()
                            late_convence_limit = today_datetime.replace(hour=20, minute=30)
                            # print("late_convence_limit",late_convence_limit)
                            # return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})
                        else:
                            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})
                        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
                        # print("total_month_grace",total_month_grace)

                        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
                            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

                        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
                        # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                        # print('holiday',holiday)
                        # print("special_full_day",special_full_day)
                        # print("special_day",special_day)
                        # ##########
                        # no_request = False
                        # day_remarks = ''
                        # if holiday:
                        #     # holiday_name = holiday[0]["holiday_name"]
                        #     day_remarks = holiday[0]["holiday_name"]
                        #     no_request = True
                        # elif special_full_day:
                        #     # special_full_day_name = special_full_day[0]["full_day__date"]
                        #     day_remarks = special_full_day[0]["remarks"]
                        #     no_request = True
                        # elif date_time_day.weekday()==6:
                        #     # print("Sunday")
                        #     day_remarks = "Sunday"
                        #     no_request = True

                        for user in user_details:
                            user_count = user_count-1
                            print("Wait...", user_count)
                            att_filter = {}
                            req_filter = {}
                            pre_att_filter = {}
                            pre_req_filter = {}
                            late_con_filter = {}
                            bench_filter = {}
                            saturday_off_list = None
                            pre_att = None
                            saturday_off = False

                            logout_time = None
                            check_out = 0
                            # adv_leave_type = None
                            user_flag = 0
                            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
                            cu_user_id = int(user['cu_user_id'])

                            #################
                            '''
                            Modified By :: Rajesh Samui
                            Reason :: State Wise Holiday Calculation
                            Description :: Commented out line 6739-6758
                            Line :: 6788-6807
                            Date :: 10-02-2020
                            '''
                            # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                            state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
                            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
                            t_core_state_id = state_obj.id if state_obj else default_state.id
                            holiday = HolidayStateMapping.objects.filter(
                                Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')

                            # print(state_obj)
                            # print(t_core_user_state_code)
                            # print(holiday)


                            print('holiday',holiday)
                            print("special_full_day",special_full_day)
                            print("special_day",special_day)
                            ##########
                            no_request = False
                            day_remarks = ''
                            if holiday:
                                # holiday_name = holiday[0]["holiday_name"]
                                day_remarks = holiday[0]["holiday__holiday_name"]
                                no_request = True
                            elif special_full_day:
                                # special_full_day_name = special_full_day[0]["full_day__date"]
                                day_remarks = special_full_day[0]["remarks"]
                                no_request = True
                            elif date_time_day.weekday()==6:
                                # print("Sunday")
                                day_remarks = "Sunday"
                                no_request = True

                            #################
                            if date_time_day.weekday()==5 and no_request is False:
                                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                                if saturday_off_list:
                                    if saturday_off_list[0]['all_s_day'] is True:
                                        # if user['is_saturday_off'] is True:
                                        day_remarks = 'Saturday'
                                        saturday_off = True

                                    else:
                                        week_date = date_time_day.day
                                        # print("week_date",  week_date)
                                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                            day_remarks='Saturday'
                                            saturday_off = True
                                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                            day_remarks='Saturday'
                                            saturday_off = True
                                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                            day_remarks='Saturday'
                                            saturday_off = True
                                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                            day_remarks='Saturday'
                                            saturday_off = True

                                    # print("Saturday")

                            #################

                            ###If user has no login/logout/lunch time >> Then fix their time##
                            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
                            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
                            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
                            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
                            
                            ## If Change Login-Logout time (Special Day) ##
                            if special_day:
                                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                                print("daily_logoutTime",daily_logoutTime)
                                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
                            elif today_datetime.weekday()==5:
                                daily_loginTime = user['daily_loginTime']
                                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                                pre_att_filter['day_remarks'] = 'Present'

                            else:
                                daily_loginTime = user['daily_loginTime']
                                daily_logoutTime = user['daily_logoutTime']
                                pre_att_filter['day_remarks'] = 'Present'
                            
                            ## LUNCH TIME ##
                            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

                            ## DAILY LOGIN-LOGOUT ##
                            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
                            daily_login = datetime.combine(today_datetime,daily_loginTime)
                            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

                            is_saturday_off = user['is_saturday_off'] 
                            att_filter['employee_id'] = cu_user_id
                            grace_over = False

                            joining_date = user['joining_date']
                            if total_month_grace:
                                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                                print("GRACE", grace_available)
                                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                                    print("grace_available AAAA", grace_available, cu_user_id)

                            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                            Q(is_requested=True) &
                                                                            Q(is_deleted=False)&
                                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                            ).aggregate(Sum('duration'))['duration__sum']
                            print('availed_grace',availed_grace)
                            availed_grace = availed_grace if availed_grace else 0

                            print("date_input",user['daily_loginTime'],date_input )
                            rows = list(rows) if len(rows)>0 else [['0000000',str(date_input),str(user['daily_loginTime'])]]

                            # for index, row in enumerate(rows):
                            for row in rows:
                                print('row[index][1]',row[1])
                                print('row[index][2]',row[2])
                                date_time = str(row[1])+'T'+str(row[2])
                                print('date_time',date_time)
                                date_time_format = datetime.strptime(date_time, "%Y-%m-%dT%H:%M:%S")
                                print('row[0]',row[0])
                                if cu_punch_id == row[0]:
                                    user_flag = 1
                                    ##################### Added By Rupam #######################
                                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row[3]))
                                    if deviceMasterDetails:
                                        current_device = DeviceMaster.objects.get(device_no=int(row[3]))
                                        # print("current_device",current_device)
                                    ##################### END ###################################
                                    pre_att_filter['employee_id'] = cu_user_id
                                    # pre_att_filter['day_remarks'] = 'Present'
                                    pre_att_filter['is_present'] = True
                                    pre_att_filter['date'] = date_time_format
                                    pre_att_filter['login_time'] = date_time_format
                                    # print("pre_att_filter",pre_att_filter)

                                    ##First time log in a Day##Successful
                                    if pre_att is None:                      
                                        if pre_att_filter:
                                            pre_att = self.att_create(pre_att_filter)
                                            bench_time = daily_login + timedelta(minutes=30)
                                            # print('bench_time',bench_time)
                                            # if saturday_off is False and no_request is False:

                                            ###Check login if After USER Daily login time = Duration### Successful
                                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                                    bench_filter['attendance']=pre_att
                                                    bench_filter['attendance_date'] = daily_login.date()
                                                    bench_filter['duration_start']=daily_login
                                                    bench_filter['duration_end']=pre_att_filter['login_time']
                                                    bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                                    bench_filter['punch_id'] = cu_punch_id
                                                    if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                                        grace_over = True
                                                    if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                                        bench_filter['checkin_benchmark']=True
                                                        bench_filter['is_requested']=True
                                                        # bench_filter['is_requested']=True
                                                        # bench_filter['request_type']='GR'
                                                    else:
                                                        bench_filter['checkin_benchmark']=False

                                                    if bench_filter['duration']>0:
                                                        bench_req = self.request_create(bench_filter)

                                    ##After Daily Attendance## Successful
                                    if pre_att:
                                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                                            attendance=pre_att,
                                            employee_id=cu_user_id,
                                            time=date_time_format,
                                            device_no=current_device
                                        )

                                        logout_time = date_time_format
                                        duration_count = 0
                                        if saturday_off is False and no_request is False:
                                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                                # print("if current_device in device_no_list:")
                                                check_out = 1
                                                pre_req_filter['attendance'] = pre_att
                                                pre_req_filter['punch_id'] = cu_punch_id
                                                pre_req_filter['duration_start'] = date_time_format
                                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                                check_out = 0
                                                pre_req_filter = {}
                                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                                check_out = 0
                                                if date_time_format>daily_logout:
                                                    pre_req_filter['duration_end'] = daily_logout
                                                else:
                                                    pre_req_filter['duration_end'] = date_time_format

                                                if pre_req_filter['duration_start']<daily_login:
                                                    pre_req_filter['duration_start'] = daily_login
                                                # else:
                                                #     pre_req_filter['duration_end'] = date_time_format

                                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                                #     pre_req_filter['checkin_benchmark']=True
                                                #     pre_req_filter['is_requested']=True


                                                if lunch_end < pre_req_filter['duration_start']:
                                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                                elif lunch_start > pre_req_filter['duration_end']:
                                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                                    duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                                    duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                                elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                                    duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                                # print("duration_count",duration_count, pre_req_filter)
                                                if duration_count>0:
                                                    pre_req_filter['duration']=duration_count
                                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                                    pre_req = self.request_create(pre_req_filter)
                                                    pre_req_filter = {}
                                                    #print("pre_req",pre_req)


                            if logout_time and pre_att:
                                # print('pre_att',pre_att.id)
                                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                                if saturday_off is False and no_request is False:
                                    ### IF Late convence ### Successful Testing
                                    if daily_logoutTime < logout_time.time():
                                        late_con_filter['attendance'] = pre_att
                                        late_con_filter['punch_id'] = cu_punch_id
                                        late_con_filter['attendance_date']=daily_logout.date()
                                        late_con_filter['duration_start']=daily_logout
                                        late_con_filter['duration_end']=logout_time
                                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                                        late_con_filter['is_late_conveyance']=True
                                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                                        '''
                                            As per requirement and discussion with Tonmay Da(10.12.2019):
                                            LATE CONVENCE always count after 08:30 PM 
                                        '''
                                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                                            and late_con_filter['duration']>0:
                                            # print("late_con_filter",late_con_filter)
                                            late_req = self.request_create(late_con_filter)
                                            # print("late_req",late_req)
                                    
                                    ###If Logout less then User's Daily log out### Successful Testing
                                    elif daily_logoutTime > logout_time.time():
                                        late_con_filter['attendance']=pre_att
                                        late_con_filter['punch_id'] = cu_punch_id
                                        late_con_filter['attendance_date']=daily_logout.date()
                                        late_con_filter['duration_start']=logout_time
                                        late_con_filter['duration_end']=daily_logout
                                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                                        late_con_filter['is_late_conveyance']=False
                                        # late_con_filter['request_type']='GR'
                                        if late_con_filter['duration']>0:
                                            # print("late_con_filter",late_con_filter)
                                            late_req = self.request_create(late_con_filter)
                                            # print("late_req",late_req)

                        ## IF User Absent ###
                            if user_flag==0:
                                # print("ABSENT")
                                is_required = False
                                # print("user",cu_user_id)
                                adv_leave_type = None
                                leave = EmployeeAdvanceLeaves.objects.filter(
                                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                                # print("leave",leave)
                                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                                if leave:
                                    adv_leave_type = leave[0]['leave_type']
                                    # print("leave_type",leave[0]['leave_type'])
                                    att_filter['day_remarks']=leave[0]['leave_type']
                                    is_required = True
                                elif saturday_off is True or no_request is True:
                                    att_filter['day_remarks'] = day_remarks
                                    print("att_filter",att_filter, saturday_off, no_request)
                                else:
                                    is_required = True
                                    att_filter['day_remarks']="Not Present"

                                if att_filter:
                                    date = date_time[0:10]+'T'+str(daily_loginTime)
                                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                                    #print("date_time_format",date_time_date)
                                    att_filter['date'] = date_time_date
                                    #print("att_filter",att_filter)

                                    abs_att = self.att_create(att_filter)
                                    print("att_filter",abs_att, is_required)
                                    if is_required is True:
                                        req_filter['attendance']= abs_att
                                        req_filter['attendance_date'] = daily_login.date()
                                        req_filter['duration_start'] = daily_login
                                        req_filter['duration_end'] = daily_logout
                                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                                        if adv_leave_type:
                                            req_filter['request_type']='FD'
                                            req_filter['leave_type'] = adv_leave_type
                                            req_filter['approved_status'] = 'approved'
                                            req_filter['is_requested'] = True
                                            req_filter['justification'] = leave[0]['reason']

                                        if req_filter:
                                            print("req_filter,",req_filter)
                                            req_filter['punch_id'] = cu_punch_id
                                            abs_req = self.request_create(req_filter)
                                            # abs_check = self.absent_checking(req_filter)
                                            # print("abs_req",abs_req, req_filter)



                            #         ##First time log in a Day##Successful
                            #         if pre_att is None:                      
                            #             if pre_att_filter:
                            #                 print('pre_att')
                            #                 pre_att = self.att_create(pre_att_filter)
                            #                 bench_time = daily_login + timedelta(minutes=30)
                            #                 # print('bench_time',bench_time)

                            #                 ###Check login if After USER Daily login time = Duration### Successful
                            #                 if daily_login<pre_att_filter['login_time']:
                            #                         bench_filter['attendance']=pre_att
                            #                         bench_filter['attendance_date'] = daily_login.date()
                            #                         bench_filter['duration_start']=daily_login
                            #                         bench_filter['duration_end']=pre_att_filter['login_time']
                            #                         bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                            #                         if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                            #                             grace_over = True
                            #                         if bench_time>pre_att_filter['login_time'] and grace_over is False:
                            #                             bench_filter['checkin_benchmark']=True
                            #                             bench_filter['is_requested']=True
                            #                             # bench_filter['is_requested']=True
                            #                             # bench_filter['request_type']='GR'
                            #                         else:
                            #                             bench_filter['checkin_benchmark']=False

                            #                         if bench_filter['duration']>0:
                            #                             bench_req = self.request_create(bench_filter)

                            #         ##After Daily Attendance## Successful
                            #         if pre_att:
                            #             print('logggggg')
                            #             att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            #                 attendance=pre_att,
                            #                 employee_id=cu_user_id,
                            #                 time=date_time_format,
                            #                 device_no=current_device
                            #             )

                            #             logout_time = date_time_format
                            #             duration_count = 0
                            #             if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                            #                 # print("if current_device in device_no_list:")
                            #                 check_out = 1
                            #                 pre_req_filter['attendance'] = pre_att
                            #                 pre_req_filter['duration_start'] = date_time_format
                            #             elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                            #                 check_out = 0
                            #                 pre_req_filter = {}
                            #             elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                            #                 check_out = 0
                            #                 if date_time_format>daily_logout:
                            #                     pre_req_filter['duration_end'] = daily_logout
                            #                 else:
                            #                     pre_req_filter['duration_end'] = date_time_format

                            #                 if pre_req_filter['duration_start']<daily_login:
                            #                     pre_req_filter['duration_start'] = daily_login
                            #                 # else:
                            #                 #     pre_req_filter['duration_end'] = date_time_format

                            #                 if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                            #                     pre_req_filter['checkin_benchmark']=True
                            #                     pre_req_filter['is_requested']=True


                            #                 if lunch_end < pre_req_filter['duration_start']:
                            #                     duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            #                 elif lunch_start > pre_req_filter['duration_end']:
                            #                     duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                            #                 elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                            #                     duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                            #                 elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                            #                     duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                            #                 elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                            #                     duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                            #                 # print("duration_count",duration_count, pre_req_filter)
                            #                 if duration_count>0:
                            #                     pre_req_filter['duration']=duration_count
                            #                     pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                            #                     pre_req = self.request_create(pre_req_filter)
                            #                     #print("pre_req",pre_req)


                            # if logout_time and pre_att:
                            #     # print('pre_att',pre_att.id)
                            #     pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                            #     ### IF Late convence ### Successful Testing
                            #     if daily_logoutTime < logout_time.time():
                            #         late_con_filter['attendance']=pre_att
                            #         late_con_filter['attendance_date']=daily_logout.date()
                            #         late_con_filter['duration_start']=daily_logout
                            #         late_con_filter['duration_end']=logout_time
                            #         late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                            #         late_con_filter['is_late_conveyance']=True
                            #         if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes. 
                            #             # print("late_con_filter",late_con_filter)
                            #             late_req = self.request_create(late_con_filter)
                            #             # print("late_req",late_req)
                                
                            #     ###If Logout less then User's Daily log out### Successful Testing
                            #     elif daily_logoutTime > logout_time.time():
                            #         late_con_filter['attendance']=pre_att
                            #         late_con_filter['attendance_date']=daily_logout.date()
                            #         late_con_filter['duration_start']=logout_time
                            #         late_con_filter['duration_end']=daily_logout
                            #         late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                            #         late_con_filter['is_late_conveyance']=False
                            #         # late_con_filter['request_type']='GR'
                            #         if late_con_filter['duration']>0:
                            #             # print("late_con_filter",late_con_filter)
                            #             late_req = self.request_create(late_con_filter)
                            #             # print("late_req",late_req)

                            # ## IF User Absent ###
                            # if user_flag==0:
                            #     # print("ABSENT")
                            #     is_required = False
                            #     # print("user",cu_user_id)
                            #     adv_leave_type = None
                            #     leave = EmployeeAdvanceLeaves.objects.filter(
                            #         Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                            #         (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                            #     # print("leave",leave)
                            #     holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                            #     if leave:
                            #         adv_leave_type = leave[0]['leave_type']
                            #         # print("leave_type",leave[0]['leave_type'])
                            #         att_filter['day_remarks']=leave[0]['leave_type']
                            #         is_required = True
                            #     elif holiday:
                            #         holiday_name = holiday[0]["holiday_name"]
                            #         att_filter['day_remarks']=holiday[0]["holiday_name"]
                            #     elif special_full_day:
                            #         # special_full_day_name = special_full_day[0]["full_day__date"]
                            #         att_filter['day_remarks']=special_full_day[0]["remarks"]
                            #     elif date_time_day.weekday()==6:
                            #         # print("Sunday")
                            #         att_filter['day_remarks']="Sunday"
                            #     elif date_time_day.weekday()==5:
                            #         saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                            #         'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                            #         if saturday_off_list:
                            #             if saturday_off_list[0]['all_s_day'] is True:
                            #                 # if user['is_saturday_off'] is True:
                            #                 att_filter['day_remarks']='Saturday'

                            #             else:
                            #                 week_date = date_time_day.day
                            #                 # print("week_date",  week_date)
                            #                 month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            #                 saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            #                 if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            #                     att_filter['day_remarks']='Saturday'
                            #                 elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            #                     att_filter['day_remarks']='Saturday'
                            #                 elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            #                     att_filter['day_remarks']='Saturday'
                            #                 elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            #                     att_filter['day_remarks']='Saturday'
                            #                 else:
                            #                     #print("Not Present")
                            #                     is_required = True
                            #                     att_filter['day_remarks']="Not Present"
                                                    
                            #         else:
                            #             is_required = True
                            #             att_filter['day_remarks']="Not Present"
                            #         # print("Saturday")

                            #     else:
                            #         is_required = True
                            #         att_filter['day_remarks']="Not Present"
                            #     if att_filter:
                            #         date = date_time[0:10]+'T'+str(daily_loginTime)
                            #         date_time_date =datetime.strptime(date, "%Y-%m-%dT%H:%M:%S")
                            #         #print("date_time_format",date_time_date)
                            #         att_filter['date']=date_time_date
                            #         #print("att_filter",att_filter)

                            #         abs_att = self.att_create(att_filter)
                            #         #print("att_filter",abs_att)
                            #         if is_required is True:
                            #             req_filter['attendance']= abs_att
                            #             req_filter['attendance_date'] = daily_login.date()
                            #             req_filter['duration_start'] = daily_login
                            #             req_filter['duration_end'] = daily_logout
                            #             req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                            #             if adv_leave_type:
                            #                 req_filter['request_type']='FD'
                            #                 req_filter['leave_type'] = adv_leave_type
                            #                 req_filter['approved_status'] = 'approved'
                            #                 req_filter['is_requested'] = True
                            #                 req_filter['justification'] = leave[0]['reason']

                            #             if req_filter:
                            #                 abs_req = self.request_create(req_filter)
                            #                 # print("abs_req",abs_req, req_filter)


            return Response({'result':{'request_status':1,'msg':'Successful'}})
        else:
            Response({'result':{'request_status':0,'msg':'punch_list or date range error'}})


#:::::::::::::::::: DOCUMENTS UPLOAD FOR USER  ::::::::::::::::::::::::#
class AttendanceUserAttendanceUploadByLogData(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    # queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance= Attendance.objects.create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request= AttendanceApprovalRequest.objects.create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        # response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("request", request.data['emp_list'])
        emp_list = request.data['emp_list'].split(',') # Enter user_id list in this list
        last_date = datetime.strptime(request.data['last_date'],"%Y-%m-%d")
        print("emp_list",emp_list, last_date)
        print("Please wait...")
        user_details = TCoreUserDetail.objects.filter(cu_user__in=emp_list,cu_is_deleted=False).values()
        print('user_details',len(user_details))
        user_count = len(user_details) if user_details else 0
        holiday_list = HolidaysList.objects.filter(status=True).values('holiday_date','holiday_name')
        device_no_list = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values_list('id',flat=True)
        # if device_details:
        #     device_no_list = [x['id'] for x in device_details]
        print("device_no_list", device_no_list)

        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_by_day = Attendance.objects.filter(employee=user['cu_user_id'],date__date__lte=last_date.date()).order_by('date').values()
            print("att_by_day", att_by_day)
        #     ######
            for per_day in att_by_day:
                with transaction.atomic():
                    print(user_count, "per_day", per_day['date'])
                    today_datetime = per_day['date']
                    date_time_day = today_datetime.date()
                    total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                    month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                'year_start_date', 'year_end_date', 'month', 
                                                                                'month_start', 'month_end','grace_available'
                                                                                )
                    # print("total_month_grace",total_month_grace)

                    # special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
                    #     day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

                    # special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
                    # print("special_full_day",special_full_day)
                    # print("special_day",special_day)
                    special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
                        day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

                    special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')
                    '''
                    Modified By :: Rajesh Samui
                    Reason :: State Wise Holiday Calculation
                    Line :: 7393-7411
                    Date :: 10-02-2020
                    '''
                    # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                    state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
                    default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
                    t_core_state_id = state_obj.id if state_obj else default_state.id
                    holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')

                    # print(state_obj)
                    # print(t_core_user_state_code)
                    # print(holiday)

                    print('holiday',holiday)
                    print("special_full_day",special_full_day)
                    print("special_day",special_day)
                    ##########
                    no_request = False
                    day_remarks = ''
                    if holiday:
                        # holiday_name = holiday[0]["holiday_name"]
                        day_remarks = holiday[0]["holiday__holiday_name"]
                        no_request = True
                    elif special_full_day:
                        # special_full_day_name = special_full_day[0]["full_day__date"]
                        day_remarks = special_full_day[0]["remarks"]
                        no_request = True
                    elif date_time_day.weekday()==6:
                        # print("Sunday")
                        day_remarks = "Sunday"
                        no_request = True

                    # AttendanceApprovalRequest.objects.filter(attendance=per_day['id']).delete()
                    # print("delete_request",delete_request)
                    log_details = AttendanceLog.objects.filter(attendance=per_day['id'],employee=user['cu_user_id']).values()
                    # print("log_details",log_details)

                    #######

                    att_filter = {}
                    req_filter = {}
                    pre_att_filter = {}
                    pre_req_filter = {}
                    late_con_filter = {}
                    bench_filter = {}
                    saturday_off_list = None
                    pre_att = None
                    saturday_off = False

                    logout_time = None
                    check_out = 0
                    # adv_leave_type = None
                    user_flag = 0
                    cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
                    cu_user_id = int(user['cu_user_id'])

                    #################
                    if date_time_day.weekday()==5 and no_request is False:
                        saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                            'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                        print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                        if saturday_off_list:
                            if saturday_off_list[0]['all_s_day'] is True:
                                # if user['is_saturday_off'] is True:
                                day_remarks = 'Saturday'
                                saturday_off = True

                            else:
                                week_date = date_time_day.day
                                # print("week_date",  week_date)
                                month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                                saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                                if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                    day_remarks='Saturday'
                                    saturday_off = True
                                elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                    day_remarks='Saturday'
                                    saturday_off = True
                                elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                    day_remarks='Saturday'
                                    saturday_off = True
                                elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                    day_remarks='Saturday'
                                    saturday_off = True

                            # print("Saturday")

                    #################

                    ###If user has no login/logout/lunch time >> Then fix their time##
                    user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
                    user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
                    user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
                    user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
                    
                    ## If Change Login-Logout time (Special Day) ##
                    if special_day:
                        daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                        # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                        daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                                    special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                        print("daily_logoutTime",daily_logoutTime)
                        pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
                    elif today_datetime.weekday()==5:
                        daily_loginTime = user['daily_loginTime']
                        daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                        pre_att_filter['day_remarks'] = 'Present'

                    else:
                        daily_loginTime = user['daily_loginTime']
                        daily_logoutTime = user['daily_logoutTime']
                        pre_att_filter['day_remarks'] = 'Present'
                    
                    ## LUNCH TIME ##
                    lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                    lunch_end = datetime.combine(today_datetime,user['lunch_end'])

                    ## DAILY LOGIN-LOGOUT ##
                    # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
                    daily_login = datetime.combine(today_datetime,daily_loginTime)
                    daily_logout = datetime.combine(today_datetime,daily_logoutTime)

                    is_saturday_off = user['is_saturday_off'] 
                    att_filter['employee_id'] = cu_user_id
                    grace_over = False

                    joining_date = user['joining_date']
                    if total_month_grace:
                        grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                        print("GRACE", grace_available)
                        if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                            total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                            grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                            print("grace_available AAAA", grace_available, cu_user_id)

                    availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                                    Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                                    Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                                    Q(is_requested=True) &
                                                                    Q(is_deleted=False)&
                                                                    (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                    ).aggregate(Sum('duration'))['duration__sum']
                    print('availed_grace',availed_grace)
                    availed_grace = availed_grace if availed_grace else 0
                    
                    # if grace_available<availed_grace: #nur code 
                    #     grace_over = True
                    if log_details:
                        user_flag = 1
                        for daily_log in log_details:
                            # print('daily_log',daily_log['time'])
                            # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                            # date_time = str(row['Date'])+'T'+str(row['Time'])
                            date_time_format = daily_log['time']
                            #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                            #print('rowEmpid',type(row['Empid']),row['Empid'])
                            # if cu_punch_id == row['Empid']:
                            # deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(daily_log['CID']))
                            # if deviceMasterDetails:
                            #     current_device = DeviceMaster.objects.get(device_no=int(daily_log['CID']))
                                # print("current_device",current_device)

                            current_device = daily_log['device_no_id']
                            # print("current_device", current_device , type(current_device))
                            ##################### END ###################################
                            pre_att_filter['employee_id'] = cu_user_id
                            # pre_att_filter['day_remarks'] = 'Present'
                            pre_att_filter['is_present'] = True
                            pre_att_filter['date'] = date_time_format
                            pre_att_filter['login_time'] = date_time_format
                            # print("pre_att_filter",pre_att_filter)

                            ##First time log in a Day##Successful
                            if pre_att is None:                      
                                if pre_att_filter:
                                    pre_att = self.att_create(pre_att_filter)
                                    bench_time = daily_login + timedelta(minutes=30)
                                    # print('bench_time',bench_time)
                                    # if saturday_off is False and no_request is False:

                                    ###Check login if After USER Daily login time = Duration### Successful
                                    if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                            bench_filter['attendance']=pre_att
                                            bench_filter['attendance_date'] = daily_login.date()
                                            bench_filter['duration_start']=daily_login
                                            bench_filter['duration_end']=pre_att_filter['login_time']
                                            bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                            bench_filter['punch_id'] = cu_punch_id
                                            if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                                grace_over = True
                                            if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                                bench_filter['checkin_benchmark']=True
                                                bench_filter['is_requested']=True
                                                # bench_filter['is_requested']=True
                                                # bench_filter['request_type']='GR'
                                            else:
                                                bench_filter['checkin_benchmark']=False

                                            if bench_filter['duration']>0:
                                                bench_req = self.request_create(bench_filter)

                            ##After Daily Attendance## Successful
                            if pre_att:
                                att_log_create, create1 = AttendanceLog.objects.get_or_create(
                                    attendance=pre_att,
                                    employee_id=cu_user_id,
                                    time=date_time_format,
                                    device_no=current_device
                                )

                                logout_time = date_time_format
                                duration_count = 0
                                if saturday_off is False and no_request is False:
                                    if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                        # print("if current_device in device_no_list:")
                                        check_out = 1
                                        pre_req_filter['attendance'] = pre_att
                                        pre_req_filter['punch_id'] = cu_punch_id
                                        pre_req_filter['duration_start'] = date_time_format
                                    elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                        check_out = 0
                                        pre_req_filter = {}
                                    elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                        check_out = 0
                                        if date_time_format>daily_logout:
                                            pre_req_filter['duration_end'] = daily_logout
                                        else:
                                            pre_req_filter['duration_end'] = date_time_format

                                        if pre_req_filter['duration_start']<daily_login:
                                            pre_req_filter['duration_start'] = daily_login
                                        # else:
                                        #     pre_req_filter['duration_end'] = date_time_format

                                        # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                        #     pre_req_filter['checkin_benchmark']=True
                                        #     pre_req_filter['is_requested']=True


                                        if lunch_end < pre_req_filter['duration_start']:
                                            duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_end']:
                                            duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                            duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                        elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                            duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                        elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                            duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                        # print("duration_count",duration_count, pre_req_filter)
                                        if duration_count>0:
                                            pre_req_filter['duration']=duration_count
                                            pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                            pre_req = self.request_create(pre_req_filter)
                                            pre_req_filter = {}
                                            #print("pre_req",pre_req)


                    if logout_time and pre_att:
                        # print('pre_att',pre_att.id)
                        pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                        if saturday_off is False and no_request is False:
                            ### IF Late convence ### Successful Testing
                            if daily_logoutTime < logout_time.time():
                                late_con_filter['attendance'] = pre_att
                                late_con_filter['punch_id'] = cu_punch_id
                                late_con_filter['attendance_date']=daily_logout.date()
                                late_con_filter['duration_start']=daily_logout
                                late_con_filter['duration_end']=logout_time
                                late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                                late_con_filter['is_late_conveyance']=True
                                # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                                '''
                                    As per requirement and discussion with Tonmay Da(10.12.2019):
                                    LATE CONVENCE always count after 08:30 PM 
                                '''
                                if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                                    and late_con_filter['duration']>0:
                                    # print("late_con_filter",late_con_filter)
                                    late_req = self.request_create(late_con_filter)
                                    # print("late_req",late_req)
                            
                            ###If Logout less then User's Daily log out### Successful Testing
                            elif daily_logoutTime > logout_time.time():
                                late_con_filter['attendance']=pre_att
                                late_con_filter['punch_id'] = cu_punch_id
                                late_con_filter['attendance_date']=daily_logout.date()
                                late_con_filter['duration_start']=logout_time
                                late_con_filter['duration_end']=daily_logout
                                late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                                late_con_filter['is_late_conveyance']=False
                                # late_con_filter['request_type']='GR'
                                if late_con_filter['duration']>0:
                                    # print("late_con_filter",late_con_filter)
                                    late_req = self.request_create(late_con_filter)
                                    # print("late_req",late_req)

                ## IF User Absent ###
                    if user_flag==0:
                        # print("ABSENT")
                        is_required = False
                        # print("user",cu_user_id)
                        adv_leave_type = None
                        leave = EmployeeAdvanceLeaves.objects.filter(
                            Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                            (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                        # print("leave",leave)
                        # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                        if leave:
                            adv_leave_type = leave[0]['leave_type']
                            # print("leave_type",leave[0]['leave_type'])
                            att_filter['day_remarks']=leave[0]['leave_type']
                            is_required = True
                        elif saturday_off is True or no_request is True:
                            att_filter['day_remarks'] = day_remarks
                            print("att_filter",att_filter, saturday_off, no_request)
                        else:
                            is_required = True
                            att_filter['day_remarks']="Not Present"

                        if att_filter:
                            date = date_time[0:10]+'T'+str(daily_loginTime)
                            date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                            #print("date_time_format",date_time_date)
                            att_filter['date'] = date_time_date
                            #print("att_filter",att_filter)

                            abs_att = self.att_create(att_filter)
                            print("att_filter",abs_att, is_required)
                            if is_required is True:
                                req_filter['attendance']= abs_att
                                req_filter['attendance_date'] = daily_login.date()
                                req_filter['duration_start'] = daily_login
                                req_filter['duration_end'] = daily_logout
                                req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                                if adv_leave_type:
                                    req_filter['request_type']='FD'
                                    req_filter['leave_type'] = adv_leave_type
                                    req_filter['approved_status'] = 'approved'
                                    req_filter['is_requested'] = True
                                    req_filter['justification'] = leave[0]['reason']

                                if req_filter:
                                    print("req_filter,",req_filter)
                                    req_filter['punch_id'] = cu_punch_id
                                    abs_req = self.request_create(req_filter)
                                    # abs_check = self.absent_checking(req_filter)
                                    # print("abs_req",abs_req, req_filter)
                                    
                    print("DELETE START FOR :", per_day['id'])
                    AttendanceLog.objects.filter(attendance=per_day['id']).delete()
                    AttendanceApprovalRequest.objects.filter(attendance=per_day['id']).delete()
                    Attendance.objects.filter(id=per_day['id']).delete()
                    print("DELETE COMPLETE", )
        return Response({'result':{'request_status':1,'msg':'Successful'}})

#########

class AttendanceNewUsersJoiningLeaveCalculation(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def post(self, request, *args, **kwargs):
        logdin_user_id = self.request.user.id
        # print('logdin_user_id',logdin_user_id)
        checking_join_date = datetime.strptime(request.data['checking_join_date'],"%Y-%m-%d") #First date of the year
        joining_date_details=TCoreUserDetail.objects.filter(~Q(cu_user__in=JoiningApprovedLeave.objects.filter().values_list('employee',flat=True))&
                                                            Q(joining_date__date__gt=checking_join_date)&~Q(cu_is_deleted=True)
                                                            ).values('joining_date','cu_user','granted_cl','granted_sl','granted_el')
        print('joining_date_details',joining_date_details)
        if joining_date_details:
            for user in joining_date_details:
                print("user",user['cu_user'], user['joining_date'])
                if user['joining_date']:
                    leave_filter = {}
                    joining_date = user['joining_date'].date()
                    joining_year=joining_date.year
                    print('joining_year',joining_date)
                    total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=joining_date,
                                    month_end__date__gte=joining_date,is_deleted=False).values('grace_available',
                                                                                'year_start_date',
                                                                                'year_end_date',
                                                                                'month',
                                                                                'month_start',
                                                                                'month_end'
                                                                                )
                    if total_month_grace:
                        year_end_date=total_month_grace[0]['year_end_date'].date()
                        total_days=(year_end_date - joining_date).days
                        # print('total_days',total_days)
                        if user['granted_cl']:
                            # leave_filter['cl']=round((total_days/365)* int(user['granted_cl']))
                            leave_filter['cl'] = round_calculation(total_days,user['granted_cl'])
                        else:
                            leave_filter['cl']= 0

                        if user['granted_el']:
                            # leave_filter['el']=round((total_days/365)* int(user['granted_el']))
                            leave_filter['el'] = round_calculation(total_days,user['granted_el'])
                        else:
                            leave_filter['el']= 0

                        if user['granted_sl']:
                            # leave_filter['sl']=round((total_days/365)* int(user['granted_sl']))
                            leave_filter['sl'] = round_calculation(total_days,user['granted_sl'])
                            # print('calculated_sl',calculated_sl)
                        else:
                            leave_filter['sl']= 0

                        month_start_date=total_month_grace[0]['month_start'].date()
                        month_end_date=total_month_grace[0]['month_end'].date()
                        # print('month_start_date',month_start_date,month_end_date)
                        month_days=(month_end_date-month_start_date).days
                        # print('month_days',month_days)
                        remaining_days=(month_end_date-joining_date).days
                        # print('remaining_days',remaining_days)
                        # available_grace=round(total_month_grace[0]['grace_available']/remaining_days)
                        available_grace = round((remaining_days/month_days)*int(total_month_grace[0]['grace_available']))
                        # print('available_grace',available_grace)

                        # if total_month_grace[0]['year_start_date']<joining_date_details[0]['joining_date']:
                        JoiningApprovedLeave.objects.get_or_create(employee_id=user['cu_user'],
                                                            year=joining_year,
                                                            month=total_month_grace[0]['month'],
                                                            **leave_filter,
                                                            first_grace=available_grace,
                                                            created_by_id=logdin_user_id,
                                                            owned_by_id=logdin_user_id
                                                            )
                    

        return Response({'result':{'request_status':1,'msg':'Successful'}})


##############CRON TEST VIEW ################################
class AttendanceUserCronMailForPending(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    # queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)

    def get(self, request, *args, **kwargs):
        data = {}

        # current_date = datetime.now().date()
        current_date = datetime.now().date()
        current_month = current_date.month
        print("current_date",current_date)
        total_month_grace=AttendenceMonthMaster.objects.filter(month=current_month,is_deleted=False).\
                                                    values('lock_date__date'
                                                ,'year_start_date','year_end_date','month','month_start__date',
                                                'month_end__date','pending_action_mail__date')
        print("total_month_grace",total_month_grace)
        days_cnt = (total_month_grace[0]['lock_date__date'] - total_month_grace[0]['pending_action_mail__date']).days
        date_generated = [total_month_grace[0]['pending_action_mail__date'] + timedelta(days=x) for x in range(0,days_cnt)]

        print("date_day",date_generated)
            #working query local and live 
        if current_date in date_generated:
            print("entered",current_date)
            #working query local and live 
            user_list=TMasterModuleRoleUser.objects.\
                        filter(
                            Q(mmr_type=3),Q(mmr_is_deleted=False),
                            Q(mmr_module__cm_name='ATTENDANCE & HRMS')).\
                            values_list('mmr_user',flat=True).distinct()

            print("user_list",user_list.query)
            #email extraction            
            user_mail_list_primary=TMasterModuleRoleUser.objects.\
                        filter(
                            Q(mmr_type=3),Q(mmr_is_deleted=False),
                            Q(mmr_module__cm_name='ATTENDANCE & HRMS'),
                            (Q(mmr_user__email__isnull=False) & ~Q(mmr_user__email=""))).\
                            values('mmr_user__email').distinct()

            user_mail_official = TCoreUserDetail.objects.filter(
                (Q(cu_alt_email_id__isnull=False) & ~Q(cu_alt_email_id="")),cu_user__in=list(user_list)).\
                    values('cu_alt_email_id').distinct()
            print("user_mail_list_primary",user_mail_list_primary)
            print("user_mail_official",user_mail_official)
            umlp = [x['mmr_user__email'] for x in user_mail_list_primary]
            uma = [x['cu_alt_email_id'] for x in user_mail_official]

            user_mail_list = list(set(umlp + uma))
            print("user_mail_list",user_mail_list)

            
            
            emp_mob = TCoreUserDetail.objects.filter(cu_user__in=list(user_list),cu_phone_no__isnull=False).\
                values('cu_phone_no').distinct()
            emp_mob_no = [ x['cu_phone_no'] for x in emp_mob ]

        print("user_mail_list",user_mail_list)
        # ============= Mail Send Step ==============#

        print("email",user_mail_list)
        
        if user_mail_list:
            # for email in email_list:
            mail_data = {
            'name':None
            }
            print('mail_data',mail_data)
            # mail_class = GlobleMailSend('ATP-PM', user_mail_list)
            mail_class = GlobleMailSend('ATP-PM', ['prashant.damani@shyamsteel.com', 'sribesh@shyamsteel.com', 'kalyan.acharya@shyamfuture.com', 'shankar@shyamsteel.com', 'rupam@shyamfuture.com'])
            print('mail_class',mail_class)
            mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,None))
            mail_thread.start()
            
        #===============================================#
        
        # # ============= Sms Send Step ==============#

        #     message_data = {
        #         'name':None
        #     }
        #     sms_class = GlobleSmsSendTxtLocal('ATTPR',emp_mob_no)
        #     # sms_class = GlobleSmsSendTxtLocal('ATTPR',['7595914029'])
        #     sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
        #     sms_thread.start()

        #     #===================================================#
        data['results'] = list(user_mail_list)
        return Response(data)

class AttendanceUserCronMailForPendingRoh(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    # queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)

    def get(self, request, *args, **kwargs):
        data = {}

        current_date = datetime.now().date()
        current_month = current_date.month
        total_month_grace=AttendenceMonthMaster.objects.filter(month=current_month,is_deleted=False).\
                                                    values('lock_date__date'
                                                ,'year_start_date','year_end_date','month','month_start__date',
                                                'month_end__date','pending_action_mail__date')
        print("total_month_grace",total_month_grace)
        days_cnt = (total_month_grace[0]['lock_date__date'] - total_month_grace[0]['pending_action_mail__date']).days
        date_generated = [total_month_grace[0]['pending_action_mail__date'] + timedelta(days=x) for x in range(0,days_cnt+1)]

        print("date_day",date_generated)
        if current_date in date_generated:
            print("entered",current_date)
            #working query local and live 
            roh_userlist = TCoreUserDetail.objects.values_list('reporting_head',flat=True).distinct()
            print("roh_userlist",roh_userlist)
            user_mail_list=TMasterModuleRoleUser.objects.\
                filter(
                    Q(mmr_type=3),Q(mmr_is_deleted=False),
                    Q(mmr_module__cm_name='ATTENDANCE & HRMS'),
                    (Q(mmr_user__email__isnull=False) & ~Q(mmr_user__email="")),mmr_user__in=list(roh_userlist)).\
                    values_list('mmr_user__email',flat=True).distinct()
            print(user_mail_list.query)
            

            print("user_mail_list",user_mail_list, list(user_mail_list))
                # ============= Mail Send Step ==============#

            print("email",list(user_mail_list))
            if user_mail_list:
                # for email in email_list:
                mail_data = {
                'name':None
                }
                print('mail_data',mail_data)
                mail_class = GlobleMailSend('ATAP-PM', list(user_mail_list))
                print('mail_class',mail_class)
                mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,None))
                mail_thread.start()
        data['results'] = list(user_mail_list)
        return Response(data)


class AttendanceUserCronLock(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def leave_calulate(self,employee_id,total_month_grace):
        total_grace={}
        date_object = datetime.now().date()
        print('employee_id',employee_id)
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=employee_id)&
                                                            Q(is_deleted=False)&
                                                            (Q(approved_status='pending')|Q(approved_status='approved'))
                                                            ).values('leave_type','start_date','end_date')
        print('advance_leave',advance_leave)     
        advance_cl=0
        advance_el=0
        advance_ab=0           
        day=0

        # date =self.request.query_params.get('employee', None)
        if advance_leave:
            for leave in advance_leave.iterator():
                #print('leave',leave)
                start_date=leave['start_date'].date()
                end_date=leave['end_date'].date()+timedelta(days=1)
                #print('start_date,end_date',start_date,end_date)
                if date_object < end_date:
                    if date_object < start_date:
                        day=(end_date-start_date).days 
                        #print('day',day)
                    elif date_object > start_date:
                        day=(end_date-date_object).days
                        #print('day2',day)
                    else:
                        day=(end_date-date_object).days

                if leave['leave_type']=='CL':
                    advance_cl+=day
                    #print('advance_cl_1',advance_cl)
                elif leave['leave_type']=='EL':
                    advance_el+=day
                    #print('advance_el_2',advance_el)
                elif leave['leave_type']=='AB':
                    advance_ab+=day

            

        print('advance_cl',advance_cl,type(advance_cl))
        print('advance_el',advance_el,type(advance_el))


        
        """ 
        LEAVE CALCULATION:-
        1)SINGLE LEAVE CALCULATION
        2)MULTIPLE LEAVE FOR ONE DAY IS AUTO CONVERTED TO ONE TYPE OF LEAVE 
        CREATED & EDITED BY :- Abhishek.singh@shyamfuture.com
        
        """ 
        #starttime = datetime.now()
        availed_hd_cl=0.0
        availed_hd_el=0.0
        availed_hd_sl=0.0
        availed_hd_ab=0.0
        availed_cl=0.0
        availed_el=0.0
        availed_sl=0.0
        availed_ab=0.0

        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                                                        (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                                                        attendance__employee=employee_id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        #print("date_list",date_list)
        # for data in attendence_daily_data.iterator():
            # print(datetime.now())
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance__employee=employee_id,
                        attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:

            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            availed_cl=availed_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            availed_cl=availed_cl+1.0
                        elif l_type == 'EL':
                            availed_el=availed_el+1.0
                        elif l_type == 'SL':
                            availed_sl=availed_sl+1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            availed_hd_cl=availed_hd_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            availed_hd_cl=availed_hd_cl+1.0
                        elif l_type == 'EL':
                            availed_hd_el=availed_hd_el+1.0
                        elif l_type == 'SL':
                            availed_hd_sl=availed_hd_sl+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
        

        

        print("availed_cl",availed_cl,type(availed_cl))
        print("availed_el",availed_el,type(availed_el))

        print('availed_hd_cl',availed_hd_cl/2.0,type(availed_hd_cl/2.0))
        print('availed_hd_el',availed_hd_el/2.0,type(availed_hd_el/2.0))

        # if employee_id == '1881':
        #     total_grace['availed_cl']= 20.0
        #     print("total_grace['availed_cl']",total_grace['availed_cl'])

        #     total_grace['availed_el']=0.0
        #     print("total_grace['availed_el']",total_grace['availed_el'])
        #     total_grace['availed_sl']=float(availed_sl)+float(availed_hd_sl/2.0)
        #     print("total_grace['availed_sl']",total_grace['availed_sl'])
        #     total_grace['availed_ab']=float(availed_ab)+float(advance_ab)+float(availed_hd_ab/2.0)
        # else:
        total_grace['availed_cl']= float(availed_cl)+ float(advance_cl) +(float(availed_hd_cl)/2.0)
        print("total_grace['availed_cl']",total_grace['availed_cl'])

        total_grace['availed_el']=float(availed_el)+float(advance_el)+float(availed_hd_el/2.0)
        print("total_grace['availed_el']",total_grace['availed_el'])
        total_grace['availed_sl']=float(availed_sl)+float(availed_hd_sl/2.0)
        print("total_grace['availed_sl']",total_grace['availed_sl'])
        total_grace['availed_ab']=float(availed_ab)+float(advance_ab)+float(availed_hd_ab/2.0)


        
        core_user_detail=TCoreUserDetail.objects.filter(cu_user=employee_id).values('joining_date',
                                                                                            'granted_cl',
                                                                                            'granted_sl',
                                                                                            'granted_el',
                                                                                            'is_confirm',
                                                                                            'salary_type__st_name'
                                                                                            )

        print('core_user_detail',core_user_detail)

        if core_user_detail:
            if core_user_detail[0]['salary_type__st_name']=='13' and core_user_detail[0]['is_confirm'] is False:
                total_grace['is_confirm'] = False
            else:
                total_grace['is_confirm'] = True
                # print("core_user_detail[0]['joining_date']",core_user_detail[0]['joining_date'],"total_month_grace[0]['year_start_date']",total_month_grace[0]['year_start_date'])
            if core_user_detail[0]['joining_date']>total_month_grace[0]['year_start_date']:
                approved_leave=JoiningApprovedLeave.objects.filter(employee=employee_id,is_deleted=False).values('cl', 'el', 'sl',
                                                                                                                'year', 'month',
                                                                                                                'first_grace')
                if approved_leave:
                    total_grace['granted_cl']=approved_leave[0]['cl']
                    total_grace['cl_balance']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) - float(total_grace['availed_cl'])
                    total_grace['granted_el']=approved_leave[0]['el']
                    total_grace['el_balance']=float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 ) - float(total_grace['availed_el'])
                    total_grace['granted_sl']=approved_leave[0]['sl']
                    total_grace['sl_balance']=float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) - float(total_grace['availed_sl'])
                    # total_grace['total_granted_leave']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) + float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0) + float(approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0)
                    # total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])
                    if total_month_grace[0]['month']==approved_leave[0]['month']:    #for joining month only
                        total_grace['total_month_grace']=approved_leave[0]['first_grace']
                        total_grace['month_start']=core_user_detail[0]['joining_date']
                        # total_grace['grace_balance']=total_grace['total_month_grace'] - total_grace['availed_grace']
            else:

                # total_grace['granted_cl']=core_user_detail[0]['granted_cl']
                print("granted cl",core_user_detail[0]['granted_cl'],type(core_user_detail[0]['granted_cl']))
                print("availed_cl cl",total_grace['availed_cl'],type(total_grace['availed_cl']))
                total_grace['cl_balance']=float(core_user_detail[0]['granted_cl']) -  float(total_grace['availed_cl'])
                total_grace['granted_el']=core_user_detail[0]['granted_el']
                total_grace['el_balance']=float(core_user_detail[0]['granted_el']) - float(total_grace['availed_el'])
                total_grace['granted_sl']=core_user_detail[0]['granted_sl']
                total_grace['sl_balance']=float(core_user_detail[0]['granted_sl']) - float(total_grace['availed_sl'])
                # total_grace['total_granted_leave']=float(core_user_detail[0]['granted_cl']) + float(core_user_detail[0]['granted_el']) + float(core_user_detail[0]['granted_sl'])
                # total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['total_availed_leave'])

        return total_grace 


    def get(self, request, *args, **kwargs):
        date_object = datetime.now().date()
        current_date = datetime.now().date()
        current_month = current_date.month

        current_month = 3
        total_month_grace=AttendenceMonthMaster.objects.filter(month=current_month,year_end_date__year ='2020',is_deleted=False).values('lock_date__date'
                                                ,'year_start_date','year_end_date','month','month_start__date','month_end__date')
        

        # total_month_grace=AttendenceMonthMaster.objects.filter(month=current_month,is_deleted=False).values('lock_date__date'
        #                                         ,'year_start_date','year_end_date','month','month_start__date','month_end__date')
        print("total_month_grace",total_month_grace)
        with transaction.atomic():
            print('lock_date__date',total_month_grace[0]['lock_date__date'])
            if current_date == total_month_grace[0]['lock_date__date']:
               
                # Exclude director's punch id from list
                user_details=TMasterModuleRoleUser.objects.\
                        filter(
                            Q(mmr_user__in=(
                                TCoreUserDetail.objects.filter(
                                    ~Q(cu_punch_id='#N/A'),
                                    ~Q(sap_personnel_no__in=('37200093','37200078','37200080','37200083','37200088','37200089','37200095','37200096','78200024',
'37200084','37200097','37200079','37200082','37200077','37200085','37200086','37200087','37200091',
'37200092','37200094','37200098','37200099','37200113','78200002','78200023','37200030','37200039',
'37200041','37200069','37200063','37200134','37200130','37200101','37200106','37200132','37200131',
'37200105','37200058','37200133','37200072','37200145','37200150','37200152','37200153','37200118',
'37200120','37200116','37200124','37200025','37200060','37200115','37200136','37200119','37200057',
'37200065','37200074','37200139','37200144','82000044','37200148','37200149','37200122','37200154',
'37200147','82000010','37200031','37200034','37200029','37200044','37200070','37200081','37200071',
'37200146','37200151','37200111','37200128','37200108','37200073','37200076','37200129',)),
                                    user_type__in=('User',),
                                    cu_is_deleted=False
                                    ).values_list('cu_user',flat=True))),
                            Q(mmr_type=3),
                            Q(mmr_is_deleted=False),
                            Q(mmr_module__cm_name='ATTENDANCE & HRMS')).values_list('mmr_user',flat=True).distinct()
            
                print('user_details',len(user_details))
                for employee_id in user_details:

                    '''
                        For Testing Pupose leave check before OD Approval 7969-7970
                    '''
                    total_grace_finalbefore = self.leave_calulate(employee_id,total_month_grace)
                    print("loop before od ",total_grace_finalbefore)
                    
                    # print("employee_id",employee_id)
                    attendence_ids=AttendanceApprovalRequest.objects.filter(attendance_date__gte=total_month_grace[0]['month_start__date'],
                                                        attendance_date__lte=total_month_grace[0]['month_end__date'],is_late_conveyance=False,
                                                        is_requested=False,is_deleted=False,attendance__employee=employee_id).values_list('attendance',flat=True).distinct()
                    # print("attendence_ids",attendence_ids)
                    


                    #OD AUTO APPROVAL
                    od_app_req_id=AttendanceApprovalRequest.objects.filter(
                        (Q(request_type='POD')|Q(request_type='FOD')),
                        attendance__employee=employee_id,is_requested=True,approved_status='pending').values_list('id',flat=True).distinct()

                    
                    for app_req_id in list(od_app_req_id):

                        
                        AttendanceApprovalRequest.objects.filter(
                            id=app_req_id,
                            is_late_conveyance=False,
                            is_requested=True).update(approved_status='approved',remarks='AUTO OD APPROVED')

                        # total_grace_final = leave_calulate(employee_id,total_month_grace)
                        # print("Inside loop od grace",total_grace_final)
                        # duration_length=AttendanceApprovalRequest.objects.get(id=app_req_id,
                        #                                             is_requested=True).duration
                        # if duration_length < 240:
                        #     if total_grace_final['cl_balance'] > 0.0:

                        #         update_auto = AttendanceApprovalRequest.objects.filter(
                        #             id=app_req_id,is_late_conveyance=False,is_requested=True).\
                        #                                                     update(leave_type_changed_period='HD',leave_type_changed='CL',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')
                        #     elif total_grace_final['el_balance'] > 0.0:

                        #         update_auto = AttendanceApprovalRequest.objects.filter(id=app_req_id,is_late_conveyance=False,
                        #                                                 is_requested=True).\
                        #                                                     update(leave_type_changed_period='HD',leave_type_changed='EL',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')
                        #     else:

                        #         update_auto =AttendanceApprovalRequest.objects.filter(id=app_req_id,is_late_conveyance=False,
                        #                                                 is_requested=True).\
                        #                                                     update(leave_type_changed_period='HD',leave_type_changed='AB',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')
                        # else:
                        #     if total_grace_final['cl_balance'] > 0.5:

                        #         update_auto =AttendanceApprovalRequest.objects.filter(id=app_req_id,is_late_conveyance=False,
                        #                                                 is_requested=True).\
                        #                                                     update(leave_type_changed_period='FD',leave_type_changed='CL',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')
                        #     elif total_grace_final['el_balance'] > 0.5:

                        #         update_auto = AttendanceApprovalRequest.objects.filter(id=app_req_id,is_late_conveyance=False,
                        #                                                 is_requested=True).\
                        #                                                     update(leave_type_changed_period='FD',leave_type_changed='EL',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')
                        #     else:

                        #         update_auto = AttendanceApprovalRequest.objects.filter(id=app_req_id,is_late_conveyance=False,
                        #                                                 is_requested=True).\
                        #                                                     update(leave_type_changed_period='FD',leave_type_changed='AB',
                        #                                                     approved_status='approved',remarks='AUTO OD CONVERTED TO LEAVE & APPROVED')                       
                
                    
                    # total_grace_final2 = self.leave_calulate(employee_id,total_month_grace)
                    # print("after od leave calculate",total_grace_final2) 

                    for att_id in list(attendence_ids):
                        
                        total_grace_final2 = self.leave_calulate(employee_id,total_month_grace)
                        print('employee_id',employee_id)
                        print("Inside loop not requested grace",total_grace_final2)

                        duration_length=AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                    checkin_benchmark=False,is_requested=False).aggregate(Sum('duration'))['duration__sum']
                        print('duration_length',duration_length,'att_id',att_id)
                        print('employee_id',employee_id)
                        if duration_length is not None and duration_length < 240:
                            if total_grace_final2['cl_balance'] > 0.0:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='CL',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                            elif total_grace_final2['el_balance'] > 0.0:
                                if total_grace_final2['is_confirm'] : 
                                    update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                            checkin_benchmark=False,is_requested=False).\
                                                                                update(request_type='HD',leave_type='EL',justification='AUTO',is_requested=True,
                                                                                approved_status='approved',remarks='AUTO LEAVE APPROVED')
                                else:
                                    update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')

                            elif total_grace_final2['sl_balance'] > 0.0:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='SL',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                            else:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                        else:
                            if total_grace_final2['cl_balance'] > 0.5:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='FD',leave_type='CL',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                            elif total_grace_final2['el_balance'] > 0.5:
                                if total_grace_final2['is_confirm'] : 
                                    update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                            checkin_benchmark=False,is_requested=False).\
                                                                                update(request_type='FD',leave_type='EL',justification='AUTO',is_requested=True,
                                                                                approved_status='approved',remarks='AUTO LEAVE APPROVED')
                                else:
                                    update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='FD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')

                            elif total_grace_final2['sl_balance'] > 0.5:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='FD',leave_type='SL',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                            else:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='FD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')                        
                    #for checking
                    total_grace_final2 = self.leave_calulate(employee_id,total_month_grace)
                    print("after grace leave calculate",total_grace_final2) 
                    auto_grace_approval =AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,
                                                                            is_requested=True,request_type='GR',approved_status='pending').\
                                                                                update(approved_status='approved',remarks='AUTO GRACE APPROVED')

                    auto_misspunch_approval =AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,
                                                                            is_requested=True,request_type='MP',approved_status='pending').\
                                                                                update(approved_status='approved',remarks='AUTO MISSPUNCH APPROVED') 
                    
                print("entered or noyt ")                                                                             
                lock=AttendanceApprovalRequest.objects.filter(attendance_date__gte=total_month_grace[0]['month_start__date'],
                                                        attendance_date__lte=total_month_grace[0]['month_end__date'],
                                                        is_deleted=False).\
                                                            update(lock_status=True)
                print("lock",lock)   

        return Response({})


class AttendanceUserSixDayLeaveCheck(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request, *args, **kwargs):
        from time import sleep
        logdin_user_id = self.request.user.id
        user_id = self.request.query_params.get('user_id', None)

        current_date = self.request.query_params.get('current_date', None)
        if current_date:
            today_datetime = datetime.strptime(current_date, "%Y-%m-%d")
        else:
            today_datetime = datetime.now()
        print("today_datetime",today_datetime, type(today_datetime))
        #sleep(2)
        
        # start_date = self.request.query_params.get('start_date', None)
        # sdate = datetime.strptime(start_date, "%Y-%m-%d")
        # end_date = self.request.query_params.get('end_date', None)
        # edate = datetime.strptime(end_date, "%Y-%m-%d")+timedelta(days=1)

        # def last_day_of_month(self,sdate, edate):
        days_list = []
        user_list =  []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        # print("sdate",sdate   , edate)

        # delta = edate - sdate       # as timedelta

        # for i in range(delta.days + 1):
        #     day = sdate + timedelta(days=i)
        #     # print(day)
        #     days_list.append(day)

        # print("days_list",days_list)

        

        # for today_datetime in days_list:
        date_time_day = today_datetime.date()
        print("date_time_day",date_time_day)
        # sleep(1)
        if user_id:
            user_details = TCoreUserDetail.objects.filter(cu_user_id=user_id).values()
        else:
            user_details = TCoreUserDetail.objects.filter(~Q(
                        (   
                            Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                            Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                        )|
                        (Q(cu_punch_id='#N/A'))#|
                        # (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                    ),
                    (
                        Q(
                            Q(termination_date__isnull=False)&Q(
                                Q(
                                    Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                                )|
                                Q(termination_date__date__gte=date_time_day)
                            )
                        )|
                        Q(Q(termination_date__isnull=True))
                    ),
                    (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

        print('Total_user',len(user_details))
        #sleep(2)
        user_count = len(user_details)


        for user in user_details:
            print("len(user_details)", user_count,  user['cu_user_id'],  user['cu_punch_id'])
            user_count = user_count-1
            
            # print("user",user)
            date = today_datetime.date()
            cu_user = int(user['cu_user_id'])
            punch_id = user['cu_punch_id']
            # attendance_data = Attendance.objects.filter(date__date=date_time_day,employee=cu_user_id)#.values_list('employee',flat=True)
            is_absent = True
            # requested_list = []
            # not_requested_list = []
            count = 0
            attendance_dtl_list = []
            six_day_count = 0

            while is_absent is True:
                print("six_day_count", count)
                print("after while date",date, type(date),cu_user, )
                #sleep(1)
                # print("kjgjkgk",date, cu_user)
                attendance_data = Attendance.objects.filter(date__date=date,employee=cu_user).values()
                req_data = AttendanceApprovalRequest.objects.filter((Q(Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD'))|
                                                                    Q(Q(leave_type_changed_period__isnull=True)&Q(request_type='FD'))),
                                                                    attendance__employee_id=cu_user,is_requested=True,duration_start__date=date).count()
                
                not_requested_data = AttendanceApprovalRequest.objects.filter(attendance__employee_id=cu_user,duration_start__date=date).count()
                print("not_requested_data",req_data,not_requested_data)
                if attendance_data:
                    print("req_data",req_data)
                    # print("not_requested_data",not_requested_data, attendance_data[0]["is_present"])
                    if attendance_data[0]["is_present"] is False:
                        if req_data>0:
                            is_absent = True
                            count += 1
                            # requested_list.append(date)
                            # print("req_data",req_data)
                            # six_day_count +=1
                        elif not_requested_data==0:
                            is_absent = True
                            count += 1
                            attendance_dtl_list.append(attendance_data[0])
                        else:
                            is_absent = False
                    # elif attendance_data[0]["is_present"] is True:
                    else:
                        print("_present")
                        is_absent = False
                else:
                    print("No attendance")
                    is_absent = False

                print("is_absent", is_absent)
                date = date - timedelta(days=1)
                # if req_data:
                #     is_absent = True
                #     count += 1
                #     # requested_list.append(date)
                #     print("req_data",req_data)
                #     six_day_count +=1
                # else:
                #     print("Not requested attendance")
                #     if attendance_data:
                #         print("not_requested_data",not_requested_data, type(not_requested_data))
                #         if attendance_data[0]["is_present"] is True:
                #             print("_present")
                #             is_absent = False
                #         elif attendance_data[0]["is_present"] is False and not_requested_data>0:
                #             is_absent = False
                #         elif attendance_data[0]["is_present"] is False and not_requested_data==0:
                #             print("Absent")
                #             is_absent = True
                #             count += 1
                #             attendance_dtl_list.append(attendance_data[0])
                #             six_day_count +=1

                #         else:
                #             print("not_present")
                #             is_absent = False
                #     else:
                #         print("Not requested")
                #         is_absent = False

            data_dict = {}
            print("attendance_dtl_list",attendance_dtl_list)
            if count>6 and len(attendance_dtl_list)>0:
                #sleep(2)
                print("attendance_dtl_list",attendance_dtl_list)
                data_dict["user_id"]=user['cu_user_id']
                data_dict["req_count"]=len(attendance_dtl_list)
                data_dict["count"]=count
                user_list.append(data_dict)
                for data in attendance_dtl_list:
                    # print("data",data)

                    daily_login = datetime.combine(data['date'],user['daily_loginTime'])
                    daily_logout = datetime.combine(data['date'],user['daily_logoutTime'])
                    duration = round(((daily_logout-daily_login).seconds)/60)
                    # AttendanceApprovalRequest.objects.get_or_create(attendance_id=data['id'],duration_start=daily_login,duration_end=daily_logout,
                    #                                                 duration=duration,attendance_date=daily_login.date(),punch_id=punch_id,
                    #                                                 created_by_id=logdin_user_id,owned_by_id=logdin_user_id)

        print("sgdjkfgsjkdgfsgdfhs",    user_list)
        return Response({'result':{'request_status':1,'msg':'Successful','user_list':user_list}})


class QueryPrint(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request, *args, **kwargs):
        data={}
        #WRITE QUERY SECTION##################################################################
        user_list = TMasterModuleRoleUser.objects.\
                    filter(
                        Q(mmr_type=3),Q(mmr_is_deleted=False),
                        Q(mmr_module__cm_name='ATTENDANCE & HRMS')).\
                        values_list('mmr_user',flat=True).distinct()
        q = TCoreUserDetail.objects.filter(cu_punch_id__isnull=False).values('cu_punch_id','cu_user')
        user = [x['cu_user']for x in q]
        for us in user :
            punch_id = q.filter(cu_user=us).values('cu_punch_id')
            query = AttendanceApprovalRequest.objects.filter(attendance__employee=us).update(punch_id=punch_id[0]['cu_punch_id'])
            print("query",query)
        ######################################################################################
        # query_output = raw_query_extract(query) #QUERY EXTRACTION FUNCTION raw_query_extract
        # print("query_output",query_output)
        data['Raw_query_result'] = str(query)
        return Response(data)


class EmailSMSAlertForRequestApproval(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = EmailSMSAlertForRequestApprovalSerializer

    @response_with_status
    def get(self, request, *args, **kwargs):
        last_justification_date = self.request.query_params.get('last_justification_date', None)
        last_approval_date = self.request.query_params.get('last_approval_date', None)
        send_type = self.request.query_params.get('send_type', None)
        data = list()
        if last_justification_date:
            user_details, today_datetime, date_time_day = self.get_all_active_user()

            calculation_date_time = str(copy.deepcopy(today_datetime).strftime("%d-%m-%Y %H:%M:%S"))
            #::::::::::::::: For All User :::::::::::::::#
            reporting_head_set = set()
            if send_type == 'sms':
                print('user_details',user_details)
                for user in user_details:
                    
                    
                    kwargs['user'] = user
                    kwargs['emp_id'] = user.cu_user.id
                    kwargs['date_time_day'] = date_time_day
                    unjustified_attendance_requests, _ = self.get_unjustified_and_pending_attendance_request(request, *args, **kwargs)

                    #self.send_alert_to_all_employee(last_justification_date=last_justification_date, user=user, unjustified_attendance_requests=unjustified_attendance_requests)
                    if user.cu_alt_phone_no:
                        user_phone_no  = user.cu_alt_phone_no
                    else:
                        user_phone_no = user.cu_phone_no
                    
                    data.append({'user_id':user.cu_user.id, 'user_phone_no': user_phone_no,'len(unjustified_attendance_requests)':len(unjustified_attendance_requests)})

                    data.append({'user_id':user.cu_user.id, 'user_phone_no':user_phone_no})
                    if user_phone_no and len(unjustified_attendance_requests):
                        unjustified_sms_alert_to_all_employee_task.delay(calculation_date_time=calculation_date_time,last_justification_date=last_justification_date, user_phone_no=user_phone_no, unjustified_attendance_requests=unjustified_attendance_requests)
                    # if user.cu_alt_email_id and len(unjustified_attendance_requests):
                    #     unjustified_mail_alert_to_all_employee_task.delay(last_justification_date=last_justification_date, user_email=user.cu_alt_email_id, unjustified_attendance_requests=unjustified_attendance_requests)
                    #break

                # print(reporting_head_set)
                #::::::::::::::: For Reporting Head :::::::::::::::#
                users_under_reporting_head_list = self.users_under_reporting_head(user_details)
                for reporting_head, users_under_reporting_head in users_under_reporting_head_list.items():
                    #break
                    print('reporting_head:', reporting_head)
                    print('users_under_reporting_head:', users_under_reporting_head)

                    pending_approval_requests_list = list()
                    pending_dick = {'grace':0, 'half_day':0, 'full_day':0, 'mispunch':0, 'week_off':0, 'off_duty':0, 'conveyance':0, 'leave':0}
                    for user in users_under_reporting_head:
                        kwargs['user'] = user
                        kwargs['emp_id'] = user.cu_user.id
                        kwargs['date_time_day'] = date_time_day
                        _, pending_approval_requests = self.get_unjustified_and_pending_attendance_request(request, *args, **kwargs)
                        pending_approval_requests_list.extend(pending_approval_requests)
                        grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave = self.get_pending_requests_and_leave_count(pending_approval_requests)
                        pending_dick['grace'] = pending_dick['grace'] + grace
                        pending_dick['half_day'] = pending_dick['half_day'] + half_day
                        pending_dick['full_day'] = pending_dick['full_day'] + full_day
                        pending_dick['mispunch'] = pending_dick['mispunch'] + mispunch
                        pending_dick['week_off'] = pending_dick['week_off'] + week_off
                        pending_dick['off_duty'] = pending_dick['off_duty'] + off_duty
                        pending_dick['conveyance'] = pending_dick['conveyance'] + conveyance
                        pending_dick['leave'] = pending_dick['leave'] + leave


                    pending_dick['reporting_head_phone'] = reporting_head.cu_alt_phone_no if reporting_head.cu_alt_phone_no else reporting_head.cu_phone_no
                    pending_dick['reporting_head_email'] = reporting_head.cu_alt_email_id if reporting_head.cu_alt_email_id else reporting_head.cu_user.email
                    pending_dick['pending_approval_requests'] = pending_approval_requests_list
                    pending_dick['last_approval_date'] = last_approval_date
                    pending_dick['calculation_date_time'] = calculation_date_time
                    # self.send_alert_to_reporting_head(**pending_dick)
                    if pending_dick['reporting_head_phone'] and len(pending_approval_requests_list):
                        pending_sms_alert_to_reporting_head.delay(**pending_dick)
                    # if reporting_head.cu_alt_email_id and len(pending_approval_requests_list):
                    #     pending_mail_alert_to_reporting_head.delay(**pending_dick)
                    
            
            if send_type == 'mail':
                for user in user_details:
                    
                    kwargs['user'] = user
                    kwargs['emp_id'] = user.cu_user.id
                    kwargs['date_time_day'] = date_time_day
                    unjustified_attendance_requests, _ = self.get_unjustified_and_pending_attendance_request(request, *args, **kwargs)

                    if user.cu_alt_email_id:
                        user_email = user.cu_alt_email_id
                    else:
                        user_email = user.cu_user.email
                    #self.send_alert_to_all_employee(last_justification_date=last_justification_date, user=user, unjustified_attendance_requests=unjustified_attendance_requests)
                    
                    data.append({'user_id':user.cu_user.id, 'cu_alt_email_id':user_email})

                    # if user.cu_alt_phone_no and len(unjustified_attendance_requests):
                    #     unjustified_sms_alert_to_all_employee_task.delay(last_justification_date=last_justification_date, user_phone_no=user.cu_alt_phone_no, unjustified_attendance_requests=unjustified_attendance_requests)
                    if user_email and len(unjustified_attendance_requests):
                        data.append({'user_id':user.cu_user.id,'last_justification_date':last_justification_date ,'user_email': user_email, "len(unjustified_attendance_requests)":len(unjustified_attendance_requests)})
                        unjustified_mail_alert_to_all_employee_task.delay(calculation_date_time=calculation_date_time,last_justification_date=last_justification_date, user_email=user_email, unjustified_attendance_requests=unjustified_attendance_requests)
                    #break

                # print(reporting_head_set)
                #::::::::::::::: For Reporting Head :::::::::::::::#
                users_under_reporting_head_list = self.users_under_reporting_head(user_details)
                for reporting_head, users_under_reporting_head in users_under_reporting_head_list.items():
                    #break
                    print('reporting_head:', reporting_head)
                    print('users_under_reporting_head:', users_under_reporting_head)
                    
                    pending_approval_requests_list = list()
                    pending_dick = {'grace':0, 'half_day':0, 'full_day':0, 'mispunch':0, 'week_off':0, 'off_duty':0, 'conveyance':0, 'leave':0}
                    for user in users_under_reporting_head:
                        kwargs['user'] = user
                        kwargs['emp_id'] = user.cu_user.id
                        kwargs['date_time_day'] = date_time_day
                        _, pending_approval_requests = self.get_unjustified_and_pending_attendance_request(request, *args, **kwargs)
                        pending_approval_requests_list.extend(pending_approval_requests)
                        grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave = self.get_pending_requests_and_leave_count(pending_approval_requests)
                        pending_dick['grace'] = pending_dick['grace'] + grace
                        pending_dick['half_day'] = pending_dick['half_day'] + half_day
                        pending_dick['full_day'] = pending_dick['full_day'] + full_day
                        pending_dick['mispunch'] = pending_dick['mispunch'] + mispunch
                        pending_dick['week_off'] = pending_dick['week_off'] + week_off
                        pending_dick['off_duty'] = pending_dick['off_duty'] + off_duty
                        pending_dick['conveyance'] = pending_dick['conveyance'] + conveyance
                        pending_dick['leave'] = pending_dick['leave'] + leave

                    pending_dick['reporting_head_phone'] = reporting_head.cu_alt_phone_no if reporting_head.cu_alt_phone_no else reporting_head.cu_phone_no
                    pending_dick['reporting_head_email'] = reporting_head.cu_alt_email_id if reporting_head.cu_alt_email_id else reporting_head.cu_user.email
                    pending_dick['pending_approval_requests'] = pending_approval_requests_list
                    pending_dick['last_approval_date'] = last_approval_date
                    pending_dick['calculation_date_time'] = calculation_date_time
                    # self.send_alert_to_reporting_head(**pending_dick)
                    # if reporting_head.cu_alt_phone_no and len(pending_approval_requests_list):
                    #     pending_sms_alert_to_reporting_head.delay(**pending_dick)
                    if pending_dick['reporting_head_email'] and len(pending_approval_requests_list):
                        pending_mail_alert_to_reporting_head.delay(**pending_dick)
                    #break
                    
        return data

    def get_pending_requests_and_leave_count(self,pending_approval_requests):
        grace = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'GR'), pending_approval_requests)))
        half_day = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'HD'), pending_approval_requests)))
        full_day = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'FD'), pending_approval_requests)))
        mispunch = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'MP'), pending_approval_requests)))
        week_off = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'WO'), pending_approval_requests)))
        off_duty = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['request_type'] == 'OD' or x['request_type'] == 'FOD' or x['request_type'] == 'POD')), pending_approval_requests)))
        conveyance = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['is_late_conveyance'] or x['is_conveyance'])), pending_approval_requests)))
        leave = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['leave_type'] == 'EL' or x['leave_type'] == 'CL' or x['leave_type'] == 'SL')), pending_approval_requests)))
        return grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave

    def users_under_reporting_head(self,user_details):
        users_under_reporting_head_list = collections.defaultdict(set)
        for user in user_details:
            if user.reporting_head:
                users_under_reporting_head_list[TCoreUserDetail.objects.get(cu_user=user.reporting_head)].add(user)
        return users_under_reporting_head_list

    def get_all_active_user(self):
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()
        user_details = TCoreUserDetail.objects.filter(~Q(
                (   
                    Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                )|
                (Q(cu_punch_id='#N/A'))|
                (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
            ),
            (
                Q(
                    Q(termination_date__isnull=False)&Q(
                        Q(
                            Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                        )|
                        Q(termination_date__date__gte=date_time_day)
                    )
                )|
                Q(Q(termination_date__isnull=True))
            ),
            (Q(user_type__in=('User','Housekeeper'))),
            #(Q(cu_user_id='3187')),
            (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False)

        
        print('Total_user',len(user_details))
        return user_details, today_datetime, date_time_day

    def get_unjustified_and_pending_attendance_request(self, request, *args, **kwargs):
        # print('kwargs:',kwargs)
        self.request.query_params._mutable = True
        self.request.query_params['emp_id'] = kwargs['emp_id']
        self.request.query_params['current_date'] = self.request.query_params.get('current_date', str(kwargs['date_time_day'])) # '2019-12-21'
        self.request.query_params['is_previous'] = False
        self.request.query_params._mutable = False
        
        response = self.get_justifiable_requests(request, args, kwargs)
        request_approval_daily_list = response.data
        filtered_attendance_requests = list()
        for arl in request_approval_daily_list:
            if len(arl['attendance_request']):
                filtered_attendance_requests.extend(arl['attendance_request'])
        #print('User:',kwargs['user'].cu_user.id)
        #print('len of requests approval:', len(filtered_attendance_requests))

        unjustified_attendance_requests = list(filter(lambda x: not x['is_requested'] , filtered_attendance_requests))
        print('len of unjustified requests approval:', len(unjustified_attendance_requests))

        pending_approval_requests = list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending'), filtered_attendance_requests))
        print('len of pending requests approval:', len(pending_approval_requests))
        
        return unjustified_attendance_requests, pending_approval_requests

    def send_alert_to_all_employee(self, *args, **kwargs):
        #print('all_employee_mail_kwargs:', kwargs)
        last_justification_date = kwargs['last_justification_date']
        user = kwargs['user']
        unjustified_attendance_requests = kwargs['unjustified_attendance_requests']
        '''
            Description: Sms alert for all employees for unjustified request(Grace, HD, FD, MM, etc.).
            Name: Unjustified Request Alert For Employees
            Code: URAFE
            Subject: Alert!!! Unjustified Requests
            Txt content:
                You have total {{ unjustified_attendance_requests }} unjustified requests left. Please justify your attendance deviation 
                with a proper remarks before {{ last_justification_date }}.
            Contain variable:  unjustified_attendance_requests, last_justification_date
        '''
        
        if user.cu_alt_phone_no and len(unjustified_attendance_requests):
            message_data = {
                'unjustified_attendance_requests': unjustified_attendance_requests,
                'last_justification_date': last_justification_date
            }
            
            sms_class = GlobleSmsSendTxtLocal('URAFE',[user.cu_alt_phone_no])
            print('sms_class:',sms_class)
            print('user.cu_alt_phone_no:', user.cu_alt_phone_no)
            unjustified_sms_alert_to_all_employee_task.delay(sms_class=sms_class)
            
            # sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
            # sms_thread.start()

        '''
            Description: Mail alert for all employees for unjustified request(Grace, HD, FD, MM, etc.).
            Name: Unjustified Request Alert For Employees
            Code: URAFE
            Subject: Alert!!! Unjustified Requests
            Html content: 
                You have total {{ unjustified_attendance_requests }} unjustified requests left. Please justify your attendance 
                deviation with a proper remarks before {{ last_justification_date }}.

                Date            Duration Deviation(minutes)
                2019-12-19      34
                2019-12-21      78

            Template variable: unjustified_attendance_requests, last_justification_date
        '''
        
        if user.cu_alt_email_id and len(unjustified_attendance_requests):
            mail_data = {
                'last_justification_date': last_justification_date,
                'unjustified_attendance_requests': unjustified_attendance_requests
            }
            mail_class = GlobleMailSend('URAFE', [user.cu_alt_email_id])
            print('mail_class:', mail_class)
            print('user.cu_alt_email_id', user.cu_alt_email_id)
            
            # mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,))
            # mail_thread.start()
            
        
        return

    def send_alert_to_reporting_head(self, *args, **kwargs):
        print('reporting_mail_kwargs:', kwargs)
        reporting_head = kwargs['reporting_head']
        pending_approval_requests = kwargs['pending_approval_requests']
        last_approval_date = kwargs['last_approval_date']
        half_day = kwargs['half_day']
        full_day = kwargs['full_day']
        grace = kwargs['grace']
        mispunch = kwargs['mispunch']
        week_off = kwargs['week_off']
        off_duty = kwargs['off_duty']
        conveyance = kwargs['conveyance']
        leave = kwargs['leave']
        print('pending_approval_requests length:',len(pending_approval_requests))

        '''
        Description: 
            Sms alert for Reporting Head to approve/reject/release the pending requests(Grace, HD, FD, MM, etc.) 
            requested by team members.
        Name: Pending Approval Request Alert For  Reporting Head
        Code: PRAAFRH
        Subject: Alert!!! Pending Approval Request
        Txt content:
            You have total {{ pending_approval_requests }} pending approval requests left of your team members. 
            Please approve/reject/release the pending request from team attendance with a proper remarks before {{ last_approval_date }}.
        Contain variable:  pending_approval_requests, last_approval_date
        '''
        
        if reporting_head.cu_alt_phone_no and len(pending_approval_requests):
            message_data = {
                'pending_approval_requests': pending_approval_requests,
                'last_approval_date': last_approval_date
            }
            sms_class = GlobleSmsSendTxtLocal('PRAAFRH',[reporting_head.cu_alt_phone_no])
            print('sms_class:',sms_class)
            print('reporting_head.cu_alt_phone_no:', reporting_head.cu_alt_phone_no)
            
            # sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
            # sms_thread.start()
            

        '''
        Description: 
            Mail alert for Reporting Head to approve/reject/release the pending requests(Grace, HD, FD, MM, etc.) 
            requested by team members.
        Name: Pending Approval Request Alert For  Reporting Head
        Code: PRAAFRH
        Subject: Alert!!! Pending Approval Request
        Html content: 
            You have total {{ pending_approval_requests }} pending approval requests left of your team members. 
            Please approve/reject/release the pending request from team attendance with a proper remarks before {{ last_approval_date }}.

            Total requests		{{ pending_approval_requests }}
            Half Day			{{ half_day }}
            Full Day			{{ full_day }}
            Grace				{{ grace }}
            Mispunch			{{ mispunch }}
            Week Off			{{ week_off }}
            Off Duty			{{ off_duty }}
            Conveyance		    {{ conveyance }}
            Leave		        {{ leave }}

        Template variable: pending_approval_requests, last_approval_date, half_day,  full_day, grace, mispunch, week_off, off_duty, conveyance, leave
        '''
        
        if reporting_head.cu_alt_email_id and len(pending_approval_requests):
            mail_data = {
                'pending_approval_requests': pending_approval_requests,
                'last_approval_date': last_approval_date,
                'half_day': half_day,
                'full_day': full_day,
                'grace': grace,
                'mispunch': mispunch,
                'week_off': week_off,
                'off_duty': off_duty,
                'conveyance': conveyance,
                'leave': leave
            }
            mail_class = GlobleMailSend('PRAAFRH', [reporting_head.cu_alt_email_id])
            print('mail_class:', mail_class)
            print('reporting_head.cu_alt_email_id:', reporting_head.cu_alt_email_id)
            
            # mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,))
            # mail_thread.start()
            
        
        return

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        if self.queryset.count():
            if emp_id:
                filter['employee']=emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
            if current_date:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                self.date_range_str = date_range[0]['month_start__date']
                self.date_range_end = date.date()

                if is_previous == 'true':
                    # print("is_previous",is_previous)
                    date = date_range[0]['month_start__date'] - timedelta(days=1)
                    # print("date",date)
                    date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                    # print("is_previous_date_range",date_range)
                    self.date_range_str = date_range[0]['month_start__date']
                    self.date_range_end = date_range[0]['month_end__date']
                # print("date_range",date_range)
            elif month and year:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            
            # print("elf.date_range",date_range)
            if date_range:
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']
            if filter:
                return self.queryset.filter(**filter)
            else:
                return self.queryset
        else:
            # print("ELLSSS", self.queryset)
            return self.queryset.filter(is_deleted=False)

    def get_justifiable_requests(self, request, *args, **kwargs):
        response=super(EmailSMSAlertForRequestApproval,self).get(self, request, args, kwargs)
        emp_id = self.request.query_params.get('emp_id', None)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        date_list_data = []

        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
          
            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)
            date_list_data.append(datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date())
            
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }                  

                    attendance_request_list.append(attendance_request_dict)
            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['is_attendance_request'] = is_attendance_request
            if day_remarks:
                data['day_remarks'] = day_remarks

        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str,self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                # print("day", day)
                new_dict={
                    'id' : None,
                    'date' : day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present' : False,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request":[],
                    "is_late_conveyance":False,
                    "is_late_conveyance_completed":False,
                    "is_deleted":False,
                    "login_time": "",
                    "logout_time": ""
                    }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks']="Not Joined"
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"
                    
                response.data.append(new_dict)

        response.data = self.list_synchronization(list(response.data))

        return response
    
    def last_day_of_month(self,sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        print("sdate",sdate   , edate)

        delta = edate - sdate       # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list

    def list_synchronization(self, list_data: list)-> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis = 0, ascending = True, inplace = True,)
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list,row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data


class EmailSMSAlertForRequestApprovalExcludingPresent(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    serializer_class = EmailSMSAlertForRequestApprovalExcludingPresentSerializer

    @response_with_status
    def get(self, request, *args, **kwargs):
        print('starting...')
        last_justification_date = self.request.query_params.get('last_justification_date', None)
        last_approval_date = self.request.query_params.get('last_approval_date', None)
        send_type = self.request.query_params.get('send_type', None)
        is_test = self.request.query_params.get('is_test', 'yes')
        test_user_id = self.request.query_params.get('test_user_id', None)
        data = list()
        if last_justification_date:
            user_details, today_datetime, date_time_day = self.get_all_active_user()

            calculation_date_time = str(copy.deepcopy(today_datetime).strftime("%d-%m-%Y %H:%M:%S"))
            #::::::::::::::: For All User :::::::::::::::#
            reporting_head_set = set()
            if send_type == 'sms':
                print('user_details', user_details)
                for user in user_details:

                    if is_test == 'yes' and user.cu_user.id != int(test_user_id):
                        continue
                    if user.cu_user.id == 1657:
                        continue

                    print('user:', user.cu_user.id)
                    kwargs['user'] = user
                    kwargs['emp_id'] = user.cu_user.id
                    kwargs['date_time_day'] = date_time_day
                    unjustified_attendance_requests, _ = self.get_unjustified_and_pending_attendance_request(request,
                                                                                                             *args,
                                                                                                             **kwargs)

                    # self.send_alert_to_all_employee(last_justification_date=last_justification_date, user=user, unjustified_attendance_requests=unjustified_attendance_requests)
                    if user.cu_alt_phone_no:
                        user_phone_no = user.cu_alt_phone_no
                    else:
                        user_phone_no = user.cu_phone_no

                    data.append({'user_id': user.cu_user.id, 'user_phone_no': user_phone_no,
                                 'len(unjustified_attendance_requests)': len(unjustified_attendance_requests)})

                    data.append({'user_id': user.cu_user.id, 'user_phone_no': user_phone_no})
                    if user_phone_no and len(unjustified_attendance_requests):
                        
                        #pass
                        # TODO :: Uncomment after testing
                        unjustified_sms_alert_to_all_employee_task.delay(calculation_date_time=calculation_date_time,
                                                                         last_justification_date=last_justification_date,
                                                                         user_phone_no=user_phone_no,
                                                                         unjustified_attendance_requests=unjustified_attendance_requests)
                    # break

                # print(reporting_head_set)
                #::::::::::::::: For Reporting Head :::::::::::::::#
                users_under_reporting_head_list = self.users_under_reporting_head(user_details)
                for reporting_head, users_under_reporting_head in users_under_reporting_head_list.items():
                    # break

                    if is_test == 'yes' and reporting_head.cu_user.id != int(test_user_id):
                        continue

                    if reporting_head.cu_user.id == 1657:
                        continue

                    print('user:', reporting_head.cu_user.id)
                    # print('reporting_head:', reporting_head)
                    # print('users_under_reporting_head:', users_under_reporting_head)

                    pending_approval_requests_list = list()
                    pending_dick = {'grace': 0, 'half_day': 0, 'full_day': 0, 'mispunch': 0, 'week_off': 0,
                                    'off_duty': 0, 'conveyance': 0, 'leave': 0, 'work_from_home':0}
                    for user in users_under_reporting_head:
                        kwargs['user'] = user
                        kwargs['emp_id'] = user.cu_user.id
                        kwargs['date_time_day'] = date_time_day
                        _, pending_approval_requests = self.get_unjustified_and_pending_attendance_request(request,
                                                                                                           *args,
                                                                                                           **kwargs)
                        pending_approval_requests_list.extend(pending_approval_requests)
                        grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave, work_from_home = self.get_pending_requests_and_leave_count(
                            pending_approval_requests)
                        pending_dick['grace'] = pending_dick['grace'] + grace
                        pending_dick['half_day'] = pending_dick['half_day'] + half_day
                        pending_dick['full_day'] = pending_dick['full_day'] + full_day
                        pending_dick['mispunch'] = pending_dick['mispunch'] + mispunch
                        pending_dick['week_off'] = pending_dick['week_off'] + week_off
                        pending_dick['off_duty'] = pending_dick['off_duty'] + off_duty
                        pending_dick['conveyance'] = pending_dick['conveyance'] + conveyance
                        pending_dick['leave'] = pending_dick['leave'] + leave
                        pending_dick['work_from_home'] = pending_dick['work_from_home'] + work_from_home

                    pending_dick[
                        'reporting_head_phone'] = reporting_head.cu_alt_phone_no if reporting_head.cu_alt_phone_no else reporting_head.cu_phone_no
                    pending_dick[
                        'reporting_head_email'] = reporting_head.cu_alt_email_id if reporting_head.cu_alt_email_id else reporting_head.cu_user.email
                    pending_dick['pending_approval_requests'] = pending_approval_requests_list
                    pending_dick['last_approval_date'] = last_approval_date
                    pending_dick['calculation_date_time'] = calculation_date_time
                    # self.send_alert_to_reporting_head(**pending_dick)
                    if pending_dick['reporting_head_phone'] and len(pending_approval_requests_list):
                        # pass
                        # TODO :: Uncomment after testing
                         pending_sms_alert_to_reporting_head.delay(**pending_dick)
                    # break

            if send_type == 'mail':
                for user in user_details:
                	# logger.info('EmailSMSAlertForRequestApprovalExcludingPresent 1 is_test- {0} user id- {1} {2}'.format(is_test, user.cu_user.id, int(test_user_id)))
                    if is_test == 'yes' and user.cu_user.id != int(test_user_id):
                        continue
                    if user.cu_user.id == 1657:
                        continue
                    data.append({'user_id': user.cu_user.id})
                    print('user:', user.cu_user.id)
                    kwargs['user'] = user
                    kwargs['emp_id'] = user.cu_user.id
                    kwargs['date_time_day'] = date_time_day
                    unjustified_attendance_requests, _ = self.get_unjustified_and_pending_attendance_request(request,
                                                                                                             *args,
                                                                                                             **kwargs)
                    if user.cu_alt_email_id:
                        user_email = user.cu_alt_email_id
                    else:
                        user_email = user.cu_user.email
                    my_logger.info('EmailSMSAlertForRequestApprovalExcludingPresent 2 email {0} count {1}'.format(user_email, len(unjustified_attendance_requests)))
                    
                    # self.send_alert_to_all_employee(last_justification_date=last_justification_date, user=user, unjustified_attendance_requests=unjustified_attendance_requests)

                    #data.append({'user_id': user.cu_user.id, 'cu_alt_email_id': user_email})

                    # if user.cu_alt_phone_no and len(unjustified_attendance_requests):
                    #     unjustified_sms_alert_to_all_employee_task.delay(last_justification_date=last_justification_date, user_phone_no=user.cu_alt_phone_no, unjustified_attendance_requests=unjustified_attendance_requests)
                    
                    if user_email and len(unjustified_attendance_requests):
                        pass
                        # data.append({'user_id': user.cu_user.id, 'last_justification_date': last_justification_date,
                        #              'user_email': user_email,
                        #              "len(unjustified_attendance_requests)": len(unjustified_attendance_requests)})

                        # TODO :: Uncomment after testing
                        # unjustified_mail_alert_to_all_employee_task.delay(calculation_date_time=calculation_date_time,
                        #                                                   last_justification_date=last_justification_date,
                        #                                                   user_email=user_email,
                        #                                                   unjustified_attendance_requests=unjustified_attendance_requests)
                                                                          
                    # break

                # print(reporting_head_set)
                #::::::::::::::: For Reporting Head :::::::::::::::#
                users_under_reporting_head_list = self.users_under_reporting_head(user_details)
                #print('user_details',user_details)
                #print('users_under_reporting_head_list',users_under_reporting_head_list)
                for reporting_head, users_under_reporting_head in users_under_reporting_head_list.items():
                    # break

                    if is_test == 'yes' and reporting_head.cu_user.id != int(test_user_id):
                        continue

                    if reporting_head.cu_user.id == 1657:
                        continue

                    print('user:', reporting_head.cu_user.id)
                    # print('reporting_head:', reporting_head)
                    # print('users_under_reporting_head:', users_under_reporting_head)

                    pending_approval_requests_list = list()
                    pending_dick = {'grace': 0, 'half_day': 0, 'full_day': 0, 'mispunch': 0, 'week_off': 0,
                                    'off_duty': 0, 'conveyance': 0, 'leave': 0, 'work_from_home':0}
                    user_deviation_list = list()
                    for user in users_under_reporting_head:
                        kwargs['user'] = user
                        kwargs['emp_id'] = user.cu_user.id
                        kwargs['date_time_day'] = date_time_day
                        _, pending_approval_requests = self.get_unjustified_and_pending_attendance_request(request,
                                                                                                           *args,
                                                                                                           **kwargs)
                        pending_approval_requests_list.extend(pending_approval_requests)
                        grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave, work_from_home = self.get_pending_requests_and_leave_count(
                            pending_approval_requests)

                        # user_deviation_list.append({
                        #     'name':user.cu_user.get_full_name(),
                        #     'half_day':half_day,
                        #     'full_day': full_day,
                        #     'off_duty': off_duty,
                        #     'leave': leave,
                        #     'work_from_home': work_from_home})
                        pending_dick['grace'] = pending_dick['grace'] + grace
                        pending_dick['half_day'] = pending_dick['half_day'] + half_day
                        pending_dick['full_day'] = pending_dick['full_day'] + full_day
                        pending_dick['mispunch'] = pending_dick['mispunch'] + mispunch
                        pending_dick['week_off'] = pending_dick['week_off'] + week_off
                        pending_dick['off_duty'] = pending_dick['off_duty'] + off_duty
                        pending_dick['conveyance'] = pending_dick['conveyance'] + conveyance
                        pending_dick['leave'] = pending_dick['leave'] + leave
                        pending_dick['work_from_home'] = pending_dick['work_from_home'] + work_from_home

                    pending_dick['reporting_head_phone'] = reporting_head.cu_alt_phone_no if reporting_head.cu_alt_phone_no else reporting_head.cu_phone_no
                    pending_dick['reporting_head_email'] = reporting_head.cu_alt_email_id if reporting_head.cu_alt_email_id else reporting_head.cu_user.email
                    pending_dick['pending_approval_requests'] = pending_approval_requests_list
                    pending_dick['last_approval_date'] = last_approval_date
                    pending_dick['calculation_date_time'] = calculation_date_time
                    # self.send_alert_to_reporting_head(**pending_dick)
                    # if reporting_head.cu_alt_phone_no and len(pending_approval_requests_list):
                    #     pending_sms_alert_to_reporting_head.delay(**pending_dick)
                    #print('pending_dick',pending_dick)
                    #print('pending_approval_requests_list',pending_approval_requests_list)
                    #data.append(user_deviation_list)
                    if pending_dick['reporting_head_email'] and len(pending_approval_requests_list):
                        # pass
                        #data.append({**pending_dick, 'len(pending_approval_requests_list)':len(pending_approval_requests_list)})
                        # TODO :: Uncomment after testing
                        pending_mail_alert_to_reporting_head.delay(**pending_dick)
                    #break

        return data

    def get_pending_requests_and_leave_count(self, pending_approval_requests):
        grace = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'GR'),pending_approval_requests)))
        half_day = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'HD'),pending_approval_requests)))
        full_day = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'FD'),pending_approval_requests)))
        mispunch = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'MP'),pending_approval_requests)))
        week_off = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'WO'),pending_approval_requests)))
        off_duty = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['request_type'] == 'OD' or x['request_type'] == 'FOD' or x['request_type'] == 'POD')),pending_approval_requests)))
        conveyance = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['is_late_conveyance'] or x['is_conveyance'])), pending_approval_requests)))
        leave = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and (x['leave_type'] == 'EL' or x['leave_type'] == 'CL' or x['leave_type'] == 'SL' or x['leave_type'] == 'AB' or x['leave_type'] == 'AL')),
                                pending_approval_requests)))
        work_from_home = len(list(filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending' and x['request_type'] == 'WFH'), pending_approval_requests)))
        return grace, half_day, full_day, mispunch, week_off, off_duty, conveyance, leave, work_from_home

    def users_under_reporting_head(self, user_details):
        users_under_reporting_head_list = collections.defaultdict(set)
        for user in user_details:
            if user.reporting_head:
                users_under_reporting_head_list[TCoreUserDetail.objects.get(cu_user=user.reporting_head)].add(user)
        return users_under_reporting_head_list

    def get_all_active_user(self):
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()
        user_details = TCoreUserDetail.objects.filter(~Q(
            (
                Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    Q(mmr_type=1) | Q(mmr_type=6) | Q(mmr_is_deleted=True)).values_list('mmr_user', flat=True))
            ) |
            (Q(cu_punch_id='#N/A')) |
            (Q(attendance_type='PMS')|Q(attendance_type='CRM')|Q(attendance_type='Manual'))|
            (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee', flat=True)))
        ),
                                                      (
                                                              Q(
                                                                  Q(termination_date__isnull=False) & Q(
                                                                      Q(
                                                                          Q(
                                                                              termination_date__year=today_datetime.year) & Q(
                                                                              termination_date__month=today_datetime.month)
                                                                      ) |
                                                                      Q(termination_date__date__gte=date_time_day)
                                                                  )
                                                              ) |
                                                              Q(Q(termination_date__isnull=True))
                                                      ),
                                                      (Q(user_type__in=('User', 'Housekeeper'))),
                                                      #(Q(cu_user_id=1872)), # TODO :: Comment after testing
                                                      (Q(joining_date__date__lte=date_time_day)), cu_is_deleted=False)

        print('Total_user', len(user_details))
        return user_details, today_datetime, date_time_day

    def get_unjustified_and_pending_attendance_request(self, request, *args, **kwargs):
        # print('kwargs:',kwargs)
        self.request.query_params._mutable = True
        self.request.query_params['emp_id'] = kwargs['emp_id']
        self.request.query_params['current_date'] = self.request.query_params.get('current_date', str(
            kwargs['date_time_day']))  # '2019-12-21'
        self.request.query_params['is_previous'] = False
        self.request.query_params._mutable = False
        response = self.get_justifiable_requests(request, args, kwargs)
        request_approval_daily_list = response.data
        filtered_attendance_requests = list()
        for arl in request_approval_daily_list:
            if len(arl['attendance_request']):
                filtered_attendance_requests.extend(arl['attendance_request'])
        # print('User:',kwargs['user'].cu_user.id)
        # print('len of requests approval:', len(filtered_attendance_requests))

        unjustified_attendance_requests = list(filter(lambda x: not x['is_requested'], filtered_attendance_requests))
        print('len of unjustified requests approval:', len(unjustified_attendance_requests))

        pending_approval_requests = list(
            filter(lambda x: (x['is_requested'] and x['approved_status'] == 'pending'), filtered_attendance_requests))
        print('len of pending requests approval:', len(pending_approval_requests))

        return unjustified_attendance_requests, pending_approval_requests

    def send_alert_to_all_employee(self, *args, **kwargs):
        # print('all_employee_mail_kwargs:', kwargs)
        last_justification_date = kwargs['last_justification_date']
        user = kwargs['user']
        unjustified_attendance_requests = kwargs['unjustified_attendance_requests']
        '''
            Description: Sms alert for all employees for unjustified request(Grace, HD, FD, MM, etc.).
            Name: Unjustified Request Alert For Employees
            Code: URAFE
            Subject: Alert!!! Unjustified Requests
            Txt content:
                You have total {{ unjustified_attendance_requests }} unjustified requests left. Please justify your attendance deviation 
                with a proper remarks before {{ last_justification_date }}.
            Contain variable:  unjustified_attendance_requests, last_justification_date
        '''

        if user.cu_alt_phone_no and len(unjustified_attendance_requests):
            message_data = {
                'unjustified_attendance_requests': unjustified_attendance_requests,
                'last_justification_date': last_justification_date
            }

            sms_class = GlobleSmsSendTxtLocal('URAFE', [user.cu_alt_phone_no])
            print('sms_class:', sms_class)
            print('user.cu_alt_phone_no:', user.cu_alt_phone_no)
            unjustified_sms_alert_to_all_employee_task.delay(sms_class=sms_class)

            # sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
            # sms_thread.start()

        '''
            Description: Mail alert for all employees for unjustified request(Grace, HD, FD, MM, etc.).
            Name: Unjustified Request Alert For Employees
            Code: URAFE
            Subject: Alert!!! Unjustified Requests
            Html content: 
                You have total {{ unjustified_attendance_requests }} unjustified requests left. Please justify your attendance 
                deviation with a proper remarks before {{ last_justification_date }}.

                Date            Duration Deviation(minutes)
                2019-12-19      34
                2019-12-21      78

            Template variable: unjustified_attendance_requests, last_justification_date
        '''

        if user.cu_alt_email_id and len(unjustified_attendance_requests):
            mail_data = {
                'last_justification_date': last_justification_date,
                'unjustified_attendance_requests': unjustified_attendance_requests
            }
            mail_class = GlobleMailSend('URAFE', [user.cu_alt_email_id])
            print('mail_class:', mail_class)
            print('user.cu_alt_email_id', user.cu_alt_email_id)

            # mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,))
            # mail_thread.start()

        return

    def send_alert_to_reporting_head(self, *args, **kwargs):
        print('reporting_mail_kwargs:', kwargs)
        reporting_head = kwargs['reporting_head']
        pending_approval_requests = kwargs['pending_approval_requests']
        last_approval_date = kwargs['last_approval_date']
        half_day = kwargs['half_day']
        full_day = kwargs['full_day']
        grace = kwargs['grace']
        mispunch = kwargs['mispunch']
        week_off = kwargs['week_off']
        off_duty = kwargs['off_duty']
        conveyance = kwargs['conveyance']
        leave = kwargs['leave']
        print('pending_approval_requests length:', len(pending_approval_requests))

        '''
        Description: 
            Sms alert for Reporting Head to approve/reject/release the pending requests(Grace, HD, FD, MM, etc.) 
            requested by team members.
        Name: Pending Approval Request Alert For  Reporting Head
        Code: PRAAFRH
        Subject: Alert!!! Pending Approval Request
        Txt content:
            You have total {{ pending_approval_requests }} pending approval requests left of your team members. 
            Please approve/reject/release the pending request from team attendance with a proper remarks before {{ last_approval_date }}.
        Contain variable:  pending_approval_requests, last_approval_date
        '''

        if reporting_head.cu_alt_phone_no and len(pending_approval_requests):
            message_data = {
                'pending_approval_requests': pending_approval_requests,
                'last_approval_date': last_approval_date
            }
            sms_class = GlobleSmsSendTxtLocal('PRAAFRH', [reporting_head.cu_alt_phone_no])
            print('sms_class:', sms_class)
            print('reporting_head.cu_alt_phone_no:', reporting_head.cu_alt_phone_no)

            # sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
            # sms_thread.start()

        '''
        Description: 
            Mail alert for Reporting Head to approve/reject/release the pending requests(Grace, HD, FD, MM, etc.) 
            requested by team members.
        Name: Pending Approval Request Alert For  Reporting Head
        Code: PRAAFRH
        Subject: Alert!!! Pending Approval Request
        Html content: 
            You have total {{ pending_approval_requests }} pending approval requests left of your team members. 
            Please approve/reject/release the pending request from team attendance with a proper remarks before {{ last_approval_date }}.

            Total requests		{{ pending_approval_requests }}
            Half Day			{{ half_day }}
            Full Day			{{ full_day }}
            Grace				{{ grace }}
            Mispunch			{{ mispunch }}
            Week Off			{{ week_off }}
            Off Duty			{{ off_duty }}
            Conveyance		    {{ conveyance }}
            Leave		        {{ leave }}

        Template variable: pending_approval_requests, last_approval_date, half_day,  full_day, grace, mispunch, week_off, off_duty, conveyance, leave
        '''

        if reporting_head.cu_alt_email_id and len(pending_approval_requests):
            mail_data = {
                'pending_approval_requests': pending_approval_requests,
                'last_approval_date': last_approval_date,
                'half_day': half_day,
                'full_day': full_day,
                'grace': grace,
                'mispunch': mispunch,
                'week_off': week_off,
                'off_duty': off_duty,
                'conveyance': conveyance,
                'leave': leave
            }
            mail_class = GlobleMailSend('PRAAFRH', [reporting_head.cu_alt_email_id])
            print('mail_class:', mail_class)
            print('reporting_head.cu_alt_email_id:', reporting_head.cu_alt_email_id)

            # mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,))
            # mail_thread.start()

        return

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        # queryset_without_deviation = self.queryset.filter(Q(date__date__gte=datetime.strptime('2020-10-26', "%Y-%m-%d"))
        #                             &Q(date__date__lte=datetime.strptime('2020-11-08', "%Y-%m-%d")), login_time__isnull=True)
        #
        # queryset_with_deviation = self.queryset.filter(Q(date__date__gte=datetime.strptime('2020-11-09', "%Y-%m-%d"))
        #                             &Q(date__date__lte=datetime.strptime('2020-11-25', "%Y-%m-%d")))
        #
        # queryset = queryset_without_deviation | queryset_with_deviation

        queryset = self.queryset
        print(queryset.count())

        if queryset.count():
            if emp_id:
                filter['employee'] = emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
            if current_date:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,
                                                                  month_end__date__gte=date).values('month_start__date',
                                                                                                    'month_end__date')
                # self.date_range_str = date_range[0]['month_start__date']
                # self.date_range_end = date.date()
                setattr(self, 'date_range_str',date_range[0]['month_start__date'])
                setattr(self, 'date_range_end', date.date())

                if is_previous == 'true':
                    # print("is_previous",is_previous)
                    date = date_range[0]['month_start__date'] - timedelta(days=1)
                    # print("date",date)
                    date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,
                                                                      month_end__date__gte=date).values(
                        'month_start__date', 'month_end__date')
                    # print("is_previous_date_range",date_range)
                    self.date_range_str = date_range[0]['month_start__date']
                    self.date_range_end = date_range[0]['month_end__date']
                # print("date_range",date_range)
            elif month and year:
                date_range = AttendenceMonthMaster.objects.filter(month=month, month_end__year=year).values(
                    'month_start__date', 'month_end__date')
                # print("date_range",date_range)

            # print("elf.date_range",date_range)
            if date_range:
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']
            if filter:
                return queryset.filter(**filter)
            else:
                return queryset
        else:
            # print("ELLSSS", self.queryset)
            return queryset.filter(is_deleted=False)

    def get_justifiable_requests(self, request, *args, **kwargs):
        response = super(EmailSMSAlertForRequestApprovalExcludingPresent, self).get(self, request, args, kwargs)
        emp_id = self.request.query_params.get('emp_id', None)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        date_list_data = []
        my_logger.info('get_justifiable_requests response.data {0}'.format(len(response.data)))

        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None

            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)
            date_list_data.append(datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date())

            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'], is_deleted=False)
            my_logger.info('get_justifiable_requests attendance_request {0} {1}'.format(data['id'], attendance_request.count()))
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave (' + att_req.leave_type_changed + ')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave (' + att_req.leave_type + ')'
                elif att_req.approved_status == 'approved' and att_req.request_type == 'FOD':
                    day_remarks = 'OD'

                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                if att_req.is_late_conveyance == False and att_req.checkin_benchmark == False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False
                    attendance_request_dict = {
                        'id': att_req.id,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'duration': att_req.duration,
                        'request_type': att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested': att_req.is_requested,
                        'request_date': att_req.request_date,
                        'justification': att_req.justification,
                        'approved_status': att_req.approved_status,
                        'remarks': att_req.remarks,
                        'justified_by': att_req.justified_by_id,
                        'justified_at': att_req.justified_at,
                        'approved_by': att_req.approved_by_id,
                        'approved_at': att_req.approved_at,
                        'leave_type': att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance': att_req.is_late_conveyance,
                        'vehicle_type': att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id': att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance': att_req.is_conveyance,
                        'from_place': att_req.from_place,
                        'to_place': att_req.to_place,
                        'conveyance_expense': att_req.conveyance_expense,
                        'approved_expenses': att_req.approved_expenses,
                        'conveyance_remarks': att_req.conveyance_remarks,
                        'leave_type_changed': att_req.leave_type_changed,
                        'leave_type_changed_period': att_req.leave_type_changed_period,
                        'checkin_benchmark': att_req.checkin_benchmark,
                        'lock_status': att_req.lock_status,
                        'conveyance_purpose': att_req.conveyance_purpose,
                        'conveyance_alloted_by': att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name': (
                                                          att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " + (
                                                          att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }

                    attendance_request_list.append(attendance_request_dict)
            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['is_attendance_request'] = is_attendance_request
            if day_remarks:
                data['day_remarks'] = day_remarks

        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str, self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                # print("day", day)
                new_dict = {
                    'id': None,
                    'date': day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present': False,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request": [],
                    "is_late_conveyance": False,
                    "is_late_conveyance_completed": False,
                    "is_deleted": False,
                    "login_time": "",
                    "logout_time": ""
                }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks'] = "Not Joined"
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"

                response.data.append(new_dict)

        response.data = self.list_synchronization(list(response.data))

        return response

    def last_day_of_month(self, sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        print("sdate", sdate, edate)

        delta = edate - sdate  # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list

    def list_synchronization(self, list_data: list) -> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis=0, ascending=True, inplace=True, )
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list, row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data


class CwsReportView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(employee__is_active=True,is_deleted=False)
    serializer_class = CwsReportSerializer

    # @response_with_status
    def get(self, request, *args, **kwargs):
        reporting_date = self.request.query_params.get('reporting_date', None)
        year = self.request.query_params.get('year', None)
        month = self.request.query_params.get('month', None)
        data = list()
        if reporting_date or (year and month):
            user_details, today_datetime, date_time_day = self.get_cws_user()
            if not reporting_date:
                reporting_date = '{}-{}-{}'.format(year, month.zfill(2),'01')
            print('user_details',user_details)
            print('reporting_date:', reporting_date)
            pwh = shwh = ewh = 0
            data.append({'Employee Name':str(datetime.strptime(reporting_date, "%Y-%m-%d").date().strftime("%b, %Y")),'Day Prsnt': '', 'Sun Day': '', 'Holiday': '', 'Day abst': '', 'Nor Late': '', 'Too Late': '', 'Wrst Late': '', 'Total working Hour excluding Sunday/Holiday': '', 'Total Sun/Holiday Working Hrs': '', 'Extra hours': '', 'Total Early Departure By': ''})
            data.append({'Employee Name':'Employee Name','Day Prsnt': 'Day Prsnt', 'Sun Day': 'Sun Day', 'Holiday': 'Holiday', 'Day abst': 'Day abst', 'Nor Late': 'Nor Late', 'Too Late': 'Too Late', 'Wrst Late': 'Wrst Late', 'Total working Hour excluding Sunday/Holiday': 'Total working Hour excluding Sunday/Holiday', 'Total Sun/Holiday Working Hrs': 'Total Sun/Holiday Working Hrs', 'Extra hours': 'Extra hours', 'Total Early Departure By': 'Total Early Departure By'})
            for user in user_details:
                kwargs['user'] = user
                kwargs['emp_id'] = user.cu_user.id
                kwargs['date_time_day'] = reporting_date
                cws_attendance_list = self.get_attendance_request(request, *args, **kwargs)
                present, sunday, absent, holiday = self.get_status_report(cws_attendance_list)
                normal_late, too_late, worst_late, early_departure = self.get_normal_too_worst_late_and_early_departure(present, user)
                present_working_hours, pwh_hm, sunday_holiday_working_hours, shwh_hm, extra_working_hours, ewh_hm = self.get_present_sunday_holiday_extra_hours(present, sunday, holiday)
                pwh += present_working_hours
                shwh += sunday_holiday_working_hours
                ewh += extra_working_hours
                data.append({'Employee Name': user.cu_user.get_full_name(),'Day Prsnt': len(present), 'Sun Day': len(sunday), 'Holiday': len(holiday), 'Day abst': len(absent), 'Nor Late': len(normal_late), 'Too Late': len(too_late), 'Wrst Late': len(worst_late), 'Total working Hour excluding Sunday/Holiday': pwh_hm, 'Total Sun/Holiday Working Hrs': shwh_hm, 'Extra hours': ewh_hm, 'Total Early Departure By': len(early_departure)})
                # break
            
            data.append({'Employee Name': '','Day Prsnt': '', 'Sun Day': '', 'Holiday': '', 'Day abst': '', 'Nor Late': '', 'Too Late': '', 'Wrst Late': 'Total:', 'Total working Hour excluding Sunday/Holiday': self.from_minutes_to_hours_minutes(pwh), 'Total Sun/Holiday Working Hrs': self.from_minutes_to_hours_minutes(shwh), 'Extra hours': self.from_minutes_to_hours_minutes(ewh), 'Total Early Departure By': ''})
            df_report = pd.DataFrame.from_records(data)
            
            file_name,file_path = self.create_file_path(reporting_date)
            df_report.to_csv (file_name, index = None, header=False, columns=['Employee Name', 'Day Prsnt', 'Sun Day', 'Holiday', 'Day abst', 'Nor Late', 'Too Late', 'Wrst Late', 'Total working Hour excluding Sunday/Holiday', 'Total Sun/Holiday Working Hrs', 'Extra hours', 'Total Early Departure By'])
            
            url = getHostWithPort(request) + file_path if file_path else None

        return Response({'url':url, 'results': data, 'request_status':1, 'msg': settings.MSG_SUCCESS})

    def create_file_path(self, reporting_date):
        if os.path.isdir('media/attendance/cws_report'):
            file_name = 'media/attendance/cws_report/{}.csv'.format(reporting_date)
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/cws_report')
            file_name = 'media/attendance/cws_report/{}.csv'.format(reporting_date)
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        return (file_path, file_name)

    def present_working_hours_calculation_old(self, attendance_details):
        user = TCoreUserDetail.objects.get(cu_user=attendance_details['emp_id'])
        default_login_time = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_loginTime)
        default_logout_time = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_logoutTime)
        lunch_start = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.lunch_start)
        lunch_end = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.lunch_end)
        
        total_minutes = (default_logout_time - default_login_time).seconds/60
        lunch_minutes = (lunch_end - lunch_start).seconds/60
        working_minutes = total_minutes - lunch_minutes
        for deviation in attendance_details['attendance_request']:
            duration_start = deviation['duration_start']
            duration_end = deviation['duration_end']
            if duration_start < lunch_start < duration_end or duration_start < lunch_end < duration_end:
                if duration_start < lunch_start < duration_end:
                    working_minutes = working_minutes - (duration_start - lunch_start).seconds/60
                if duration_start < lunch_end < duration_end:
                    working_minutes = working_minutes - (lunch_start - duration_end).seconds/60
            else:
                working_minutes = working_minutes - deviation['duration']
        
        return working_minutes

    def present_working_hours_calculation(self, attendance_details):
        user = TCoreUserDetail.objects.get(cu_user=attendance_details['emp_id'])
        
        total_minutes = (datetime.strptime(attendance_details['logout_time'], "%Y-%m-%dT%H:%M:%S") - datetime.strptime(attendance_details['login_time'], "%Y-%m-%dT%H:%M:%S")).seconds/60
        lunch_minutes = user.launch_hour if user.launch_hour else 0
        working_minutes = total_minutes - lunch_minutes
        print(attendance_details['emp_id'], attendance_details['date'], lunch_minutes, working_minutes)
        return working_minutes

    def sunday_holiday_working_hours_calculation(self, attendance_details):
        working_minutes = 0
        if attendance_details['login_time'] and attendance_details['logout_time']:
            working_minutes = (datetime.strptime(attendance_details['logout_time'], "%Y-%m-%dT%H:%M:%S") - datetime.strptime(attendance_details['login_time'], "%Y-%m-%dT%H:%M:%S")).seconds/60
        return working_minutes

    def present_extra_hours_calculation(self, attendance_details):
        from datetime import time
        user = TCoreUserDetail.objects.get(cu_user=attendance_details['emp_id'])
        daily_login_time = datetime.strptime(attendance_details['login_time'], "%Y-%m-%dT%H:%M:%S")
        daily_logout_time = datetime.strptime(attendance_details['logout_time'], "%Y-%m-%dT%H:%M:%S")
        default_login_time = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_loginTime)
        default_logout_time = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_logoutTime)
        default_saturday_logout = datetime.combine(datetime.strptime(attendance_details['date'], "%Y-%m-%dT%H:%M:%S").date(), user.saturday_logout if user.saturday_logout else time(16, 00, 00))
        working_minutes = 0
        if daily_login_time < default_login_time:
            working_minutes += (default_login_time - daily_login_time).seconds/60
        
        if default_login_time.weekday() is 5:
            if daily_logout_time > default_saturday_logout:
                working_minutes += (daily_logout_time - default_saturday_logout).seconds/60
        else:
            if daily_logout_time > default_logout_time:
                working_minutes += (daily_logout_time - default_logout_time).seconds/60

        return working_minutes

    def from_minutes_to_hours_minutes(self, munites):
        h = divmod(munites, 60)
        hm = '{} Hours {} Minutes'.format(round(h[0]), round(h[1]))
        return hm

    def get_present_sunday_holiday_extra_hours(self, present, sunday, holiday):
        extra_working_hours = 0
        present_working_hours = sum(list(map(self.present_working_hours_calculation, present)))
        pwh_hm = self.from_minutes_to_hours_minutes(present_working_hours)

        sunday_holiday = copy.deepcopy(sunday)
        sunday_holiday.extend(holiday)
        sunday_holiday_working_hours = sum(list(map(self.sunday_holiday_working_hours_calculation, sunday_holiday)))
        shwh_hm = self.from_minutes_to_hours_minutes(sunday_holiday_working_hours)

        extra_working_hours = sum(list(map(self.present_extra_hours_calculation, present)))
        ewh_hm = self.from_minutes_to_hours_minutes(extra_working_hours)
        return present_working_hours, pwh_hm, sunday_holiday_working_hours, shwh_hm, extra_working_hours, ewh_hm

    def get_normal_too_worst_late_and_early_departure(self, present, user):
        from datetime import time
        normal_late = list(filter(lambda x: datetime.strptime(x['login_time'], "%Y-%m-%dT%H:%M:%S").time() > user.daily_loginTime and datetime.strptime(x['login_time'], "%Y-%m-%dT%H:%M:%S").time() <= (datetime.combine(datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_loginTime)+timedelta(minutes=30)).time(), present))
        too_late = list(filter(lambda x: datetime.strptime(x['login_time'], "%Y-%m-%dT%H:%M:%S").time() <= user.worst_late and datetime.strptime(x['login_time'], "%Y-%m-%dT%H:%M:%S").time() > (datetime.combine(datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").date(), user.daily_loginTime)+timedelta(minutes=30)).time(), present))
        worst_late = list(filter(lambda x: datetime.strptime(x['login_time'], "%Y-%m-%dT%H:%M:%S").time() > user.worst_late, present))

        print('user.saturday_logout',user.saturday_logout)
        print('time(16, 00, 00)', time(16, 00, 00))
        user_saturday_logout = user.saturday_logout if user.saturday_logout else time(16, 00, 00)
        early_departure = list(filter(lambda x: (datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").weekday() is 5 and datetime.strptime(x['logout_time'], "%Y-%m-%dT%H:%M:%S").time() < user_saturday_logout) or (datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").weekday() is not 5 and datetime.strptime(x['logout_time'], "%Y-%m-%dT%H:%M:%S").time() < user.daily_logoutTime), present))
        return normal_late, too_late, worst_late, early_departure

    def get_status_report(self, cws_attendance_list):
        present = list(filter(lambda x: (x['is_present'] and datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").weekday() is not 6), cws_attendance_list))
        sunday = list(filter(lambda x: datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").weekday() is 6, cws_attendance_list))
        absent = list(filter(lambda x: not x['is_present'] and datetime.strptime(x['date'], "%Y-%m-%dT%H:%M:%S").weekday() is not 6 and not x['is_holiday'], cws_attendance_list))
        holiday = list(filter(lambda x: x['is_holiday'], cws_attendance_list))
        return present, sunday, absent, holiday

    def get_attendance_request(self, request, *args, **kwargs):
        # print('kwargs:',kwargs)
        self.request.query_params._mutable = True
        self.request.query_params['emp_id'] = kwargs['emp_id']
        self.request.query_params['current_date'] = str(kwargs['date_time_day'])
        self.request.query_params['is_previous'] = False
        self.request.query_params._mutable = False
        
        response = self.get_justifiable_requests(request, *args, **kwargs)
        return response.data

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        if self.queryset.count():
            if emp_id:
                filter['employee']=emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
            # if current_date:
            #     date = datetime.strptime(current_date, "%Y-%m-%d")
            #     date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
            #     self.date_range_str = date_range[0]['month_start__date']
            #     self.date_range_end = date.date()

            #     if is_previous == 'true':
            #         # print("is_previous",is_previous)
            #         date = date_range[0]['month_start__date'] - timedelta(days=1)
            #         # print("date",date)
            #         date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
            #         # print("is_previous_date_range",date_range)
            #         self.date_range_str = date_range[0]['month_start__date']
            #         self.date_range_end = date_range[0]['month_end__date']
            #     # print("date_range",date_range)
            # elif month and year:
            #     date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
            #     # print("date_range",date_range)
            
            # # print("elf.date_range",date_range)
            # if date_range:
            #     filter['date__date__gte'] = date_range[0]['month_start__date']
            #     filter['date__date__lte'] = date_range[0]['month_end__date']
    
            date = current_date.split('-')
            _, last_date = calendar.monthrange(int(date[0]),int(date[1])) # 2020-02-25
            month_start = '{}-{}-{}'.format(date[0], date[1], 1)
            month_end = '{}-{}-{}'.format(date[0], date[1], last_date)
            print('month_start:', month_start)
            print('month_end:', month_end)
            self.date_range_str = datetime.strptime(month_start, "%Y-%m-%d").date()
            self.date_range_end = datetime.strptime(month_end, "%Y-%m-%d").date()
            filter['date__date__gte'] = month_start
            filter['date__date__lte'] = month_end
            if filter:
                return self.queryset.filter(**filter)
            else:
                return self.queryset
        else:
            # print("ELLSSS", self.queryset)
            return self.queryset.filter(is_deleted=False)

    def get_justifiable_requests(self, request, *args, **kwargs):
        response=super(CwsReportView,self).get(self, request, args, kwargs)
        emp_id = self.request.query_params.get('emp_id', None)
        # print("response.data['results']",response.data)
        user_emp = TCoreUserDetail.objects.get(cu_user=emp_id)
        holiday_date = HolidayStateMapping.objects.filter(state=user_emp.job_location_state)
        attendance_request_dict = {}
        date_list_data = []
        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)

            data['emp_id'] = emp_id
            holiday_exist = holiday_date.filter(holiday__holiday_date=datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date()).count()
            #print(data['date'], holiday_exist)
            data['is_holiday'] = datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").weekday() is not 6 and holiday_exist
            
            date_list_data.append(datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date())
            
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                if att_req.leave_type_changed is not None:
                    day_remarks = 'Leave ('+att_req.leave_type_changed+')'
                elif att_req.leave_type_changed is None and att_req.leave_type is not None:
                    day_remarks = 'Leave ('+att_req.leave_type+')'
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'
                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }                  

                    attendance_request_list.append(attendance_request_dict)
            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['is_attendance_request'] = is_attendance_request
            if day_remarks:
                data['day_remarks'] = day_remarks
            
        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str,self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                holiday_exist = holiday_date.filter(holiday__holiday_date=day).count()
                new_dict={
                    'id' : None,
                    'emp_id': emp_id,
                    'date': day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present' : False,
                    'is_holiday': day.weekday() is not 6 and holiday_exist,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request":[],
                    "is_late_conveyance":False,
                    "is_late_conveyance_completed":False,
                    "is_deleted":False,
                    "login_time": "",
                    "logout_time": ""
                    }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks']="Not Joined"
                        if (datetime.strptime(new_dict['date'], "%Y-%m-%dT%H:%M:%S").weekday() is not 6 and datetime.strptime(new_dict['date'], "%Y-%m-%dT%H:%M:%S").date in holiday_date):
                            data['is_holiday'] = True
                        else:
                            data['is_holiday'] = False
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"
                    
                response.data.append(new_dict)
            

        response.data = self.list_synchronization(list(response.data))
        return response
    
    def last_day_of_month(self,sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        print("sdate",sdate   , edate)

        delta = edate - sdate       # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list

    def list_synchronization(self, list_data: list)-> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis = 0, ascending = True, inplace = True,)
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list,row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data

    def get_cws_user(self):
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()
        user_details = TCoreUserDetail.objects.filter(~Q(
                (   
                    Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                )|
                (Q(cu_punch_id='#N/A'))|
                (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
            ),
            (
                Q(
                    Q(termination_date__isnull=False)&Q(
                        Q(
                            Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                        )|
                        Q(termination_date__date__gte=date_time_day)
                    )
                )|
                Q(Q(termination_date__isnull=True))
            ),
            (Q(user_type='Housekeeper')),
            (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False)
        return user_details, today_datetime, date_time_day

class AttendanceUsers(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request, *args, **kwargs):
        user_details=TMasterModuleRoleUser.objects.\
                        filter(
                            Q(mmr_user__in=(TCoreUserDetail.objects.filter(
                                ~Q(cu_punch_id='#N/A'),
                                user_type__in=('User','Housekeeper'),cu_is_deleted=False).values_list('cu_user',flat=True))),
                            Q(mmr_type=3),
                            Q(mmr_is_deleted=False),
                            Q(mmr_module__cm_name='ATTENDANCE & HRMS')).values_list('mmr_user',flat=True).distinct()
            
        print('user_details',len(user_details))
        return Response({'user_length':len(user_details)})


class UserLeaveReport(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False, is_requested=True)
    serializer_class = UserLeaveReportSerializer

    def get(self, request, *args, **kwargs):
        data_list = list()
        error_list = list()
        data_dict = dict()
        query_set = self.get_queryset()
        user_details, today_datetime, date_time_day = self.get_user()
        # print(query_set[0])
        
        # import tqdm # ProgressBar
        # pbar = tqdm.tqdm(total=user_details.count()) # ProgressBar
        for user in user_details:
            monthly_leave = self.monthly_leave_calculation_by_user(total_aproval_request=query_set, user=user)
            data_list.append(monthly_leave)
            # if error_monthly_leave['cl_error'] or error_monthly_leave['el_error'] or error_monthly_leave['sl_error']:
            #     error_list.append(error_monthly_leave)
            # pbar.update(1) # ProgressBar
            # break
        # pbar.close() # ProgressBar

        df_report = pd.DataFrame.from_records(data_list)
        file_name = self.create_file_path(str(date_time_day))
        df_report.to_csv (file_name, index = None)
        
        url = getHostWithPort(request) + file_name if file_name else None
        return Response({'url': url, 'results': data_list, 'request_status':1, 'msg': settings.MSG_SUCCESS})

    def create_file_path(self, reporting_date):
        if os.path.isdir('media/attendance/leave_report'):
            file_name = 'media/attendance/leave_report/{}.csv'.format(reporting_date)
        else:
            os.makedirs('media/attendance/leave_report')
            file_name = 'media/attendance/leave_report/{}.csv'.format(reporting_date)
        return file_name

    def get_months_from_master(self):
        month_master = AttendenceMonthMaster.objects.filter(is_deleted=False).filter(
                                                            Q(
                                                                Q(month_start__date__gte=self.start_date_time.date())&
                                                                Q(month_end__date__lte=self.end_date_time.date())
                                                            )|
                                                            Q(
                                                                Q(month_start__date__lte=self.end_date_time.date())&
                                                                Q(month_end__date__gte=self.end_date_time.date())
                                                            )
                                                        )
        return month_master

    def monthly_leave_calculation_by_user(self, total_aproval_request=None, user=None):
        monthly_leave = OrderedDict(name=user.cu_user.get_full_name())
        user_aproval_request = total_aproval_request.filter(attendance__employee_id=user.cu_user.id)
        # print('user_aproval_request:', user_aproval_request)

        month_master = self.get_months_from_master()
        # print('month_count:',len(month_master))

        monthly_leave['total_leave (el, cl, sl)'] = [0,0,0]
        last_month = month_master.count()-1
        for i, month in enumerate(month_master):
            user_aproval_request_per_month = user_aproval_request.filter(Q(attendance_date__gte=month.month_start.date())&Q(attendance_date__lte=month.month_end.date()))
            el, cl, sl = self.leave_calculation(user_aproval_request=user_aproval_request_per_month)
            
            # print('before:',"el: {}, cl: {}, sl: {}".format(el, cl, sl))
            el = int(el) if el.is_integer() else el
            cl = int(cl) if cl.is_integer() else cl
            sl = int(sl) if sl.is_integer() else sl
            # print('after', "el: {}, cl: {}, sl: {}".format(el, cl, sl))

            if i == 0:
                # print('i == 0:', i)
                month_date_format = '{} to {} (el, cl, sl)'.format(self.start_date_time.strftime("%d %b,%y"), month.month_end.strftime("%d %b,%y"))
                monthly_leave[month_date_format] = "{:>6},{:>6},{:>6}".format(el, cl, sl)
            elif i == last_month:
                # print('i == last_month:', i)
                month_date_format = '{} to {} (el, cl, sl)'.format(month.month_start.strftime("%d %b,%y"), self.end_date_time.strftime("%d %b,%y"))
                monthly_leave[month_date_format] = "{:>6},{:>6},{:>6}".format(el, cl, sl)
            else:
                # print('else:', i)
                month_date_format = '{} to {} (el, cl, sl)'.format(month.month_start.strftime("%d %b,%y"), month.month_end.strftime("%d %b,%y"))
                monthly_leave[month_date_format] = "{:>6},{:>6},{:>6}".format(el, cl, sl)

            monthly_leave['total_leave (el, cl, sl)'] = [monthly_leave['total_leave (el, cl, sl)'][0] + el, monthly_leave['total_leave (el, cl, sl)'][1] + cl, monthly_leave['total_leave (el, cl, sl)'][2] + sl]
        
        tel = int(monthly_leave['total_leave (el, cl, sl)'][0]) if isinstance(monthly_leave['total_leave (el, cl, sl)'][0], float) and monthly_leave['total_leave (el, cl, sl)'][0].is_integer() else  monthly_leave['total_leave (el, cl, sl)'][0]
        tcl = int(monthly_leave['total_leave (el, cl, sl)'][1]) if isinstance(monthly_leave['total_leave (el, cl, sl)'][1], float) and monthly_leave['total_leave (el, cl, sl)'][1].is_integer() else  monthly_leave['total_leave (el, cl, sl)'][1]
        tsl = int(monthly_leave['total_leave (el, cl, sl)'][2]) if isinstance(monthly_leave['total_leave (el, cl, sl)'][2], float) and monthly_leave['total_leave (el, cl, sl)'][2].is_integer() else  monthly_leave['total_leave (el, cl, sl)'][2]

        total_availed_leave = tcl + tel + tsl
        if user.joining_date> month_master[0].year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user.id,is_deleted=False).values('cl', 'el', 'sl',
                                                                                                                'year', 'month',
                                                                                                                'first_grace')
            if approved_leave:
                granted_cl = float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0)
                cl_balance = granted_cl -float(tcl)
                granted_el = float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 )
                el_balance = granted_el -float(tel)
                granted_sl = float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 )
                sl_balance = granted_sl -float(tsl)
                total_granted_leave = granted_cl + granted_el + granted_sl
                total_leave_balances = cl_balance + el_balance + sl_balance
        else:
            granted_cl = float(user.granted_cl)
            cl_balance = granted_cl - float(tcl)
            granted_el = float(user.granted_el)
            el_balance = granted_el - float(tel)
            granted_sl = float(user.granted_sl)
            sl_balance = granted_sl - float(tsl)
            total_granted_leave = granted_cl + granted_el + granted_sl
            total_leave_balances = cl_balance + el_balance + sl_balance


        monthly_leave['total_leave (el, cl, sl)'] = "{:>6}/{},{:>6}/{},{:>6}/{}".format(tel, int(granted_el), tcl, int(granted_cl), tsl, int(granted_sl))
        
        # error_monthly_leave = copy.deepcopy(monthly_leave)    
        # error_monthly_leave['el_error'] = 1 if tel > int(granted_el) else 0
        # error_monthly_leave['cl_error'] = 1 if tcl > int(granted_cl) else 0
        # error_monthly_leave['sl_error'] = 1 if tsl > int(granted_sl) else 0

        return monthly_leave

    def leave_calculation(self, user_aproval_request=None, start_date=None, end_date=None):
        ####Monthly GR request date count##########################

        monthly_availed_hd_cl=0.0
        monthly_availed_hd_el=0.0
        monthly_availed_hd_sl=0.0
        monthly_availed_hd_ab=0.0
        monthly_availed_cl=0.0
        monthly_availed_el=0.0
        monthly_availed_sl=0.0
        monthly_availed_ab=0.0

        attendence_daily_data = user_aproval_request.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                            ).values('duration_start__date').distinct()

        # print("attendence_daily_data",attendence_daily_data)
        month_date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        # print("month_date_list",month_date_list)
        # for data in attendence_daily_data.iterator():
            # print(datetime.now())
        availed_master_wo_reject_fd = user_aproval_request.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance_date__in=month_date_list).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        # print("availed_master_wo_reject_fd",availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:

            for data in month_date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                # print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            monthly_availed_ab=monthly_availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            monthly_availed_cl=monthly_availed_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            monthly_availed_cl=monthly_availed_cl+1.0
                        elif l_type == 'EL':
                            monthly_availed_el=monthly_availed_el+1.0
                        elif l_type == 'SL':
                            monthly_availed_sl=monthly_availed_sl+1.0
                        elif l_type == 'AB':
                            monthly_availed_ab=monthly_availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            monthly_availed_hd_ab=monthly_availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            monthly_availed_hd_cl=monthly_availed_hd_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            monthly_availed_hd_cl=monthly_availed_hd_cl+1.0
                        elif l_type == 'EL':
                            monthly_availed_hd_el=monthly_availed_hd_el+1.0
                        elif l_type == 'SL':
                            monthly_availed_hd_sl=monthly_availed_hd_sl+1.0
                        elif l_type == 'AB':
                            monthly_availed_hd_ab=monthly_availed_hd_ab+1.0
       

        cl = float(monthly_availed_cl)+float(monthly_availed_hd_cl/2)
        el = float(monthly_availed_el)+float(monthly_availed_hd_el/2)
        sl = float(monthly_availed_sl)+float(monthly_availed_hd_sl/2)

        # if core_user_detail[0]['joining_date']>total_month_grace[0]['year_start_date']:
        #     approved_leave=JoiningApprovedLeave.objects.filter(employee=employee_id,is_deleted=False).values('cl', 'el', 'sl',
        #                                                                                                         'year', 'month',
        #                                                                                                         'first_grace')
        #     if approved_leave:
        #         total_grace['granted_cl']=approved_leave[0]['cl']
        #         total_grace['cl_balance']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) -float(total_grace['yearly_availed_cl'])
        #         total_grace['granted_el']=approved_leave[0]['el']
        #         total_grace['el_balance']=float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 ) -float(total_grace['yearly_availed_el'])
        #         total_grace['granted_sl']=approved_leave[0]['sl']
        #         total_grace['sl_balance']=float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) -float(total_grace['yearly_availed_sl'])
        #         total_grace['total_granted_leave']=float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0) + float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0) + float(approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0)
        #         total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['yearly_total_availed_leave'])
        #         if total_month_grace[0]['month']==approved_leave[0]['month']:    #for joining month only
        #             total_grace['total_month_grace']=approved_leave[0]['first_grace']
        #             total_grace['month_start']=core_user_detail[0]['joining_date']
        #             total_grace['grace_balance']=total_grace['total_month_grace'] - total_grace['availed_grace']
        # else:
        #     total_grace['granted_cl']=core_user_detail[0]['granted_cl']
        #     total_grace['cl_balance']=float(core_user_detail[0]['granted_cl']) - float(total_grace['yearly_availed_cl'])
        #     total_grace['granted_el']=core_user_detail[0]['granted_el']
        #     total_grace['el_balance']=float(core_user_detail[0]['granted_el']) - float(total_grace['yearly_availed_el'])
        #     total_grace['granted_sl']=core_user_detail[0]['granted_sl']
        #     total_grace['sl_balance']=float(core_user_detail[0]['granted_sl']) - float(total_grace['yearly_availed_sl'])
        #     total_grace['total_granted_leave']=float(core_user_detail[0]['granted_cl']) + float(core_user_detail[0]['granted_el']) + float(core_user_detail[0]['granted_sl'])
        #     total_grace['total_leave_balances']=float(total_grace['total_granted_leave']) - float(total_grace['yearly_total_availed_leave'])


        return el, cl, sl

    def leave_calculation_old(self, user_aproval_request=None, start_date=None, end_date=None):
        el_hd = user_aproval_request.filter(leave_type='EL',request_type='HD').values('attendance_date').distinct().count()
        cl_hd = user_aproval_request.filter(leave_type='CL',request_type='HD').values('attendance_date').distinct().count()
        sl_hd = user_aproval_request.filter(leave_type='SL',request_type='HD').values('attendance_date').distinct().count()
        
        el_fd = user_aproval_request.filter(leave_type='EL',request_type='FD').values('attendance_date').distinct().count()
        cl_fd = user_aproval_request.filter(leave_type='CL',request_type='FD').values('attendance_date').distinct().count()
        sl_fd = user_aproval_request.filter(leave_type='SL',request_type='FD').values('attendance_date').distinct().count()
        print('cl_hd:', cl_hd, user_aproval_request.filter(leave_type='CL',request_type='HD'))
        print('cl_fd:', cl_fd, user_aproval_request.filter(leave_type='CL',request_type='FD'))
        return el_fd+el_hd/2, cl_fd+cl_hd/2, sl_fd+sl_hd/2

    def get_queryset(self):
        start_date = self.request.query_params.get('start_date', '2019-04-01')
        end_date = self.request.query_params.get('end_date', str(datetime.now().date()))
        start_date_time = datetime.strptime(start_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")
        end_date_time = datetime.strptime(end_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")

        setattr(self, 'start_date_time', start_date_time)
        setattr(self, 'end_date_time', end_date_time)

        print(self.start_date_time.date(), 'to', self.end_date_time.date())

        queryset = self.queryset.filter(
                                            Q(
                                                Q(attendance_date__gte=start_date_time.date())&Q(attendance_date__lte=end_date_time.date())
                                            )&
                                            Q(
                                                Q(leave_type='EL')|Q(leave_type='CL')|Q(leave_type='SL')
                                            )&
                                            (Q(approved_status='pending')|Q(approved_status='approved'))
                                        )
        return queryset

    def get_user(self):
        # user_type = self.request.query_params.get('user_type', 'all')
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()
        user_details = TCoreUserDetail.objects.filter(~Q(
                (   
                    Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                )|
                (Q(cu_punch_id='#N/A'))|
                (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
            ),
            (
                Q(
                    Q(termination_date__isnull=False)&Q(
                        Q(
                            Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                        )|
                        Q(termination_date__date__gte=date_time_day)
                    )
                )|
                Q(Q(termination_date__isnull=True))
            ),
            # Q(cu_user=50),
            (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False)
        return user_details, today_datetime, date_time_day


#########################################################################################################################################
class AttendanceFileUploadForSFT(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadSerializer
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        host_url = getHostWithPort(request)
        print('host_url',host_url)
        url = response.data['document'].replace(host_url,'./')
        # print("url", url)
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()

        '''
        Skip the first few rows and read the excel after this rows in pandas
        '''
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns
        #############################################################################################
        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        ##############################################################################################
        day = data.get('Date')[0]
        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(~Q(
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                joining_date__date__lte=date_time_day,is_flexi_hour=True,cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            # time.sleep(10) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            user_check_list = [x['is_flexi_hour']  for x in user_details]

            # return Response({'result':{'request_status':user_check_list,'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count, user['cu_user_id'])
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            state_obj = TCoreUserDetail.objects.get(cu_user__id=cu_user_id).job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                '''
                    filtering the AttendenceSaturdayOffMaster to get the off saturday.
                    all_s_day :: All Saturday off
                '''
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id

            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)

                    pre_att_filter['employee_id'] = cu_user_id
                    pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None and pre_att_filter:  
                        pre_att = self.att_create(pre_att_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list:
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list:
                                check_out = 0
                                pre_req_filter['duration_end'] = date_time_format
                                duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)

                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)

            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                daily_duration = round(((logout_time-pre_att.login_time).seconds)/60)
                request_duration=AttendanceApprovalRequest.objects.filter(attendance=pre_att.id
                                                                        ).aggregate(Sum('duration'))['duration__sum']
                request_duration = request_duration if request_duration else 0
                print("request_duration",daily_duration,  request_duration)
                total_work_duration = daily_duration-request_duration
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time,total_work_duration=total_work_duration)
                print("pre_att_update",type(pre_att_update),  pre_att_update)
                

        ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')

                if leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']=leave[0]['leave_type']
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    att_filter['total_work_duration'] = 0
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)

                        if adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['approved_status'] = 'approved'
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            abs_req = self.request_create(req_filter)
                            # abs_check = self.absent_checking(req_filter)
                            # print("abs_req",abs_req, req_filter)


        return Response({'result':{'request_status':1,'msg':'Successful'}})


class TestDBView(APIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request, *args, **kwargs):
        import os
        import platform
        import pyodbc

        # print('os name',os.name)
        # print('platform',platform.system())
        # print('platform',platform.release())

        if platform.system() == "Linux":

            dsn = 'sqlserverdatasource'
            user = 'attendance_user'
            password = 'Attendance@123456'
            database = 'ssil_attendance_file_upload'
            con_string = 'DSN=%s;UID=%s;PWD=%s;DATABASE=%s;' % (dsn, user, password, database)
            conn = pyodbc.connect(con_string)

        elif platform.system() == "Windows":

            driver = '{SQL Server}'
            server = '192.168.24.212'
            db1 = 'ssil_attendance_file_upload'
            uname = 'attendance_user'
            pword = 'Attendance@123456'
            conn = pyodbc.connect(driver='{SQL Server}', host=server, database=db1, user=uname, password=pword)


       



        #print('cfdgdfgdfg')
        #import pyodbc

        # for own mechine

        # conn = pyodbc.connect('Driver={SQL Server};'
        # 'Server=IT-RUPAM\SQLEXPRESS;'
        # 'Database=test_db_for_attendance;'
        # 'Trusted_Connection=yes;')


        # for another mechine.(Sujash Sengupta's Mechine)
        
        # conn = pyodbc.connect('Driver={SQL Server};'
        # 'Server=192.168.24.212;'
        # 'Database=ssil_attendance_file_upload;'
        # 'uid=attendance_user;pwd=Attendance@123456;'
        # )

        cursor = conn.cursor()
        cursor.execute('SELECT TOP 100 * FROM ssil_attendance_file_upload.dbo.attendance_generate_tbl ORDER BY convert(date, Date_Status) DESC')

        ## Get the fields name (only once!)
        columns = [column[0] for column in cursor.description]

        data_list = list()
        for i, row in enumerate(cursor.fetchall()):
            if i !=0:
                ## Combine column with value in dict
                data = dict(zip(columns, row))

                # Convert datetime format
                data['Date_Status_convert'] =  datetime.strptime(data['Date_Status'],"%b %d %Y %H:%M%p") #"Feb 28 2020 12:00AM"
                
                # Extract date
                data['Date'] =  str(data['Date_Status_convert'])[0:10]

                # Formatting Date
                data['Date'] = datetime.strptime(data['Date'], '%Y-%m-%d').strftime('%d/%m/%Y')

                 # Convert datetime format
                data['Time_Status_convert'] =  datetime.strptime(data['Time_Status'],"%b %d %Y %H:%M%p") #"Feb 28 2020 12:00AM"

                # Extract Time
                data['Time'] =  str(data['Time_Status'])[13:]
                data['Time'] =  str(data['Time_Status'])[13:]
                data['Time_for_update'] =str(data['Time_Status'])[13:]
                
                data_list.append(data)
             

        return Response({'result':data_list})


class AttendanceFileUploadV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadSerializerV2
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        

    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        url = getPathFromMediaURL(response.data['document'])
        
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()

        '''
        Skip the first few rows and read the excel after this rows in pandas
        '''
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns
        #############################################################################################
        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        ##############################################################################################
        day = data.get('Date')[0]
        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(
                 ~Q(
                    # (   
                    #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    # )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                #(Q(cu_user__in=[3187])),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            #time.sleep(30) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            #user_check_list = [x['cu_user_id']  for x in user_details]



            #return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                '''
                    filtering the AttendenceSaturdayOffMaster to get the off saturday.
                    all_s_day :: All Saturday off
                '''
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True

                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None:                      
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            '''
                            TODO :: Previous benchmark time was 30 min.
                            1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
                            and this can be taken 3 days in a month.
                            '''
                            bench_time = daily_login + timedelta(minutes=15)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                bench_filter['attendance']=pre_att
                                bench_filter['attendance_date'] = daily_login.date()
                                bench_filter['duration_start']=daily_login
                                bench_filter['duration_end']=pre_att_filter['login_time']
                                bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                bench_filter['punch_id'] = cu_punch_id
                                if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                    grace_over = True
                                print('grace_over:', grace_over)
                    
                                print("bench_time>pre_att_filter['login_time']:", bench_time>pre_att_filter['login_time'])
                                print('user:', tcore_user.cu_user.get_full_name())
                                # time.sleep(5)
                                if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                    bench_filter['checkin_benchmark']=True
                                    bench_filter['is_requested']=True
                                else:
                                    bench_filter['checkin_benchmark']=False

                                if bench_filter['duration']>0:
                                    bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                if date_time_format>daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start']<daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True

                                '''
                                    Deviation duration calculation.
                                '''
                                if lunch_end < pre_req_filter['duration_start']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_end']:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                    duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                    duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0:
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None   
                spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']= 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60)
                        
                        if spl_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']                            

                        elif adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            abs_req = self.request_create(req_filter)
                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result':{'request_status':1, 'msg':'Successful', 'file_path': url}})


class AttendanceFileUploadFlexiHourV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        
    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        url = getPathFromMediaURL(response.data['document'])
        wb = None
        try:
            wb = xlrd.open_workbook(url)
        except Exception as ex:
            return Response({'result':{'request_status':'{0}'.format(ex), 'msg':'Failed', 'path': url}})

        if wb:
            sh = wb.sheet_by_index(0)
        else:
            return Response({'result':{'request_status':'Read error', 'msg':'Failed', 'path': url}})


        '''
        Skip the first few rows and read the excel after this rows in pandas
        '''
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns
        #############################################################################################
        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        ##############################################################################################
        day = data.get('Date')[0]

        #day = datetime.now().strftime('%d/%m/%Y')
        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(
                 ~Q(
                    # (   
                    #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    # )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                #(Q(cu_user__in=[3187])),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            #time.sleep(30) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            #user_check_list = [x['cu_user_id']  for x in user_details]



            #return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                '''
                    filtering the AttendenceSaturdayOffMaster to get the off saturday.
                    all_s_day :: All Saturday off
                '''
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True

                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True

            for index, row in data.iterrows():
                #print('row',row)
                # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
                date_time = str(row['Date'])+'T'+str(row['Time'])
                date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
                #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
                #print('rowEmpid',type(row['Empid']),row['Empid'])
                if cu_punch_id == row['Empid']:
                    user_flag = 1
                    ##################### Added By Rupam #######################
                    deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
                        # print("current_device",current_device)
                    ##################### END ###################################
                    pre_att_filter['employee_id'] = cu_user_id
                    # pre_att_filter['day_remarks'] = 'Present'
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    
                    pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour # fh
                    
                    # print("pre_att_filter",pre_att_filter)

                    ##First time log in a Day##Successful
                    if pre_att is None:                      
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            '''
                            TODO :: Previous benchmark time was 30 min.
                            1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
                            and this can be taken 3 days in a month.
                            '''
                            bench_time = daily_login + timedelta(minutes=15)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                bench_filter['attendance']=pre_att
                                bench_filter['attendance_date'] = daily_login.date()
                                bench_filter['duration_start']=daily_login
                                bench_filter['duration_end']=pre_att_filter['login_time']
                                bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                bench_filter['punch_id'] = cu_punch_id
                                if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                    grace_over = True
                                print('grace_over:', grace_over)
                    
                                print("bench_time>pre_att_filter['login_time']:", bench_time>pre_att_filter['login_time'])
                                print('user:', tcore_user.cu_user.get_full_name())
                                # time.sleep(5)
                                if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                    bench_filter['checkin_benchmark']=True
                                    bench_filter['is_requested']=True
                                else:
                                    bench_filter['checkin_benchmark']=False

                                if bench_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                    bench_req = self.request_create(bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                if date_time_format>daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start']<daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True

                                '''
                                    Deviation duration calculation.
                                '''
                                if tcore_user.is_flexi_hour: # fh
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                else:
                                    if lunch_end < pre_req_filter['duration_start']:
                                        duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_end']:
                                        duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                        duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                        duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                        duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None   
                spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']= 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login 
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60) if not tcore_user.is_flexi_hour else None
                        
                        if spl_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']                            

                        elif adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            if tcore_user.is_flexi_hour:
                                if spl_leave_type or adv_leave_type:
                                    abs_req = self.request_create(req_filter)
                            else:
                                abs_req = self.request_create(req_filter)
                            
                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result':{'request_status':1,'msg':'Successful', 'path': url}})

# added by Shubhadeep for FRS attendance file upload
class AttendanceFRSFileUploadFlexiHourV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    parser_classes = (MultiPartParser,)

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance

    def request_create(self, user, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        # automatic approve if the user is removed from hrms
        if user.cu_is_deleted == True and user.cu_user.is_active == False:
            filter['request_type'] = 'FD'
            filter['leave_type'] = 'AB'
            filter['is_requested'] = True
            filter['request_date'] = datetime.now()
            
            filter['justification'] = 'Auto Absent'
            filter['remarks'] = 'Auto Absent'
            filter['justified_by_id'] = logdin_user_id
            filter['justified_at'] = datetime.now()

            filter['approved_status'] = 'approved'
            filter['approved_by_id'] = logdin_user_id
            filter['approved_at'] = datetime.now()
            
        request, create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        
    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # added flag to prevent deletion of last entry
        delete_last = self.request.query_params.get('delete_last', True)
        print("Please wait, delete_last is ", delete_last)
        # --
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        url = getPathFromMediaURL(response.data['document'])
        print(url)
        wb = None
        try:
            wb = xlrd.open_workbook(url)
        except Exception as ex:
            return Response({'result':{'request_status':'{0}'.format(ex), 'msg':'Failed', 'path': url}})

        if wb:
            sh = wb.sheet_by_index(0)
        else:
            return Response({'result':{'request_status':'Read error', 'msg':'Failed', 'path': url}})

        '''
        Read data from the first row
        '''
        data = pd.read_excel(url)
        '''
        Exit device list & device_id in list form
        '''
        device_no_list = list(DeviceMaster.objects.filter(is_exit=True, is_deleted=False).values_list('id', flat=True))
        print("device_no_list", device_no_list)
        # 08-09-2020  10:25:33 AM
        day = data.get('Time')[0].strftime('%d/%m/%Y')
        print ('day', day)
        if day:
            today_datetime = datetime.strptime(str(day) + 'T' + '12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            
            if delete_last:
                '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
                '''
                lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
                if lase_attendance:
                    print('delete_data',lase_attendance[0].__dict__['id'])
                    AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                    AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                    Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(
                 ~Q(
                    # (   
                    #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    # )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                #(Q(cu_user__in=[3187])),
                (Q(joining_date__date__lte=date_time_day))).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            #time.sleep(30) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            #user_check_list = [x['cu_user_id']  for x in user_details]



            #return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            sap_personnel_no = user['sap_personnel_no'] if user['sap_personnel_no'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            no_request = False
            day_remarks = ''
            if tcore_user.cu_is_deleted == False and tcore_user.cu_user.is_active == True:
                if holiday:
                    # holiday_name = holiday[0]["holiday_name"]
                    day_remarks = holiday[0]["holiday__holiday_name"]
                    no_request = True
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    day_remarks = special_full_day[0]["remarks"]
                    no_request = True
                elif date_time_day.weekday()==6:
                    # print("Sunday")
                    day_remarks = "Sunday"
                    no_request = True

                if date_time_day.weekday()==5 and no_request is False:
                    ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                    '''
                        filtering the AttendenceSaturdayOffMaster to get the off saturday.
                        all_s_day :: All Saturday off
                    '''
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                        'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            day_remarks = 'Saturday'
                            saturday_off = True

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True

                        # print("Saturday")

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id, is_deleted=False).values('first_grace')
                    if total_grace.count() > 0:
                        grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                        print("grace_available AAAA", grace_available, cu_user_id)
                    else:
                        raise Exception('User {0} has no entry in JoiningApprovedLeave table'.format(cu_user_id))

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True

            for index, row in data.iterrows():
                date_time_format = row['Time']
                print('cu_punch_id_type', type(cu_punch_id), cu_punch_id)
                print('sap_personnel_no', sap_personnel_no)
                person_id = row['Person ID'].replace("'", "")
                if sap_personnel_no == person_id:
                    user_flag = 1
                    deviceMasterDetails = DeviceMaster.objects.filter(frs_check_point=row['Attendance Check Point'])
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(frs_check_point=row['Attendance Check Point'])
                        print("current_device", current_device)

                    pre_att_filter['employee_id'] = cu_user_id
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    
                    pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour 

                    if pre_att is None:                      
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            '''
                            TODO :: Previous benchmark time was 30 min.
                            1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
                            and this can be taken 3 days in a month.
                            '''
                            bench_time = daily_login + timedelta(minutes=15)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
                                bench_filter['attendance']=pre_att
                                bench_filter['attendance_date'] = daily_login.date()
                                bench_filter['duration_start']=daily_login
                                bench_filter['duration_end']=pre_att_filter['login_time']
                                bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
                                bench_filter['punch_id'] = cu_punch_id
                                if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
                                    grace_over = True
                                print('grace_over:', grace_over)
                    
                                print("bench_time>pre_att_filter['login_time']:", bench_time>pre_att_filter['login_time'])
                                print('user:', tcore_user.cu_user.get_full_name())
                                # time.sleep(5)
                                if bench_time>pre_att_filter['login_time'] and grace_over is False:
                                    bench_filter['checkin_benchmark']=True
                                    bench_filter['is_requested']=True
                                else:
                                    bench_filter['checkin_benchmark']=False

                                if bench_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                    bench_req = self.request_create(tcore_user, bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                if date_time_format>daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start']<daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True

                                '''
                                    Deviation duration calculation.
                                '''
                                if tcore_user.is_flexi_hour: # fh
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                else:
                                    if lunch_end < pre_req_filter['duration_start']:
                                        duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_end']:
                                        duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
                                        duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
                                        duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
                                    elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
                                        duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    pre_req_filter['duration']=duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(tcore_user, pre_req_filter)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(tcore_user, late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(tcore_user, late_con_filter)
                            # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None   
                spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']= 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time_format.strftime('%d/%m/%Y') + 'T' + str(daily_loginTime)
                    date_time_date = datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login 
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60) if not tcore_user.is_flexi_hour else None
                        
                        if spl_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']                            

                        elif adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            if tcore_user.is_flexi_hour:
                                if spl_leave_type or adv_leave_type:
                                    abs_req = self.request_create(tcore_user, req_filter)
                            else:
                                abs_req = self.request_create(tcore_user, req_filter)
                            
                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result':{'request_status':1, 'msg':'Successful', 'path': url}})

class AttendanceFRSFileUploadFlexiHourV2Temporary(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    parser_classes = (MultiPartParser,)

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance

    def request_create(self, user, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        # automatic approve if the user is removed from hrms
        if user.cu_is_deleted == True and user.cu_user.is_active == False:
            filter['request_type'] = 'FD'
            filter['leave_type'] = 'AB'
            filter['is_requested'] = True
            filter['request_date'] = datetime.now()
            
            filter['justification'] = 'Auto Absent'
            filter['remarks'] = 'Auto Absent'
            filter['justified_by_id'] = logdin_user_id
            filter['justified_at'] = datetime.now()

            filter['approved_status'] = 'approved'
            filter['approved_by_id'] = logdin_user_id
            filter['approved_at'] = datetime.now()
        
        request, create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        
    def post(self, request, *args, **kwargs):
        
        response = super().post(request,*args,**kwargs)
        # added flag to prevent deletion of last entry
        delete_last = self.request.query_params.get('delete_last','0')
        file_upload = self.request.query_params.get('file_upload',None)
        employee_id = self.request.query_params.get('employee_id',None)
        
        start_date = self.request.query_params.get('start_date', None)
        try:
            start_object = datetime.strptime(str(start_date) + 'T' + '12:00:00', "%d/%m/%YT%H:%M:%S")
            print(type(start_object))
            print(start_object)
        except:
            pass
        end_date = self.request.query_params.get('end_date', None)
        try:
            end_object = datetime.strptime(str(end_date)+ 'T' + '12:00:00', "%d/%m/%YT%H:%M:%S")
            print(type(end_object))
            print(end_object)
        except:
            pass

    


        print("Please wait, delete_last is ", delete_last)
        # --
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        if (file_upload == "1"):
            url = getPathFromMediaURL(response.data['document'])
            wb = None
            try:
                wb = xlrd.open_workbook(url)
            except Exception as ex:
                return Response({'result':{'request_status':'{0}'.format(ex), 'msg':'Failed', 'path': url}})
            if wb:
                sh = wb.sheet_by_index(0)
            else:
                return Response({'result':{'request_status':'Read error', 'msg':'Failed', 'path': url}})

            '''
            Read data from the first row
            '''
            data = pd.read_excel(url)
            # 08-09-2020  10:25:33 AM
            attendance_date = datetime.strptime(str(data.get('Time')[0].strftime('%d/%m/%Y')) + 'T' + '12:00:00', "%d/%m/%YT%H:%M:%S")
            print("attendance_date", attendance_date)
            rows = data.iterrows()
            # Person ID                                                      '10200269
            # Name                                            Uma Prasad Bhattacharyya
            # Department                                   Shyam Steel Industries Ltd.
            # Time                                                 2020-12-01 09:14:38
            # Attendance Status                                                   None
            # Attendance Check Point    Gr. Floor Entrance_Door1_Entrance Card Reader1
            # Data Source                                             Original Records
            # Handling Type                                                          -
            # Temperature                                                            -
            # Abnormal
            raw_count = AttendanceFRSRawData.objects.filter(attendance_date=attendance_date).count()
            print ('raw_count', raw_count)
            if raw_count == 0:
                for i, row in rows:
                    AttendanceFRSRawData.objects.create(person_id=row['Person ID'], 
                                                        name=row['Name'],department=row['Department'],
                                                        time=datetime.strptime(str(row['Time']),"%Y-%m-%d %H:%M:%S"),
                                                        attendance_status = str(row['Attendance Status']),
                                                        attendance_check_point=row['Attendance Check Point'],
                                                        data_source=str(row['Data Source']),
                                                        handling_type=str(row['Handling Type']),
                                                        temperature=str(row['Temperature']),
                                                        attendance_date=attendance_date)
                print(data)
                print(attendance_date)
                print(delete_last)    
            return self.process_rows(attendance_date, data, delete_last, url)
        else:
            day_count = (end_object - start_object).days + 1
            for attendance_date in [d for d in (start_object + timedelta(n) for n in range(day_count)) if d <= end_object]:
                filter = dict()
                if employee_id:
                    emp_id = int(employee_id)
                attendence_changes = TCoreUserDetail.objects.filter(id=emp_id).values_list('sap_personnel_no')
                filter['attendance_date'] = attendance_date
                data1= pd.DataFrame(list(AttendanceFRSRawData.objects.filter(person_id__icontains=attendence_changes[0][0],**filter).values('person_id', 'name', 'department','time','attendance_status','attendance_check_point','data_source','handling_type','temperature','attendance_date')))
                data= data1.rename(columns={'person_id':'Person ID', 'name':'Name','department':'Department','time':'Time','attendance_status':'Attendance Status','attendance_check_point' :'Attendance Check Point','data_source' :'Data Source','handling_type' :'Handling Type','temperature':'Temperature'})
                last_attendance = Attendance.objects.filter(date__date=attendance_date,employee=emp_id)
                print('delete_data',last_attendance)
                if last_attendance:
                    print('delete_data',last_attendance[0].__dict__['id'])
                    is_locked = AttendanceApprovalRequest.objects.filter(attendance=last_attendance[0].__dict__['id']).values_list('lock_status')
                    print(is_locked[0][0])
                    if is_locked[0][0] == False :
                        AttendanceApprovalRequest.objects.filter(attendance=last_attendance[0].__dict__['id']).delete()
                        AttendanceLog.objects.filter(attendance=last_attendance[0].__dict__['id']).delete()
                        Attendance.objects.filter(id=last_attendance[0].__dict__['id']).delete()
                    else:
                        continue
                # print(data)
                # print(attendance_date)
                # print(delete_last)
            return self.process_rows(attendance_date, data, delete_last)

    def get_userDetails(self,date_time_day):
        termination_start_day = month_master.month_start
        termination_end_day = get_last_day_of_month(month_master.month_end)
        user_details = TCoreUserDetail.objects.filter(
            ~Q(
                (Q(cu_punch_id='#N/A'))|
                (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
            ),
            (
                Q(
                    Q(termination_date__isnull=False) & Q(
                        Q(
                            Q(termination_date__gte=termination_start_day)&Q(termination_date__lte=termination_end_day)
                        )|
                        Q(termination_date__date__gte=date_time_day)
                    )
                )
                |Q(Q(termination_date__isnull=True),cu_is_deleted=False)
            ),
            #(Q(cu_user__in=[3187])),
            attendance_type='HRMS',
            joining_date__date__lte=date_time_day
            ).values() ##avoid 'PMSSITE000','#N/A' punch ids

        return user_details

    def process_rows(self, attendance_date, data, delete_last , url=None):
        '''
        Exit device list & device_id in list form
        '''
        device_no_list = list(DeviceMaster.objects.filter(is_exit=True, is_deleted=False).values_list('id', flat=True))
        today_datetime = attendance_date
        date_time_day = today_datetime.date()
        late_convence_limit = today_datetime.replace(hour=20, minute=30)
        
        if delete_last == '1':
            '''
            Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()
            
        '''
            << Avoid attendance >>
            IF User is Demo_user or Super_user
            IF Punch id is ('PMSSITE000','#N/A','')
            IF User had already Attendance for this day.
        '''
        # logic??? what is the filter logic for except avoid attendence?
        '''
            1. Check If the user is terminated and termination date entered before termination date. 
            2. Check if the user joining date is less than entered date.
        '''
        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=date_time_day,
                                                    month_end__date__gte=date_time_day,is_deleted=False).first()
        
        print("month_master:", month_master)

        # termination_start_day = month_master.month_start
        # termination_end_day = get_last_day_of_month(month_master.month_end)

        user_details = self.get_userDetails(date_time_day)

        #print('Total_user',len(user_details))
        #time.sleep(30) # logic??? Wait to check the user_count.
        user_count = len(user_details) if user_details else 0
        #user_check_list = [x['cu_user_id']  for x in user_details]



        #return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        minutes_goal, ignore_minutes_goal, deviation_duration = 8.5 * 60, False, 0
        if today_datetime.weekday() == 6:
            ignore_minutes_goal = True
            print ('ignore_minutes_goal', ignore_minutes_goal)
        else:
            if special_day: 
                special_loginTime = special_day[0]['day_start_time__time']
                special_logoutTime = special_day[0]['day_end_time__time']
                print ('special day', special_loginTime, special_logoutTime)

                if special_loginTime and special_logoutTime:
                    minutes_goal = round((((datetime.combine(mydate.min, special_logoutTime) - datetime.combine(mydate.min, special_loginTime)).seconds) - (30 * 60)) / 60)
                
            if not special_day and today_datetime.weekday() == 5:
                minutes_goal = 5.5 * 60
            print ('minutes_goal', minutes_goal)
            
        for user in user_details:
            user_count = user_count-1
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            login_time = None
            logout_time = None
            pre_req_list = []

            total_deviation = 0
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            sap_personnel_no = user['sap_personnel_no'] if user['sap_personnel_no'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')

            # print('holiday',holiday)
            # print("special_full_day",special_full_day)
            # print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            no_request = False
            day_remarks = ''
            if tcore_user.cu_is_deleted == False and tcore_user.cu_user.is_active == True:
                if holiday:
                    # holiday_name = holiday[0]["holiday_name"]
                    day_remarks = holiday[0]["holiday__holiday_name"]
                    no_request = True
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    day_remarks = special_full_day[0]["remarks"]
                    no_request = True
                elif date_time_day.weekday()==6:
                    # print("Sunday")
                    day_remarks = "Sunday"
                    no_request = True

                if date_time_day.weekday()==5 and no_request is False:
                    ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                    '''
                        filtering the AttendenceSaturdayOffMaster to get the off saturday.
                        all_s_day :: All Saturday off
                    '''
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                        'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    # print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            day_remarks = 'Saturday'
                            saturday_off = True

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                            if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                                day_remarks='Saturday'
                                saturday_off = True

                        # print("Saturday")

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                # print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                # print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id, is_deleted=False).values('first_grace')
                    if total_grace.count() > 0:
                        grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                        # print("grace_available AAAA", grace_available, cu_user_id)
                    else:
                        raise Exception('User {0} has no entry in JoiningApprovedLeave table'.format(cu_user_id))

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            # print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True
            
            for index, row in data.iterrows():
                date_time_format = row['Time']
                # print('cu_punch_id_type', type(cu_punch_id), cu_punch_id)
                # print('sap_personnel_no', sap_personnel_no)
                person_id = row['Person ID'].replace("'", "")
                if sap_personnel_no == person_id:
                    user_flag = 1
                    deviceMasterDetails = DeviceMaster.objects.filter(frs_check_point=row['Attendance Check Point'])
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(frs_check_point=row['Attendance Check Point'])
                        # print("current_device", current_device)

                    pre_att_filter['employee_id'] = cu_user_id
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format
                    
                    pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour 

                    if pre_att is None:                      
                        if pre_att_filter:
                            login_time = pre_att_filter['login_time']
                            pre_att = self.att_create(pre_att_filter)
                            # print ('*************88888888888888888888888888', pre_att)
                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
                                check_out = 0
                                pre_req_filter['duration_end'] = date_time_format

                                '''
                                    Deviation duration calculation.
                                '''
                                if tcore_user.is_flexi_hour: # fh
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
                                else:
                                    duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count>0:
                                    total_deviation += duration_count
                                    pre_req_filter['duration'] = duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(tcore_user, pre_req_filter)
                                    pre_req_list.append(pre_req)
                                    pre_req_filter = {}
                                    #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                working_minutes = round(((logout_time - login_time).seconds)/60)
                
                if not ignore_minutes_goal:

                    if working_minutes < minutes_goal:
                        goal_deviation = {}
                        # goal_deviation['request_type'] = 'GD'
                        goal_deviation['attendance'] = pre_att
                        goal_deviation['punch_id'] = cu_punch_id
                        goal_deviation['duration'] = minutes_goal - working_minutes
                        goal_deviation['duration_start'] = logout_time
                        goal_deviation['duration_end'] = logout_time + timedelta(minutes=goal_deviation['duration'])
                        goal_deviation['attendance_date'] = login_time.date()
                        goal_deviation['is_deviation_soft'] = 0
                        goal_deviation_req = self.request_create(tcore_user, goal_deviation)
                        deviation_duration = goal_deviation['duration']

                    for pre_req in pre_req_list:
                        if deviation_duration > 0:
                            pre_req.is_deviation_soft = 0
                            deviation_duration = deviation_duration - pre_req.duration
                        else:
                            pre_req.is_deviation_soft = 1
                        pre_req.save()

                    if saturday_off is False and no_request is False:
                        ### IF Late convence ### Successful Testing
                        if daily_logoutTime < logout_time.time():
                            late_con_filter['attendance'] = pre_att
                            late_con_filter['punch_id'] = cu_punch_id
                            late_con_filter['attendance_date'] = daily_logout.date()
                            late_con_filter['duration_start'] = daily_logout
                            late_con_filter['duration_end'] = logout_time
                            late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                            late_con_filter['is_late_conveyance']=True
                            # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                            '''
                                As per requirement and discussion with Tonmay Da(10.12.2019):
                                LATE CONVENCE always count after 08:30 PM 
                            '''
                            if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                                and late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                                # print("late_con_filter",late_con_filter)
                                late_req = self.request_create(tcore_user, late_con_filter)
                                # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None   
                spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']= 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time_format.strftime('%d/%m/%Y') + 'T' + str(daily_loginTime)
                    date_time_date = datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    # print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login 
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60) if not tcore_user.is_flexi_hour else None
                        
                        if spl_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']                            

                        elif adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            if tcore_user.is_flexi_hour:
                                if spl_leave_type or adv_leave_type:
                                    abs_req = self.request_create(tcore_user, req_filter)
                            else:
                                abs_req = self.request_create(tcore_user, req_filter)
                            
                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result':{'request_status':1, 'msg':'Successful', 'path': url}})
# --


class AttendenceApprovalRequestViewV2(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
	serializer_class = AttendenceApprovalRequestEditSerializerV2


class AttendanceUserCronLockV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    
    def all_leave_calculation_upto_applied_date(self, date_object=None, user=None):
        from django.db.models import Sum

        '''
        Start :: Normal leave availed by user
        '''
        how_many_days_ab_taken = 0.0
        how_many_days_al_taken = 0.0

        availed_hd_ab=0.0
        availed_ab=0.0
        availed_al = 0.0
        availed_hd_al=0.0
        carry_forward_leave = AttendanceCarryForwardLeaveBalanceYearly.objects.filter(
                    employee=user.cu_user, 
                    is_deleted=False,
                    ).first() #.aggregate(Sum('leave_balance'))
        print('carry_forward_leave:',carry_forward_leave)

        salary13_carry_forward_al = 0.0
        total_carry_forward_leave = 0.0
        if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13':
            total_carry_forward_leave = carry_forward_leave.leave_balance
            if user.is_confirm:
                salary13_carry_forward_al = carry_forward_leave.leave_balance
            else:
                approved_leave = JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
                salary13_carry_forward_al = float(carry_forward_leave.leave_balance) - float(approved_leave.el)

        # salary13_carry_forward_al = carry_forward_leave.leave_balance if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13'and user.is_confirm else 0.0
        print('salary13_carry_forward_al:', salary13_carry_forward_al)


        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                                    month_end__date__gte=date_object,is_deleted=False).first()
        
        print("month_master:", month_master)
        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((
            Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
            duration_start__date__gte=month_master.year_start_date.date(),
            attendance__employee=user.cu_user.id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("date_list",date_list)
        
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
            filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                    (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                    attendance__employee=user.cu_user.id,
                    attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                        leave_type_final = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    leave_type_final_hd = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print('availed_master_wo_reject_fd',availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:
            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0
                        elif availed_FD.filter(leave_type_final='AL'):
                            availed_al = availed_al + 1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'AL':
                            availed_al = availed_al + 1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0
                        elif availed_FD.filter(leave_type_final_hd='AL'):
                            availed_hd_al=availed_hd_al+1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'AL':
                            availed_hd_al=availed_hd_al+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
        
        '''
            Get total leave allocation(monthly) by request start and end date
        '''
        leave_allocation_per_month = 0.0
        # leave_allocation_yearly = 0.0

        if user.is_confirm == False: 
            if user.salary_type and user.salary_type.st_name=='13':
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                    month__month_end__date__lte=date_object)|Q(month__month_start__date__lte=date_object,
                    month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))
                print('leave_allocation_per_month_d',leave_allocation_per_month_d)
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure_not_confirm__sum'] if leave_allocation_per_month_d['round_figure_not_confirm__sum'] else 0.0
                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))['round_figure_not_confirm__sum']
                # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0

            else:
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0

                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        else:
            leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
            leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0
            print('leave_allocation_per_month',leave_allocation_per_month)

            # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
            #                                                         employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        
        # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0
        
        print('leave_allocation_per_month',leave_allocation_per_month)           

        # current year leave + salary 13 leave carry forward
        # leave_allocation_yearly = leave_allocation_yearly + total_carry_forward_leave
        



        # ::````Advance Leave Calculation```:: #
        
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=user.cu_user)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))&
                                                           Q(start_date__date__lte=month_master.month_end.date())
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_al=0
        advance_ab=0
        day=0


        last_attendance = Attendance.objects.filter(employee=user.cu_user).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<month_master.month_end.date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = month_master.month_end.date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='AL':
                        advance_al+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day



        '''
            Section for count total leave count which means 
            total of advance leaves and approval leave
        '''
        
        print('advance_al',advance_al)
        # print('advance_ab',advance_ab)
        
        #print("availed_el",availed_el)
        print("availed_al",availed_al)
        
        total_availed_al=float(availed_al)+float(advance_al)+float(availed_hd_al/2)
        total_availed_ab=float(availed_ab) + float(advance_ab) +float(availed_hd_ab/2)
        print("total_availed_al",total_availed_al)
        print('total_availed_ab', total_availed_ab)

        '''
            Section for remaining leaves from granted leave - availed leave
        '''
        leave_allocation_per_month  = float(leave_allocation_per_month) + float(salary13_carry_forward_al)
        balance_al = leave_allocation_per_month - float(total_availed_al)


        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=user.cu_user) &
                                                                Q(duration_start__gte=month_master.month_start) &
                                                                Q(duration_start__lte=month_master.month_end) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        availed_grace = availed_grace if availed_grace else 0
        total_month_grace = month_master.grace_available
        grace_balance = total_month_grace - availed_grace

        if user.salary_type and user.salary_type.st_name=='13' and user.is_confirm == False:
            is_confirm = False
        else:
            is_confirm = True

        yearly_leave_allocation = float(user.granted_leaves_cl_sl) + float(user.granted_el) + float(total_carry_forward_leave)
        month_start = month_master.month_start
        if user.joining_date > month_master.year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            if approved_leave:
                yearly_leave_allocation = float(approved_leave.granted_leaves_cl_sl) + float(approved_leave.el)
                if month_master.month==approved_leave.month:    #for joining month only
                    total_month_grace=approved_leave.first_grace
                    month_start=user.joining_date
                    grace_balance=total_month_grace - availed_grace

        monthly_availed_data = AttendanceApprovalRequest.objects.filter(attendance__employee=user.cu_user,is_requested=True,is_deleted=False,
                                                        duration_start__gte=month_master.month_start,
                                                        duration_start__lte=month_master.month_end)
        
        monthly_od_count = monthly_availed_data.filter(Q(is_requested=True)& Q(is_deleted=False)&
                                                        (Q(request_type='FOD')|Q(request_type='POD'))&
                                                        (Q(approved_status='pending')|Q(approved_status='approved')
                                                        )).count()

        monthly_od_duration = monthly_availed_data.filter(Q(is_requested=True)&Q(is_deleted=False)&
                                                        (Q(request_type='FOD')|Q(request_type='POD'))&
                                                        (Q(approved_status='pending')|Q(approved_status='approved')
                                                        )).aggregate(Sum('duration'))['duration__sum']
        monthly_od_duration = monthly_od_duration if monthly_od_duration else 0

        result = {
            "month_start":month_start,
            "month_end":month_master.month_end,
            "year_start":month_master.year_start_date,
            "year_end":month_master.year_end_date,
            "is_confirm": is_confirm,
            "total_month_grace": total_month_grace,
            "availed_grace": availed_grace,
            "grace_balance": grace_balance,
            "total_eligibility": yearly_leave_allocation,
            "total_accumulation": leave_allocation_per_month,
            "total_consumption": total_availed_al,
            "total_available_balance": balance_al,
            "total_absent": total_availed_ab,
            "monthly_od_count":monthly_od_count,
            "monthly_od_duration":monthly_od_duration
            }

        return result

    def get(self, request, *args, **kwargs):
        # start :: added by Rajesh #
        today = datetime.now()
        today_date = today.date()
        print('today_date:', today_date)

        days_interval = self.request.query_params.get('days_interval', 7)
        date_before_n_days = (today - timedelta(days=int(days_interval))).date()
        print('date_before_n_days:', date_before_n_days)
        # end :: added by Rajesh #

        is_lock_date_confirm = self.request.query_params.get('is_lock_date_confirm', 'no')
        print('is_lock_date_confirm', is_lock_date_confirm)
        if is_lock_date_confirm.lower() != 'yes':
            return Response({'lock_date': date_before_n_days, 'days_interval': days_interval})

        # date_object = datetime.now().date()
        # current_date = datetime.now().date()
        # current_month = current_date.month
        
        total_month_grace = AttendenceMonthMaster.objects.filter(month_start__date__lte=date_before_n_days,
                                                    month_end__date__gte=date_before_n_days,is_deleted=False).values('lock_date__date'
                                                ,'year_start_date','year_end_date','month','month_start__date','month_end__date')
        print("total_month_grace",total_month_grace)
        with transaction.atomic():
            # print('lock_date__date',total_month_grace[0]['lock_date__date'])
            # if current_date == total_month_grace[0]['lock_date__date']:
               
            # Exclude director's punch id from list
            user_details=TMasterModuleRoleUser.objects.\
                    filter(
                        Q(mmr_user__in=(TCoreUserDetail.objects.filter(~Q(cu_punch_id='#N/A'),user_type__in=('User','Housekeeper'),cu_is_deleted=False).values_list('cu_user',flat=True))),
                        Q(mmr_type=3),
                        Q(mmr_is_deleted=False),
                        Q(mmr_module__cm_name='ATTENDANCE & HRMS')).values_list('mmr_user',flat=True).distinct()
        
            print('user_details',len(user_details))
            for employee_id in user_details:

                '''
                    For Testing Pupose leave check before OD Approval 7969-7970
                '''
                # total_grace_finalbefore = self.leave_calulate(employee_id,total_month_grace)
                # print("loop before od ",total_grace_finalbefore)
                tcore_user = TCoreUserDetail.objects.get(cu_user=employee_id)
                leave_calculation = self.all_leave_calculation_upto_applied_date(date_object=date_before_n_days, user=tcore_user)
                print("loop before od ", leave_calculation)
                # print("employee_id",employee_id)
                attendence_ids=AttendanceApprovalRequest.objects.filter(attendance_date=date_before_n_days,is_late_conveyance=False,
                            is_requested=False,is_deleted=False,attendance__employee=employee_id).values_list('attendance',flat=True).distinct()
                # print("attendence_ids",attendence_ids)
                
                #OD AUTO APPROVAL
                od_app_req_id=AttendanceApprovalRequest.objects.filter(
                    (Q(request_type='POD')|Q(request_type='FOD')),
                    attendance_date=date_before_n_days,
                    attendance__employee=employee_id,
                    is_requested=True,
                    approved_status='pending').values_list('id',flat=True).distinct()

                
                for app_req_id in list(od_app_req_id):

                    AttendanceApprovalRequest.objects.filter(
                        id=app_req_id,
                        is_late_conveyance=False,
                        is_requested=True).update(approved_status='approved',remarks='AUTO OD APPROVED')


                for att_id in list(attendence_ids):
                    leave_calculation = self.all_leave_calculation_upto_applied_date(date_object=date_before_n_days, user=tcore_user)
                    # total_grace_final2 = self.leave_calulate(employee_id,total_month_grace)
                    print('employee_id',employee_id)
                    print("Inside loop not requested grace",leave_calculation)

                    duration_length=AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                checkin_benchmark=False,is_requested=False).aggregate(Sum('duration'))['duration__sum']
                    print('duration_length',duration_length,'att_id',att_id)
                    print('employee_id',employee_id)
                    if duration_length is not None and duration_length < 240:

                        if duration_length is not None and duration_length < 180 and leave_calculation['grace_balance'] >= duration_length:
                            update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                checkin_benchmark=False,is_requested=False).\
                                                                update(request_type='GR',justification='AUTO',is_requested=True,
                                                                approved_status='approved',remarks='AUTO GRACE APPROVED')
                        else:
                            if leave_calculation['total_available_balance'] > 0.0:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='AL',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')

                            else:

                                update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                        checkin_benchmark=False,is_requested=False).\
                                                                            update(request_type='HD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                            approved_status='approved',remarks='AUTO LEAVE APPROVED')
                    else:
                        if leave_calculation['total_available_balance'] > 0.5:

                            update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                    checkin_benchmark=False,is_requested=False).\
                                                                        update(request_type='FD',leave_type='AL',justification='AUTO',is_requested=True,
                                                                        approved_status='approved',remarks='AUTO LEAVE APPROVED')
                        else:

                            update_auto = AttendanceApprovalRequest.objects.filter(attendance=att_id,is_late_conveyance=False,
                                                                    checkin_benchmark=False,is_requested=False).\
                                                                        update(request_type='FD',leave_type='AB',justification='AUTO',is_requested=True,
                                                                        approved_status='approved',remarks='AUTO LEAVE APPROVED')                        
                #for checking
                leave_calculation = self.all_leave_calculation_upto_applied_date(date_object=date_before_n_days, user=tcore_user)
                # total_grace_final2 = self.leave_calulate(employee_id,total_month_grace)
                print("after grace leave calculate", leave_calculation) 
                auto_grace_approval =AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,
                                                                        is_requested=True,request_type='GR',approved_status='pending').\
                                                                            update(approved_status='approved',remarks='AUTO GRACE APPROVED')

                auto_misspunch_approval =AttendanceApprovalRequest.objects.filter(attendance__employee=employee_id,
                                                                        is_requested=True,request_type='MP',approved_status='pending').\
                                                                            update(approved_status='approved',remarks='AUTO MISSPUNCH APPROVED') 
                
            
            print("entered or noyt ")                                                                             
            lock=AttendanceApprovalRequest.objects.filter(attendance_date=date_before_n_days,
                                                    is_deleted=False).\
                                                        update(lock_status=True)
            print("lock",lock)   

        return Response({})


class YearlyLeaveBalanceCarryForwardRecordCreationV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False, is_requested=True)
    serializer_class = YearlyLeaveBalanceCarryForwardSerializerV2

    def get(self, request, *args, **kwargs):
        query_set = self.get_queryset()
        user_details, today_datetime, date_time_day = self.get_user()
        
        # import tqdm # ProgressBar
        # pbar = tqdm.tqdm(total=user_details.count()) # ProgressBar
        for user in user_details:
            # break
            yearly_leave = self.yearly_leave_calculation_by_user_19_20_FY(total_aproval_request=query_set, user=user)
            total_leave_balance = yearly_leave['total_leave_balance'] if yearly_leave['total_leave_balance'] >= 0 else 0.0
            AttendanceCarryForwardLeaveBalanceYearly.objects.update_or_create(
                    employee=user.cu_user,
                    is_deleted=False,
                    defaults={
                        'year_end_date': self.end_date_time,
                        'year_start_date': self.start_date_time,
                        "leave_balance": total_leave_balance
                        }
            )
            # pbar.update(1) # ProgressBar
            # break
        # pbar.close() # ProgressBar
        return Response({'request_status':1, 'msg': settings.MSG_SUCCESS})

    def yearly_leave_calculation_by_user_19_20_FY(self, total_aproval_request=None, user=None):
        user_aproval_request = total_aproval_request.filter(attendance__employee_id=user.cu_user.id)
        el, cl, sl, total_leave_availed, total_leave_granted, total_leave_balance = self.leave_calculation_19_20_FY(user_aproval_request=user_aproval_request, user=user)
        return dict(name=user.cu_user.get_full_name(), 
                    el=el, cl=cl, sl=sl, 
                    total_leave_availed=total_leave_availed, 
                    total_leave_granted=total_leave_granted,
                    total_leave_balance=total_leave_balance)

    def leave_calculation_19_20_FY(self, user_aproval_request=None, user=None, start_date=None, end_date=None):
        ####Monthly GR request date count##########################

        yearly_availed_hd_cl=0.0
        yearly_availed_hd_el=0.0
        yearly_availed_hd_sl=0.0
        yearly_availed_hd_ab=0.0
        yearly_availed_cl=0.0
        yearly_availed_el=0.0
        yearly_availed_sl=0.0
        yearly_availed_ab=0.0

        attendence_daily_data = user_aproval_request.filter(((Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
                                            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
                                            ).values('duration_start__date').distinct()

        month_date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        availed_master_wo_reject_fd = user_aproval_request.\
                filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                        (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                        attendance_date__in=month_date_list).annotate(
                            leave_type_final = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        leave_type_final_hd = Case(
                            When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                            When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                            output_field=CharField()
                        ),
                        ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()

        if availed_master_wo_reject_fd:

            for data in month_date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            yearly_availed_ab=yearly_availed_ab+1.0

                        elif availed_FD.filter(leave_type_final='CL'):
                            yearly_availed_cl=yearly_availed_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'CL':
                            yearly_availed_cl=yearly_availed_cl+1.0
                        elif l_type == 'EL':
                            yearly_availed_el=yearly_availed_el+1.0
                        elif l_type == 'SL':
                            yearly_availed_sl=yearly_availed_sl+1.0
                        elif l_type == 'AB':
                            yearly_availed_ab=yearly_availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            yearly_availed_hd_ab=yearly_availed_hd_ab+1.0

                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            yearly_availed_hd_cl=yearly_availed_hd_cl+1.0
                                    

                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'CL':
                            yearly_availed_hd_cl=yearly_availed_hd_cl+1.0
                        elif l_type == 'EL':
                            yearly_availed_hd_el=yearly_availed_hd_el+1.0
                        elif l_type == 'SL':
                            yearly_availed_hd_sl=yearly_availed_hd_sl+1.0
                        elif l_type == 'AB':
                            yearly_availed_hd_ab=yearly_availed_hd_ab+1.0
       

        cl = float(yearly_availed_cl)+float(yearly_availed_hd_cl/2)
        el = float(yearly_availed_el)+float(yearly_availed_hd_el/2)
        sl = float(yearly_availed_sl)+float(yearly_availed_hd_sl/2)
        total_leave_availed = cl + el + sl

        print('user',user)
        #time.sleep(10)
        if user.joining_date.date() > self.start_date_time.date():
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user.id,is_deleted=False).values('cl', 'el', 'sl',
                                                                                                                'year', 'month',
                                                                                                                'first_grace')
            total_leave_granted = 0.0
            total_leave_balance = 0.0
            if approved_leave:
                granted_cl = float(approved_leave[0]['cl'] if approved_leave[0]['cl'] else 0.0)
                cl_balance = granted_cl - cl
                granted_el = float(approved_leave[0]['el'] if approved_leave[0]['el'] else 0.0 )
                el_balance = granted_el - el
                granted_sl = float( approved_leave[0]['sl'] if approved_leave[0]['sl'] else 0.0 ) 
                sl_balance = granted_sl - sl
                total_leave_granted = granted_cl + granted_el + granted_sl
                total_leave_balance = cl_balance + el_balance + sl_balance
        else:
            granted_cl = float(user.granted_cl if user.granted_cl else 0.0)
            cl_balance = granted_cl - cl
            granted_el = float(user.granted_el if user.granted_el else 0.0)
            el_balance = granted_el - el
            granted_sl = float(user.granted_sl if user.granted_sl else 0.0) 
            sl_balance = granted_sl - sl
            total_leave_granted = granted_cl + granted_el + granted_sl
            total_leave_balance = cl_balance + el_balance + sl_balance


        return el, cl, sl, total_leave_availed, total_leave_granted, total_leave_balance

    def get_queryset(self):
        start_date = '2019-04-01' # self.request.query_params.get('start_date', '2019-04-01')
        end_date = '2020-03-31' # self.request.query_params.get('end_date', '2020-03-31')
        start_date_time = datetime.strptime(start_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")
        end_date_time = datetime.strptime(end_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")

        setattr(self, 'start_date_time', start_date_time)
        setattr(self, 'end_date_time', end_date_time)

        print(self.start_date_time.date(), 'to', self.end_date_time.date())

        queryset = self.queryset.filter(
                                            Q(
                                                Q(attendance_date__gte=start_date_time.date())&Q(attendance_date__lte=end_date_time.date())
                                            )&
                                            Q(
                                                Q(leave_type='EL')|Q(leave_type='CL')|Q(leave_type='SL')
                                            )&
                                            (Q(approved_status='pending')|Q(approved_status='approved'))
                                        )
        return queryset

    def get_user(self):
        # user_type = self.request.query_params.get('user_type', 'all')
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()
        user_details = TCoreUserDetail.objects.filter(
            ~Q(cu_punch_id='#N/A'),
            cu_user__is_superuser=False,
            cu_user__is_active=True,
            termination_date__isnull=True,
            joining_date__isnull=False,
            joining_date__date__lte='2020-03-31'
            )
        # user_details = TCoreUserDetail.objects.filter(~Q(
        #         (   
        #             Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
        #             Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
        #         )|
        #         (Q(cu_punch_id='#N/A'))|
        #         (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
        #     ),
        #     (
        #         Q(
        #             Q(termination_date__isnull=False)&Q(
        #                 Q(
        #                     Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
        #                 )|
        #                 Q(termination_date__date__gte=date_time_day)
        #             )
        #         )|
        #         Q(Q(termination_date__isnull=True))
        #     ),
        #     # Q(cu_user=50),
        #     (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False)
        print('user_details',user_details.count())
        return user_details, today_datetime, date_time_day


class AttendanceAdvanceLeaveAddV2View(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdvanceLeaveAddV2Serializer

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)


class AttendanceAdvanceLeaveApprovalDocUploadV2View(generics.UpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceAdvanceLeaveApprovalDocUploadV2Serializer


class AttendanceSpecialLeaveAddV2View(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialLeaveAddV2Serializer

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)


class AttendanceSpecialLeaveListV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeSpecialLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialLeaveListV2Serializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        cur_date = datetime.now().date()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=cur_date,
                                        month_end__date__gte=cur_date,is_deleted=False).values(
                                                                                 'year_start_date__date',
                                                                                 'year_end_date__date')

        emp_id = self.request.query_params.get('emp_id', None)
        if self.queryset.count():
            if total_month_grace:
                #print("total_month_grace",total_month_grace)
                return self.queryset.filter(((Q(start_date__date__gte=total_month_grace[0]['year_start_date__date'])&
                                            Q(end_date__date__lte=total_month_grace[0]['year_end_date__date']))|
                                            (Q(start_date__date__lte=total_month_grace[0]['year_start_date__date'])&
                                            Q(end_date__date__gte=total_month_grace[0]['year_start_date__date']))|
                                            (Q(start_date__date__lte=total_month_grace[0]['year_end_date__date'])&
                                            Q(end_date__date__gte=total_month_grace[0]['year_end_date__date']))
                                            ),employee_id=emp_id)
            else:
                return self.queryset.filter(((Q(start_date__date__gte=cur_date)&Q(end_date__date__lte=cur_date))|
                                            (Q(start_date__date__lte=cur_date)&Q(end_date__date__gte=cur_date))|
                                            (Q(start_date__date__lte=cur_date)&Q(end_date__date__gte=cur_date))
                                            ),employee_id=emp_id)
        else:
            return self.queryset

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceSpecialLeaveListV2View,self).get(self, request, args, kwargs)
        for data in response.data['results']:
            #print(data['approved_status'])
            data['approved_status']=data['approved_status'].capitalize()
        return response


class AttendanceSpecialLeaveReportV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceSpecialLeaveListV2Serializer
    pagination_class = CSPageNumberPagination
    queryset = EmployeeSpecialLeaves.objects.filter(Q(is_deleted=False) & 
                                                    (Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject'))
                                                   )
    def get_queryset(self):

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        attendance_type = self.request.query_params.get('attendance_type', None)
        if not attendance_type:
            attendance_type = 'HRMS'

        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeSpecialLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   
        else:
            search_sort_flag = True
            users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                    
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
            if users_list_under_the_login_user:
                attendence_id_list = EmployeeSpecialLeaves.objects.filter(
                            employee__in=users_list_under_the_login_user,
                            is_deleted = False
                            )
                print('attedence_details',attendence_id_list)
                if attendence_id_list:
                    search_sort_flag = True
                    self.queryset = attendence_id_list
                else:
                    search_sort_flag = False
                    self.queryset = self.queryset
            else:
                search_sort_flag = False
                self.queryset = []
            
        
        if search_sort_flag:
            filter={}
            search = self.request.query_params.get('search', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeSpecialLeaves.objects.none()
            sort_field='-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)
            hod = self.request.query_params.get('hod', None)
            company = self.request.query_params.get('company', None)
            designation = self.request.query_params.get('designation', None)
            department = self.request.query_params.get('department', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='start_date' and order_by=='asc':
                    sort_field='start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name =='start_date' and order_by=='desc':
                    sort_field='-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name =='end_date' and order_by=='asc':
                    sort_field='end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name =='end_date' and order_by=='desc':
                    sort_field='-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name =='date_of_application' and order_by=='asc':
                    sort_field='created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name =='date_of_application' and order_by=='desc':
                    sort_field='-created_at'

                elif field_name =='department' and order_by=='desc':
                    sort_field='-employee__cu_user__department__cd_name'

                elif field_name =='department' and order_by=='asc':
                    sort_field='employee__cu_user__department__cd_name'
                
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-employee__cu_user__designation__cod_name'

                elif field_name =='designation' and order_by=='asc':
                    sort_field='employee__cu_user__designation__cod_name'
                    
                    
            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)
                if hod:
                    emp_list = TCoreUserDetail.objects.filter(hod_id=hod).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                if company:
                    filter['employee__cu_user__company__id'] = company
                if department:
                    filter['employee__cu_user__department__id'] = department
                if designation:
                    filter['employee__cu_user__designation__id'] = designation

                if reporting_head:
                    emp_list = TCoreUserDetail.objects.filter(reporting_head_id=reporting_head).values_list('cu_user',flat=True)
                    filter['employee__in'] = emp_list

                    
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset)
                        return queryset_all 


                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceSpecialLeaveReportV2View,self).get(self, request, args, kwargs)
        data_list = list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        #print('response data 111111111',response.data['results'])
        if field_name =='leave_count' and order_by=='asc':
            response.data['results'] = sorted(response.data['results'], key=lambda i: i['leave_count'])
        if field_name =='leave_count' and order_by=='desc':
            response.data['results'] = sorted(response.data['results'], key=lambda i: i['leave_count'],reverse=True)

        for data in response.data['results']:
            data['employee_name'] = ''
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            
            data['leave_type'] = 'Maternity Leave' if data['leave_type'] == 'ML' else 'Bereavement Leave'
            data['start_date'] =  data['start_date'][0:10]  if data['start_date'] else ''
            data['end_date'] =   data['end_date'][0:10] if data['end_date'] else ''

        return response

class AttendanceSpecialLeaveReportExportDownloadV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = AttendanceSpecialLeaveListV2Serializer
    queryset = EmployeeSpecialLeaves.objects.filter(Q(is_deleted=False) & 
                                                    (Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject'))
                                                   )
    def get_queryset(self):

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        attendance_type = self.request.query_params.get('attendance_type', None)
        if not attendance_type:
            attendance_type = 'HRMS'
            
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeSpecialLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   
        else:
            search_sort_flag = True
            users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    # cu_is_deleted = False,
                    attendance_type=attendance_type
                    
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
            if users_list_under_the_login_user:
                attendence_id_list = EmployeeSpecialLeaves.objects.filter(
                            employee__in=users_list_under_the_login_user,
                            is_deleted = False
                            )
                print('attedence_details',attendence_id_list)
                if attendence_id_list:
                    search_sort_flag = True
                    self.queryset = attendence_id_list
                else:
                    search_sort_flag = False
                    self.queryset = self.queryset
            else:
                search_sort_flag = False
                self.queryset = []
        
        
        filter={}
        search = self.request.query_params.get('search', None)
        leave_type=self.request.query_params.get('leave_type', None)
        approved_type=self.request.query_params.get('approved_type', None)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)
        queryset_all = EmployeeSpecialLeaves.objects.none()
        sort_field='-id'
        dept_filter = self.request.query_params.get('dept_filter', None)
        users = self.request.query_params.get('users', None)
        hod = self.request.query_params.get('hod', None)
        company = self.request.query_params.get('company', None)
        designation = self.request.query_params.get('designation', None)

        reporting_head = self.request.query_params.get('reporting_head', None)
        if users:
            user_lst = users.split(',')
            filter['employee__in'] = user_lst

        if field_name and order_by:
            if field_name =='start_date' and order_by=='asc':
                sort_field='start_date'
                # return self.queryset.filter(is_deleted=False).order_by('start_date')
            elif field_name =='start_date' and order_by=='desc':
                sort_field='-start_date'
                # return self.queryset.filter(is_deleted=False).order_by('-start_date')
            elif field_name =='end_date' and order_by=='asc':
                sort_field='end_date'
                # return self.queryset.filter(is_deleted=False).order_by('end_date')
            elif field_name =='end_date' and order_by=='desc':
                sort_field='-end_date'
                # return self.queryset.filter(is_deleted=False).order_by('-end_date')
            elif field_name =='date_of_application' and order_by=='asc':
                sort_field='created_at'
                # return self.queryset.filter(is_deleted=False).order_by('created_at')
            elif field_name =='date_of_application' and order_by=='desc':
                sort_field='-created_at'

            elif field_name =='department' and order_by=='desc':
                sort_field='-employee__cu_user__department__cd_name'

            elif field_name =='department' and order_by=='asc':
                sort_field='employee__cu_user__department__cd_name'
            
            elif field_name =='designation' and order_by=='desc':
                sort_field='-employee__cu_user__designation__cod_name'

            elif field_name =='designation' and order_by=='asc':
                sort_field='employee__cu_user__designation__cod_name'
                
                
        if self.queryset.count():
            if dept_filter:
                dept_list = dept_filter.split(',')
                emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                filter['employee__in'] = emp_list

            if from_date and to_date:
                start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                filter['start_date__date__gte'] = start_object
                end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                filter['end_date__date__lte'] = end_object + timedelta(days=1)

            if leave_type:
                leave_type_list=leave_type.split(',')
                filter['leave_type__in']= leave_type_list
                # return self.queryset.filter(leave_type__in=leave_type_list)
            if approved_type:
                approved_type_list=approved_type.split(',')
                filter['approved_status__in']= approved_type_list
                # return self.queryset.filter(approved_status__in=approved_type_list)
            if hod:
                emp_list = TCoreUserDetail.objects.filter(hod_id=hod).values_list('cu_user',flat=True)
                filter['employee__in'] = emp_list

            if company:
                filter['employee__cu_user__company__id'] = company

            if designation:
                filter['employee__cu_user__designation__id'] = designation

            if reporting_head:
                emp_list = TCoreUserDetail.objects.filter(reporting_head_id=reporting_head).values_list('cu_user',flat=True)
                filter['employee__in'] = emp_list

                
            if search :
                search_data = list(map(str,search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" "))>0 and len(search.split(" "))<2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False,**filter).order_by(sort_field)                            
                    queryset_all=(queryset_all|queryset)
                    return queryset_all 

                elif len(search.split(" "))>1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False,**filter).order_by(sort_field)
                    queryset_all=(queryset_all|queryset)
                    return queryset_all 


            else:
                queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                return queryset

        else:
            return queryset_all
       

    
    def get(self, request, *args, **kwargs):
        response=super(__class__,self).get(self, request, args, kwargs)
        data_list = list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        #print('response data 111111111',response.data['results'])
        if field_name =='leave_count' and order_by=='asc':
            response.data = sorted(response.data, key=lambda i: i['leave_count'])
        if field_name =='leave_count' and order_by=='desc':
            response.data = sorted(response.data, key=lambda i: i['leave_count'],reverse=True)

        for data in response.data:
            data['employee_name'] = ''
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            
            data['leave_type'] = 'Maternity Leave' if data['leave_type'] == 'ML' else 'Bereavement Leave'
            data['start_date'] =  data['start_date'][0:10]  if data['start_date'] else ''
            data['end_date'] =   data['end_date'][0:10] if data['end_date'] else ''

            data_list.append([data['employee_name'],data['department'],data['designation'],data['company'],data['hod'],
            data['reporting_head'],data['start_date'],data['end_date'],data['leave_type'],data['leave_count'],
            data['approved_status'],data['reason'],data['remarks']])
        file_name = ''
        file_path = ''
        if data_list:
            if os.path.isdir('media/attendance/special_leave_report/document'):
                file_name = 'media/attendance/special_leave_report/document/special_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/special_leave_report/document')
                file_name = 'media/attendance/special_leave_report/document/special_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Department','Designation','company','HOD',
            'Reporting Head','Start Date','End Date','Leave Type','Leave Count','Approved Status',
            'Reason','Remarks'])
            export_csv = final_df.to_excel (file_path, index = None, header=True)

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})


class AttendanceSpecialLeaveListTeamHrV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeSpecialLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialLeaveListV2Serializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeSpecialLeaves.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False,approved_status='pending'
                                )
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list
                        #self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   
        else:
            search_sort_flag = True
            self.queryset = self.queryset   

        if search_sort_flag:
            sort_field='-id'
            filter={}
            search = self.request.query_params.get('search', None)
            emp_id = self.request.query_params.get('emp_id', None)
            leave_type=self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            queryset_all = EmployeeSpecialLeaves.objects.none()
            if self.queryset.count():
                # print('leave_type-->',leave_type)
                if field_name and order_by:
                    if field_name =='start_date' and order_by=='asc':
                        sort_field='start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('start_date')
                    elif field_name =='start_date' and order_by=='desc':
                        sort_field='-start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                    elif field_name =='end_date' and order_by=='asc':
                        sort_field='end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('end_date')
                    elif field_name =='end_date' and order_by=='desc':
                        sort_field='-end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                    elif field_name =='sort_applied' and order_by=='asc':
                        sort_field='created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('created_at')
                    elif field_name =='sort_applied' and order_by=='desc':
                        sort_field='-created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('-created_at')
                    

                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list

                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0])|Q(employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        return queryset
                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field) 
                        return queryset      

                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field) 
                    return queryset
            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceSpecialLeaveListTeamHrV2View,self).get(self, request, args, kwargs)
        for data in response.data['results']:
            data['employee_name'] = ''
            data['approved_status']=data['approved_status'].capitalize()
            emp_name = User.objects.filter(id=data['employee']).values('first_name','last_name')
            if emp_name:
                first_name=emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name=emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
        return response


class AttendanceSpecialLeaveApprovalTeamHrV2View(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeSpecialLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialLeaveApprovalTeamHrV2Serializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response


class AttendanceSpecialLeaveApprovalDocUploadV2View(generics.UpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeSpecialLeaves.objects.filter(is_deleted=False)
    serializer_class = AttendanceSpecialLeaveApprovalDocUploadV2Serializer


class AttendanceCronMailFire(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    def get(self, request, *args, **kwargs):
        user_list=TMasterModuleRoleUser.objects.filter(
                        Q(mmr_type=3),Q(mmr_is_deleted=False),
                        Q(mmr_module__cm_name='ATTENDANCE & HRMS')).\
                        values_list('mmr_user',flat=True).distinct()


        user_mail_official = TCoreUserDetail.objects.filter(
            (Q(cu_alt_email_id__isnull=False) & ~Q(cu_alt_email_id="")),cu_user__in=list(user_list),cu_is_deleted=False).\
                values('cu_alt_email_id').distinct()
        
        uma = [x['cu_alt_email_id'] for x in user_mail_official]

        user_mail_list = list(set(uma))
        print("user_mail_list",user_mail_list)
        
        emp_mob = TCoreUserDetail.objects.filter(cu_user__in=list(user_list),cu_phone_no__isnull=False,cu_is_deleted=False).\
            values('cu_phone_no').distinct()
        emp_mob_no = [ x['cu_phone_no'] for x in emp_mob ]

        '''
            MAIL Functionality
        '''
        #user_mail_list = ['rupam@shyamfuture.com']
        
        if user_mail_list:
            mail_data = {
            'name':None
            }
            print('mail_data',mail_data)
            mail_class = GlobleMailSend('ATP-PM-EW-C', user_mail_list)
            mail_thread = Thread(target = mail_class.mailsend, args = (mail_data,None))
            mail_thread.start()

        '''
            SMS Functionality
        '''
        if emp_mob_no:
            message_data = {
                'name':None
            }
            sms_class = GlobleSmsSendTxtLocal('ATTPR-C',emp_mob_no)
            sms_thread = Thread(target = sms_class.sendSMS, args = (message_data,'sms'))
            sms_thread.start()

        return Response({'emp_mob_no':emp_mob_no,'user_mail_list':user_mail_list})


class AttendanceDatabaseQueryViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request, *args, **kwargs):
        action_confirm = self.request.query_params.get('action_confirm', 'no')
        action = self.request.query_params.get('action', None)

        if action == 'DELETE_ATTENDANCE':
            date = self.request.query_params.get('date', None) + 'T00:00:00'
            date_time =datetime.strptime(date, "%Y-%m-%dT%H:%M:%S")
            query_set = Attendance.objects.filter(date__date=date_time.date())
            if action_confirm == 'yes':
                print('query_set:',query_set)
                # query_set.delete() # uncomment when you execute the query
            return Response({'action':action, 'action_confirm': action_confirm, 'query_set': query_set.values()})

        elif action == 'JOINING_APPROVAL_LEAVE_MODIFY':
            query_set = JoiningApprovedLeave.objects.all()
            if action_confirm == 'yes':
                print('query_set:',query_set)
                for joining_approval_leave in query_set:
                    joining_approval_leave.granted_leaves_cl_sl = joining_approval_leave.cl + joining_approval_leave.sl
                    joining_approval_leave.save()
            return Response({'action':action, 'action_confirm': action_confirm, 'query_set': query_set.values()})



class AttandanceNewJoinerReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    '''
        Edited By Rupam Hazra
        Filter
    '''
    queryset = TCoreUserDetail.objects.filter(cu_user__is_superuser=False).order_by('-id')
    serializer_class = AttandanceNewJoinerReportSerializerV2
    pagination_class = CSPageNumberPagination

    def get(self, request, *args, **kwargs):
        response = super(AttandanceNewJoinerReportViewV2,self).get(self, request, *args, **kwargs)

        # df_report = pd.DataFrame.from_records(response.data['results'])
        # file_name = self.create_file_path(str(datetime.now().date()))
        # df_report.to_excel(file_name, index = None)
        
        # url = getHostWithPort(request) + file_name if file_name else None
        return Response({ **response.data, 'request_status':1, 'msg': settings.MSG_SUCCESS})

    def create_file_path(self, reporting_date):
        if os.path.isdir('media/attendance/new_joiner_report'):
            file_name = 'media/attendance/new_joiner_report/{}.xlsx'.format(reporting_date)
        else:
            os.makedirs('media/attendance/new_joiner_report')
            file_name = 'media/attendance/new_joiner_report/{}.xlsx'.format(reporting_date)
        return file_name

    def get_months_from_master(self, date_time=None):
        month_master = AttendenceMonthMaster.objects.filter(is_deleted=False).filter(
                                                                Q(month_start__date__lte=date_time.date())&
                                                                Q(month_end__date__gte=date_time.date())
                                                            ).first()
        return month_master

    def get_queryset(self):
        year = self.request.query_params.get('year')
        month = self.request.query_params.get('month')
        
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()

        department = self.request.query_params.get('department', None)
        designation = self.request.query_params.get('designation', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        company = self.request.query_params.get('company', None)
        hod = self.request.query_params.get('hod', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)
        filter = dict()

        '''
            Modified By Rupam Hazra Add sorting and filter functionality
        '''
        #queryset = self.queryset.filter(joining_date__date__lte=date_time_day)

        if year and month:
            current_month_date = '{}-{}-{}'.format(year,month,'01')
            current_month_datetime = datetime.strptime(current_month_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")
            month_start_date, month_end_date = get_month_first_last_datetime(year=int(year), month=int(month))
            self.queryset = self.queryset.filter(Q(joining_date__date__gte=month_start_date)&
                                            Q(joining_date__date__lte=month_end_date))
        

        if from_date and to_date:
            filter['cu_user__in'] = self.queryset.filter(
                Q(Q(transfer_date__date__gte=from_date) &Q(transfer_date__date__lte=to_date))|
                Q(Q(joining_date__date__gte=from_date) &Q(joining_date__date__lte=to_date)) |
                Q(Q(rejoin_date__date__gte=from_date) &Q(rejoin_date__date__lte=to_date))
                ).values_list('cu_user',flat=True)

        if not from_date: 
            filter['joining_date__month'] = date_time_day.month
            filter['joining_date__year'] = date_time_day.year

        if department:
            filter['department__id'] = department
        if designation:
            filter['designation__id'] = designation
        if reporting_head:
            filter['reporting_head__id'] = reporting_head
        if hod:
            filter['hod__id'] = hod
        if company:
            filter['company__id'] = company

        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        sort_field = '-id'
        if field_name and order_by:
            if field_name =='username' and order_by=='asc':
                sort_field='cu_user__username'
            if field_name =='username' and order_by=='desc':
                sort_field='-cu_user__username'
            if field_name =='company' and order_by=='asc':
                sort_field='company__coc_name'
            if field_name =='company' and order_by=='desc':
                sort_field='-company__coc_name'

        return self.queryset.filter(**filter).order_by(sort_field)


class AttandanceNewJoinerReportExportDownloadViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    '''
        Edited By Rupam Hazra
        Filter
    '''
    queryset = TCoreUserDetail.objects.filter(cu_user__is_superuser=False).order_by('-id')
    serializer_class = AttandanceNewJoinerReportSerializerV2

    def get(self, request, *args, **kwargs):
        response = super(__class__,self).get(self, request, *args, **kwargs)
        final_result_lst = list()
        month_dict = {1: 'Janauary',
                 2: 'February',
                 3: 'March',
                 4: 'April',
                 5: 'May',
                 6: 'June',
                 7: 'July',
                 8: 'August',
                 9: 'September',
                 10: 'October',
                 11: 'November',
                 12: 'December'	}
        if response.data:
            for data in response.data:
                temp_list = list()
                if data["joining_date"]:
                    temp_list.append(month_dict[datetime.strptime(str(data["joining_date"]).split('.')[0], "%Y-%m-%d %H:%M:%S").month])
                else:
                    temp_list.append("")
                # try:
                #     print(datetime.strptime(str(data["joining_date"]), "%Y-%m-%dT%H:%M:%S").month)
                #     temp_list.append(str(datetime.fromisoformat(str(data["joining_date"])).month))
                # except:
                #     temp_list.append("")
                temp_list.append(data["first_name"] + ' ' + data['last_name'])
                temp_list.append(data["employee_code"])
                temp_list.append(data["sap_id"])
                temp_list.append(data["cost_centre"])
                if data['joining_date']:
                    try:
                        # print(str(data["joining_date"]))
                        jd = datetime.strptime(str(data["joining_date"]).split('.')[0], "%Y-%m-%d %H:%M:%S").date()
                    except:
                        jd = ""
                else:
                    jd=""
                # print(jd)
                if data['dob']:
                    try:
                        # print(str(data["dob"]))
                        dob = datetime.strptime(str(data["dob"]), "%Y-%m-%d").date()
                    except:
                        dob= ""
                else:
                    dob=""
                # print(dob)
                temp_list.append(jd)
                td = datetime.strptime(str(data["transfer_date"]).split('.')[0], "%Y-%m-%dT%H:%M:%S").date() if data["transfer_date"] else ''
                temp_list.append(td)
                # dob = str(datetime.fromisoformat(data["dob"]).date()) if data['dob'] else ""
                temp_list.append(dob)
                temp_list.append(data["salary_type"])
                temp_list.append(data["designation"])
                temp_list.append(data["department"])
                temp_list.append(data["company"])
                temp_list.append(data["job_location"])
                temp_list.append(data["job_location_state"])
                final_result_lst.append(temp_list)

        if len(response.data):
            df_report = pd.DataFrame.from_records(final_result_lst)
            # df_report = df_report[
            #     ['task_subject', 'task_type_name', 'assign_to_name', 'start_date', 'reporting_dates', 'end_date',
            #      'extended_date']]
            file_name = self.create_file_path("new_joiner_"+str(datetime.now().date()))
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
            df_report.to_excel(file_path, index=None,
                               header=['Month', 'Employee Name', 'Ecode', 'Sap Id', 'Cost Center', 'Doj', 'Transfer Date',
                                       'Dob','Salary Type','Designation','Dept','CO.','jOB Location','Job Location-State'])

            url = getHostWithPort(request) + file_name if file_name else None
            return Response({'request_status': 1, 'msg': 'Success', 'url': url})
        else:
            return Response({'request_status': 0, 'msg': 'Data Not Found'})

        # df_report = pd.DataFrame.from_records(response.data)
        # file_name = self.create_file_path(str(datetime.now().date()))
        # df_report.to_excel(file_name, index = None)
        #
        # url = getHostWithPort(request) + file_name if file_name else None
        # if url:
        #     return Response({'request_status':1,'msg':'Success', 'url': url})
        # else:
        #     return Response({'request_status':0,'msg':'Not Found', 'url': url})

    def create_file_path(self, reporting_date):
        if os.path.isdir('media/attendance/new_joiner_report'):
            file_name = 'media/attendance/new_joiner_report/{}.xlsx'.format(reporting_date)
        else:
            os.makedirs('media/attendance/new_joiner_report')
            file_name = 'media/attendance/new_joiner_report/{}.xlsx'.format(reporting_date)
        return file_name

    def get_months_from_master(self, date_time=None):
        month_master = AttendenceMonthMaster.objects.filter(is_deleted=False).filter(
                                                                Q(month_start__date__lte=date_time.date())&
                                                                Q(month_end__date__gte=date_time.date())
                                                            ).first()
        return month_master

    def get_queryset(self):
        year = self.request.query_params.get('year')
        month = self.request.query_params.get('month')
        
        today_datetime = datetime.now()
        date_time_day = today_datetime.date()

        department = self.request.query_params.get('department', None)
        designation = self.request.query_params.get('designation', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        company = self.request.query_params.get('company', None)
        hod = self.request.query_params.get('hod', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)
        filter = dict()

        '''
            Modified By Rupam Hazra Add sorting and filter functionality
        '''
        #queryset = self.queryset.filter(joining_date__date__lte=date_time_day)
        # if from_date and to_date:
        #     filter['joining_date__date__gte'] = from_date
        #     filter['joining_date__date__lte'] = to_date

        if year and month:
            current_month_date = '{}-{}-{}'.format(year,month,'01')
            current_month_datetime = datetime.strptime(current_month_date+'T00:00:00', "%Y-%m-%dT%H:%M:%S")
            month_start_date, month_end_date = get_month_first_last_datetime(year=int(year), month=int(month))
            self.queryset = self.queryset.filter(Q(joining_date__date__gte=month_start_date)&
                                            Q(joining_date__date__lte=month_end_date))

        if from_date and to_date:
            filter['cu_user__in'] = self.queryset.filter(
                Q(Q(transfer_date__date__gte=from_date) &Q(transfer_date__date__lte=to_date))|
                Q(Q(joining_date__date__gte=from_date) &Q(joining_date__date__lte=to_date)) |
                Q(Q(rejoin_date__date__gte=from_date) &Q(rejoin_date__date__lte=to_date))
                ).values_list('cu_user',flat=True)

        if not from_date: 
            filter['joining_date__month'] = date_time_day.month
            filter['joining_date__year'] = date_time_day.year

        if department:
            filter['department__id'] = department
        if designation:
            filter['designation__id'] = designation
        if reporting_head:
            filter['reporting_head__id'] = reporting_head
        if hod:
            filter['hod__id'] = hod
        if company:
            filter['company__id'] = company

        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        sort_field = '-id'
        if field_name and order_by:
            if field_name =='username' and order_by=='asc':
                sort_field='cu_user__username'
            if field_name =='username' and order_by=='desc':
                sort_field='-cu_user__username'
            if field_name =='company' and order_by=='asc':
                sort_field='company__coc_name'
            if field_name =='company' and order_by=='desc':
                sort_field='-company__coc_name'
            

        return self.queryset.filter(**filter).order_by(sort_field)


class AttandanceSAPHiringReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = TCoreUserDetail.objects.filter(~Q(user_type='3rd Party'),cu_user__is_superuser=False).order_by('-id')
    serializer_class = AttandanceSAPHiringReportSerializerV2

    def get_queryset(self):
        start_date = self.request.query_params.get('start_date', None)
        end_date = self.request.query_params.get('end_date', None)
        queryset = self.queryset
        # print(queryset.count())
        if start_date and end_date:
            start_object = datetime.strptime(start_date, '%Y-%m-%d')
            delta = timedelta(days=1)
            end_object = datetime.strptime(end_date, '%Y-%m-%d')
            # print("in if")
            return self.queryset.filter(joining_date__date__gte=start_object, joining_date__date__lte=end_object + delta)
            # print(queryset.count())
        return self.queryset.filter(cu_user__is_superuser=False)


    def get(self, request, *args, **kwargs):
        response = super(AttandanceSAPHiringReportViewV2,self).get(self, request, *args, **kwargs)
        # print(len(response.data))
        if len(response.data) > 0:
            report_type = self.request.query_params.get('report_types')
            report_type = [rt.strip().lower() for rt in report_type.split(',')]
            df_report = pd.DataFrame.from_records(response.data)
            '''
                address, adhar_card, cost_center, date_specification, esi, ifsc_code, official_email_id,
                pan_no, pf_contribution, planned_working_time, ptax, uan
            '''
            field_list_dict = {
                'address': ['employee_name', 'employee_code', 'sap_id', 'joining_date', 'address_sub_type', 'care_of', 'street_and_house_no',
                            'address_2nd_line',
                            'pincode', 'city', 'district', 'region', 'country_key', 'phone_no', 'state_code'],
                'adhar_card': ['employee_name', 'employee_code', 'sap_id', 'joining_date', 'aadhar_no'],
                'cost_center': ['employee_name', 'employee_code', 'sap_id', 'start_date', 'company_name', 'company_code', 'cost_centre', 'wbs_element'],
                'date_specification': ['employee_name', 'personnel_no', 'employee_code', 'joining_date', 'group_joining_date',
                                       'begin_date',
                                       'retirement_date', 'last_date_of_working'],
                'esi': ['employee_name', 'employee_code', 'sap_id', 'joining_date', 'esi_sub_type', 'esi_no', 'esi_dispensary'],
                'ifsc_code': ['employee_name', 'employee_code', 'sap_id', 'start_date', 'ifsc_code'],
                'official_email_id': ['employee_name', 'employee_code', 'sap_id', 'start_date', 'email'],
                'pan_no': ['employee_name', 'employee_code', 'sap_id', 'joining_date', 'pan_no'],
                'pf_contribution': ['employee_name', 'employee_code', 'personnel_no', 'begin_date', 'provident_trust_fund', 'pension_trust_id',
                                    'employee_provide_fund_account_number',
                                    'emp_pension_no', 'employee_voluntary_provident_fund_contribution',
                                    'contributing_towards_pension_scheme',
                                    'pf_trust_code', 'pf_description'],
                'planned_working_time': ['employee_name','sap_id', 'joining_date', 'work_schedule_rule', 'time_management_status'],
                'ptax': ['employee_name', 'employee_code', 'sap_id', 'start_date', 'ptax_sub_type'],
                'uan': ['employee_name', 'employee_code', 'sap_id', 'joining_date', 'uan_no'],
                'bank_report': ['employee_name','company', 'employee_code', 'joining_date', 'pernr','bank_key', 'bank_account_no', 'mode_of_payment']
            }

            url_list = self.get_file_name_url(request=request, df_report=df_report, request_types=report_type,
                                              field_list_dict=field_list_dict)
            return Response({'urls': url_list, 'request_status': 1, 'msg': settings.MSG_SUCCESS})
        else:
            return Response({'request_status': 0, 'msg': 'No Data Found Between Given  Dates'})



    def get_file_name_url(self, request=None, df_report=None,request_types=None, field_list_dict=None):
        url_list = list()
        for request_type in request_types:
            field_list = field_list_dict[request_type]
            df_filtered = df_report[field_list]
            file_name = '{}'.format(request_type)
            file_path, file_name = self.create_file_path(file_name=file_name)
            df_filtered.to_excel(file_path, index = None)
            url = getHostWithPort(request) + file_name if file_name else None
            print ('AttandanceSAPHiringReportViewV2', file_path, file_name, url)
            url_list.append({
                'name': file_name,
                'url': url
            })
        return url_list

    def create_file_path(self, file_name=None):
        if os.path.isdir('media/attendance/sap_hiring_report'):
            file_name = 'media/attendance/sap_hiring_report/{}.xlsx'.format(file_name)
            file_path = settings.MEDIA_ROOT_EXPORT + file_name
        else:
            os.makedirs('media/attendance/sap_hiring_report')
            file_name = 'media/attendance/sap_hiring_report/{}.xlsx'.format(file_name)
            file_path = settings.MEDIA_ROOT_EXPORT + file_name

        return (file_path, file_name)


class WorkFromHomeReportV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = WorkFromHomeSerializerv2
    pagination_class = OnOffPagination
    ## DONOT DELETE - Shubhadeep
    # queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
    #                                                     Q(lock_status=False) &
    #                                                     Q(is_deleted=False) &
    #                                                     Q(is_late_conveyance=False) &
    #                                                     Q(checkin_benchmark=False) &
    #                                                     (Q(approved_status='approved') | Q(approved_status='reject')
    #                                                      | Q(approved_status='pending')) & Q(request_type='WFH'))
    
    # commented the previous queryset as no data was coming due to lock_status flag - Shubhadeep
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(is_deleted=False) &
                                                        Q(request_type='WFH'))


    def get_queryset(self):
        current_date = datetime.now().date()
        queryset = self.queryset

        sort_field = '-id'

        employee_id = self.request.query_params.get('employee_id', None)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        approval_atatus = self.request.query_params.get('approval_status', None)
        designation = self.request.query_params.get('designation', None)
        department = self.request.query_params.get("department", None)
        start_date = self.request.query_params.get('from_date', None)
        end_date = self.request.query_params.get('to_date', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        hod = self.request.query_params.get('hod', None)
        company = self.request.query_params.get('company', None)
        job_location = self.request.query_params.get('job_location', None)

        if field_name and order_by:
            if field_name == 'date_of_work_from_home' and order_by == 'asc':
                sort_field = 'attendance__date'
            if field_name == 'date_of_work_from_home' and order_by == 'desc':
                sort_field = '-attendance__date'
            if field_name == 'start_time' and order_by == 'asc':
                sort_field = 'duration_start'
            if field_name == 'start_time' and order_by == 'desc':
                sort_field = '-duration_start'
            if field_name == 'end_time' and order_by == 'asc':
                sort_field = 'duration_end'
            if field_name == 'end_time' and order_by == 'desc':
                sort_field = '-duration_end'

        filter = dict()
        # take current date only if start and end dates are not provided - Shubhadeep
        if start_date and end_date:
            start_object = datetime.strptime(start_date, '%Y-%m-%d')
            delta = timedelta(days=1)
            end_object = datetime.strptime(end_date, '%Y-%m-%d')
            queryset = queryset.filter(Q(attendance__date__lte=end_object + delta),
                                       Q(attendance__date__gte=start_object))
        else:
            month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()
            queryset = queryset.filter(
                Q(attendance_date__gte=month_master.year_start_date) & Q(attendance_date__lte=month_master.year_end_date))
        print('Total wfh', queryset.count())


        if approval_atatus:
            filter['approved_status'] = approval_atatus

        
        if employee_id:
            filter['attendance__employee'] = employee_id

        if designation:
            print(designation)
            filter["attendance__employee__cu_user__designation"] = designation

        if reporting_head:
            filter["attendance__employee__cu_user__reporting_head"] = reporting_head

        if hod:
            filter["attendance__employee__cu_user__hod"] = hod
        if department:
            filter["attendance__employee__cu_user__department"] = department
        if company:
            filter["attendance__employee__cu_user__company"] = company
            
        if job_location:
            if job_location == "HO":
                filter["attendance__employee__cu_user__job_location__iexact"] = 'HO'
            elif job_location == "other":
                queryset = queryset.exclude(attendance__employee__cu_user__job_location__iexact="HO")


        queryset = queryset.filter(~Q(attendance__employee__cu_user__cu_punch_id='#N/A'),
                                   attendance__employee__cu_user__termination_date__isnull=True,
                                    **filter).order_by(sort_field)
        # attendance__employee__cu_user__cu_is_deleted = False,

        return queryset

    @response_modify_decorator_list_or_get_after_execution_for_onoff_pagination
    def get(self, request, *args, **kwargs):
        response = super(WorkFromHomeReportV2View, self).get(self, request, args, kwargs)
        return response

class WorkFromHomeReportDownloadV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = WorkFromHomeDownloadSerializerv2
    # updated the queryset to match WorkFromHomeReportV2View - shubhadeep
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(is_deleted=False) &
                                                        Q(request_type='WFH'))

    def get_queryset(self):
        current_date = datetime.now().date()
        queryset = self.queryset

        sort_field = '-id'

        employee_id = self.request.query_params.get('employee_id', None)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        approval_atatus = self.request.query_params.get('approval_status', None)
        designation = self.request.query_params.get('designation', None)
        department = self.request.query_params.get("department", None)
        start_date = self.request.query_params.get('from_date', None)
        end_date = self.request.query_params.get('to_date', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        hod = self.request.query_params.get('hod', None)
        # Company = self.request.query_params.get('company', None)
        # Location = self.request.query_params.get('location', None)

        if field_name and order_by:
            if field_name == 'date_of_work_from_home' and order_by == 'asc':
                sort_field = 'attendance__date'
            if field_name == 'date_of_work_from_home' and order_by == 'desc':
                sort_field = '-attendance__date'
            if field_name == 'start_time' and order_by == 'asc':
                sort_field = 'duration_start'
            if field_name == 'start_time' and order_by == 'desc':
                sort_field = '-duration_start'
            if field_name == 'end_time' and order_by == 'asc':
                sort_field = 'duration_end'
            if field_name == 'end_time' and order_by == 'desc':
                sort_field = '-duration_end'

        # take current date only if start and end dates are not provided - Shubhadeep
        if start_date and end_date:
            start_object = datetime.strptime(start_date, '%Y-%m-%d')
            delta = timedelta(days=1)
            end_object = datetime.strptime(end_date, '%Y-%m-%d')
            queryset = queryset.filter(Q(attendance__date__lte=end_object + delta),
                                       Q(attendance__date__gte=start_object))
        else:
            month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()
            queryset = queryset.filter(
                Q(attendance_date__gte=month_master.year_start_date) & Q(attendance_date__lte=month_master.year_end_date))
        print('Total wfh download', queryset.count())

        if approval_atatus:
            # self.quryset = self.queryset.filter(approved_status=Approval_Status)
            queryset = queryset.filter(approved_status=approval_atatus)

        else:
            queryset = queryset

        filter = dict()
        if employee_id:
            filter['attendance__employee__id'] = employee_id

        if designation:
            print(designation)
            filter["attendance__employee__cu_user__designation__id"] = designation

        if reporting_head:
            filter["attendance__employee__cu_user__reporting_head__id"] = reporting_head

        if hod:
            filter["attendance__employee__cu_user__hod__id"] = hod
        if department:
            filter["attendance__employee__cu_user__department__id"] = department

        queryset = queryset.filter(~Q(attendance__employee__cu_user__cu_punch_id='#N/A'),
                                   attendance__employee__cu_user__termination_date__isnull=True,
                                    **filter).order_by(
            sort_field)
        # attendance__employee__cu_user__cu_is_deleted = False,

        work_from_home_set = WorkFromHomeDeviation.objects.filter(request__in=queryset, is_deleted=False)

        return work_from_home_set

    def get(self, request, *args, **kwargs):
        response = super(WorkFromHomeReportDownloadV2View, self).get(self, request, args, kwargs)
        print(response.data)

        if 'results' in response.data:
            response_s = response.data['results']
        else:
            response_s = response.data

        total_data_list = []
        for data in response_s:
            temp_dict = dict(data)
            temp_lst = list()
            temp_lst.append(temp_dict['name'])
            temp_lst.append(temp_dict['department'])
            temp_lst.append(temp_dict['designation'])
            temp_lst.append(temp_dict['reporting_head'])
            temp_lst.append(temp_dict['hod'])
            temp_lst.append(temp_dict['company'])
            temp_lst.append(temp_dict['location'])
            temp_lst.append(temp_dict['date'])
            temp_lst.append(temp_dict['approval_status'])
            temp_lst.append(temp_dict['start_time'])
            temp_lst.append(temp_dict['end_time'])
            temp_lst.append(temp_dict['work_done'])

            total_data_list.append(temp_lst)

        if len(total_data_list) > 0:
            from pandas import DataFrame
            if os.path.isdir('media/attendance/wfh_users_report/document'):
                file_name = 'media/attendance/wfh_users_report/document/wfh_users_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/wfh_users_report/document')
                file_name = 'media/attendance/wfh_users_report/document/wfh_users_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            df = DataFrame(
                total_data_list, columns=[
                    'name', 'department', 'designation', 'reporting_head', 'hod', 'company', 'location', 'date',
                    'approval_status', 'start_time', 'end_time', 'work_done'
                ]
            )
            df.to_excel(file_path, index=None, header=True)
            url = getHostWithPort(request) + file_name if file_name else None

            return Response({'download_url': url, 'request_status': 1, 'msg': settings.MSG_SUCCESS})


        else:
            return Response({'request_status': 0, 'msg': "NO DATA FOUND"})


# flexy attendace

class FlexiAttendanceDailyListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False)
    # queryset = Attendance.objects.all()
    serializer_class = AttendanceDailyListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        is_previous = self.request.query_params.get('is_previous', None)
        joining_date = None
        filter = {}
        date_range = None

        if self.queryset.count():
            if emp_id:
                filter['employee']=emp_id
                joining_date = TCoreUserDetail.objects.get(cu_user=emp_id).joining_date.date()
                # print("joining_date", joining_date)
            if current_date:
                # print("current_date",current_date)
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
                self.date_range_str = date_range[0]['month_start__date']
                self.date_range_end = date.date()

                if is_previous == 'true':
                    # print("is_previous",is_previous)
                    date = date_range[0]['month_start__date'] - timedelta(days=1)
                    # print("date",date)
                    date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                    # print("is_previous_date_range",date_range)
                    self.date_range_str = date_range[0]['month_start__date']
                    self.date_range_end = date_range[0]['month_end__date']
                # print("date_range",date_range)
            elif month and year:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            
            # print("elf.date_range",date_range)
            if date_range:
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']
            if filter:
                return self.queryset.filter(**filter)
            else:
                return self.queryset
        else:
            # print("ELLSSS", self.queryset)
            return self.queryset.filter(is_deleted=False)

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        is_previous = self.request.query_params.get('is_previous', None)
        response=super(FlexiAttendanceDailyListViewV2,self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        date_list_data = []

        for data in response.data:
            is_attendance_request = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
          
            # print(self.last_day_of_month(datetime.date(datetime.now().year,datetime.now().month, 1)))
            # print(datetime.now().year)
            print('date time', data['date'], '#######',data['id'])
            att_date = datetime.strptime(data['date'], "%Y-%m-%dT%H:%M:%S").date()
            date_list_data.append(att_date)

            print("data['employee']",data['employee'])
            tcore_user = TCoreUserDetail.objects.get(cu_user=data['employee'])
            print('tcore_user',tcore_user)

            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False).order_by('duration_start')
            # print("attendance_request",attendance_request)
            attendance_request_list = []
            # print("data",data)
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.vehicle_type and att_req.from_place and att_req.to_place and att_req.conveyance_expense and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    if att_req.approved_status == 'relese' or att_req.is_requested == False:
                        is_attendance_request = False

                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    work_form_home = WorkFromHomeDeviation.objects.filter(request=att_req, is_deleted=False).values('start_date_time', 'end_date_time', 'work_done')
                    
                    is_add_more_request = False
                    print('aaaaaaaaaaaaaaaaa',att_req.duration_start, att_req.attendance.login_time)
                    if att_req.attendance.is_present:
                        if (att_req.duration_start < att_req.attendance.login_time and att_req.duration_end < att_req.attendance.login_time) or\
                            (att_req.attendance.logout_time < att_req.duration_start and att_req.attendance.logout_time < att_req.duration_end):
                            is_add_more_request = True
                    else:
                        is_add_more_request = True
                    
                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'is_add_more_request':is_add_more_request,
                        'work_form_home': work_form_home,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : leave_type,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'lock_status' : att_req.lock_status,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        'conveyance_alloted_by_name' : (att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " +(att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }                  

                    attendance_request_list.append(attendance_request_dict)
            data['attendance_request'] = attendance_request_list
            data['is_attendance_request'] = is_attendance_request

            working_hour = get_flexi_working_hour_and_login_logout_time(tcore_user=tcore_user,date_obj=att_date)
            hrs, mins = divmod(int(working_hour),60)
            working_hour_min = '{} hrs {} mins'.format(hrs, mins) if hrs and mins else '{} mins'.format(mins)
            data['working_hour'] = working_hour_min
            active_day, is_hd_al_ab = is_flexi_date_active(tcore_user=tcore_user, date_ob=att_date)

            data['is_add_more_visible'] =  active_day and working_hour <= 13*60

            if day_remarks:
                data['day_remarks'] = day_remarks

        # if response.data:
        day_list = self.last_day_of_month(self.date_range_str,self.date_range_end)
        # print("date_list_data",date_list_data)
        joining_date = None
        joining_date = TCoreUserDetail.objects.only('joining_date').get(cu_user=emp_id).joining_date.date()
        new_dict = {}
        for day in day_list:
            if day not in date_list_data:
                # print("day", day)
                new_dict={
                    'id' : None,
                    'date' : day.strftime("%Y-%m-%dT%H:%M:%S"),
                    'is_present' : False,
                    "is_attendance_request": False,
                    "day_remarks": "Absent",
                    "attendance_request":[],
                    "is_deleted":False,
                    "login_time": "",
                    "logout_time": ""
                    }
                if joining_date:
                    if joining_date > day:
                        new_dict['day_remarks']="Not Joined"
                    # elif joining_date == day:
                    #     new_dict['day_remarks']="Joining date"
                    
                response.data.append(new_dict)


        response.data = self.list_synchronization(list(response.data))

        return response

    def last_day_of_month(self,sdate, edate):
        days_list = []
        # sdate = date(2008, 8, 15)   # start date
        # edate = date(2008, 9, 15)   # end date
        # print("sdate",sdate   , edate)

        delta = edate - sdate       # as timedelta

        for i in range(delta.days + 1):
            day = sdate + timedelta(days=i)
            # print(day)
            days_list.append(day)
        return days_list


    def list_synchronization(self, list_data: list)-> list:
        data = pd.DataFrame(list_data)
        data = data.replace(np.nan, 0, regex=True)
        data.sort_values("date", axis = 0, ascending = True, inplace = True,)
        col_list = data.columns.values
        row_list = data.values.tolist()
        total_result = list()
        for row in row_list:
            data_dict = dict(zip(col_list,row))
            total_result.append(data_dict)
        list_data = total_result
        return list_data


class FlexiAddAttendanceRequestViewV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    serializer_class = FlexiAddAttendanceRequestSerializerV2

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)


class FlexiAttendenceApprovalRequestViewV2(generics.RetrieveUpdateAPIView):
	permission_classes = [IsAuthenticated]
	authentication_classes = [TokenAuthentication]
	queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
	serializer_class = FlexiAttendenceApprovalRequestEditSerializerV2



class FlexiAttendanceSummaryListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = FlexiAttendanceSummaryListSerializerV2
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        print('blank_queryset',blank_queryset)
        emp_id = self.request.query_params.get('emp_id', None)
        current_date = self.request.query_params.get('current_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        filter = {}
        date_range = None
        if self.queryset.count():
            print("self.queryset.count()",self.queryset.count())
            if current_date and emp_id:
                date = datetime.strptime(current_date, "%Y-%m-%d")
                date_range = AttendenceMonthMaster.objects.filter(month_start__date__lte=date,month_end__date__gte=date).values('month_start__date','month_end__date')
                # print("date_range",date_range)
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year).values('month_start__date','month_end__date')
                print("date_range",date_range)

            if date_range:
                print("This is if")
                filter['employee']=emp_id
                filter['date__date__gte'] = date_range[0]['month_start__date']
                filter['date__date__lte'] = date_range[0]['month_end__date']

        if filter :
            print('filter',self.queryset.filter(**filter))
            return self.queryset.filter(**filter)
        else:
            # print('else filter',self.queryset)
            return blank_queryset

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response=super(FlexiAttendanceSummaryListViewV2,self).get(self, request, args, kwargs)
        print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False).order_by('duration_start')
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None

              
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance' : att_req.is_late_conveyance,
                        'is_conveyance' : att_req.is_conveyance,
                        # 'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        # 'from_place' : att_req.from_place,
                        # 'to_place' : att_req.to_place,
                        # 'conveyance_expense' : att_req.conveyance_expense,
                        # 'approved_expenses' : att_req.approved_expenses,
                        # 'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'checkin_benchmark' : att_req.checkin_benchmark,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                    ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                    conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                    if conveyance_details_queryset:
                        
                        tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                        conveyance_details = conveyance_details_queryset[0]
                        first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                        last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                        #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                        conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                        deviation_amount = None

                        if conveyance_eligibility_details:
                            conveyance_eligibility_details = conveyance_eligibility_details[0]
                            #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                            conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                            
                            ## Change Request HRMS_Conveyance CR-5.0 doc | Date: 16-09-2020 | Rupam Hazra ##

                            # if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                            #     deviation_amount = (conveyance_details_approved_expenses - conveyance_eligibility_details_amount)

                            deviation_amount = conveyance_details.deviation_amount

                            conveyance_dict = {
                            'cost_centre': tcore_user.cost_centre,
                            'deviation_amount':deviation_amount,
                            'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                            'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                            'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                            'from_place' : conveyance_details.from_place,
                            'to_place' : conveyance_details.to_place,
                            'conveyance_expense' : conveyance_details.conveyance_expense,
                            'approved_expenses' : conveyance_details.approved_expenses,
                            'conveyance_purpose' : conveyance_details.conveyance_purpose,
                            'conveyance_alloted_by' : first_name + " " + last_name,
                            'conveyance_approval' : conveyance_details.status,
                            'conveyance_approval_name' :conveyance_details.status,
                            'status':conveyance_details.status,
                            'conveyance_durations' : att_req.duration,
                            'duration_start': att_req.duration_start,
                            'duration_end': att_req.duration_end,
                            'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                            'is_paid': conveyance_details.is_paid
                            }
                            doc_list=[]
                            conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                            if conveyance_doc:
                                for c_d in conveyance_doc:
                                    doc_dict={
                                    'id':c_d.id,
                                    'document_name':c_d.document_name,
                                    'document':request.build_absolute_uri(c_d.document.url)
                                    }
                                    doc_list.append(doc_dict)
                                conveyance_dict['conveyance_doc']=doc_list
                            else:
                                conveyance_dict['conveyance_doc']=doc_list

                            conveyance_list.append(conveyance_dict)

                    ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##

            data['conveyance_details'] = conveyance_list
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                    data['day_remarks'] = day_remarks

        return response


class FlexiAttendanceGraceLeaveListModifiedViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    # serializer_class = AttendanceGraceLeaveListModifiedSerializer


    def all_leave_calculation_upto_applied_date(self, date_object=None, user=None):
        from django.db.models import Sum

        '''
        Start :: Normal leave availed by user
        '''

        availed_hd_ab=0.0
        availed_ab=0.0
        availed_al = 0.0
        availed_hd_al=0.0
        carry_forward_leave = AttendanceCarryForwardLeaveBalanceYearly.objects.filter(
                    employee=user.cu_user, 
                    is_deleted=False,
                    ).first() #.aggregate(Sum('leave_balance'))
        print('carry_forward_leave:',carry_forward_leave)

        salary13_carry_forward_al = 0.0
        total_carry_forward_leave = 0.0
        if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13':
            total_carry_forward_leave = carry_forward_leave.leave_balance
            if user.is_confirm:
                salary13_carry_forward_al = carry_forward_leave.leave_balance
            else:
                approved_leave = JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
                salary13_carry_forward_al = float(carry_forward_leave.leave_balance) - float(approved_leave.el)
        
        # salary13_carry_forward_al = carry_forward_leave.leave_balance if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13'and user.is_confirm else 0.0
        print('salary13_carry_forward_al:', salary13_carry_forward_al)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                                    month_end__date__gte=date_object,is_deleted=False).first()
        
        print("month_master:", month_master)
        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((
            Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
            duration_start__date__gte=month_master.year_start_date.date(),
            attendance__employee=user.cu_user.id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("date_list",date_list)
        
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
            filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                    (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                    attendance__employee=user.cu_user.id,
                    attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                        leave_type_final = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    leave_type_final_hd = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print('availed_master_wo_reject_fd',availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:
            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0
                        elif availed_FD.filter(leave_type_final='AL'):
                            availed_al = availed_al + 1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'AL':
                            availed_al = availed_al + 1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0
                        elif availed_FD.filter(leave_type_final_hd='AL'):
                            availed_hd_al=availed_hd_al+1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'AL':
                            availed_hd_al=availed_hd_al+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
        
        '''
            Get total leave allocation(monthly) by request start and end date
        '''
        leave_allocation_per_month = 0.0
        # leave_allocation_yearly = 0.0

        if user.is_confirm == False: 
            if user.salary_type and user.salary_type.st_name=='13':
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                    month__month_end__date__lte=date_object)|Q(month__month_start__date__lte=date_object,
                    month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))
                print('leave_allocation_per_month_d',leave_allocation_per_month_d)
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure_not_confirm__sum'] if leave_allocation_per_month_d['round_figure_not_confirm__sum'] else 0.0
                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure_not_confirm'))['round_figure_not_confirm__sum']
                # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0

            else:
                leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
                leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0

                print('leave_allocation_per_month',leave_allocation_per_month)

                # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
                #                                                     employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        else:
            leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter((Q(month__month_start__date__gte=month_master.year_start_date.date(),
                month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,
                month__month_end__date__gte=date_object)),employee=user.cu_user).aggregate(
                    Sum('round_figure'))
            leave_allocation_per_month = leave_allocation_per_month_d['round_figure__sum'] if leave_allocation_per_month_d['round_figure__sum'] else 0.0
            print('leave_allocation_per_month',leave_allocation_per_month)

            # leave_allocation_yearly = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(month__year_start_date__date=month_master.year_start_date.date(),
            #                                                         employee=user.cu_user).aggregate(Sum('round_figure'))['round_figure__sum']
        
        # leave_allocation_yearly = leave_allocation_yearly if leave_allocation_yearly else 0.0
        
        # current year leave + salary 13 leave carry forward
        # leave_allocation_yearly = leave_allocation_yearly + total_carry_forward_leave

        print('leave_allocation_per_month',leave_allocation_per_month)           


        # ::````Advance Leave Calculation```:: #
        '''
            Advance leave calculation from  after last attendance date to current month master end date.
        '''
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=user.cu_user)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))&
                                                           Q(start_date__date__lte=month_master.month_end.date())
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_al=0
        advance_ab=0
        day=0

        last_attendance = Attendance.objects.filter(employee=user.cu_user).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<month_master.month_end.date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = month_master.month_end.date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='AL':
                        advance_al+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day
                    print('advance_al loop', advance_al)


        '''
            Section for count total leave count which means 
            total of advance leaves and approval leave
        '''
        
        print('advance_al',advance_al)
        # print('how_many_days_ab_taken',how_many_days_ab_taken)
        
        #print("availed_el",availed_el)
        print("availed_al",availed_al)
        print('availed_ab',availed_ab)
        print('advance_ab',advance_ab)
        print('availed_hd_ab',availed_hd_ab)
        total_availed_al=float(availed_al)+float(advance_al)+float(availed_hd_al/2)
        total_availed_ab=float(availed_ab) + float(advance_ab) +float(availed_hd_ab/2)
        print("total_availed_al",total_availed_al)
        print('total_availed_ab', total_availed_ab)

        '''
            Section for remaining leaves from granted leave - availed leave
        '''
        leave_allocation_per_month  = float(leave_allocation_per_month) + float(salary13_carry_forward_al)
        balance_al = leave_allocation_per_month - float(total_availed_al)


        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=user.cu_user) &
                                                                Q(duration_start__gte=month_master.month_start) &
                                                                Q(duration_start__lte=month_master.month_end) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        availed_grace = availed_grace if availed_grace else 0
        total_month_grace = month_master.grace_available
        grace_balance = total_month_grace - availed_grace

        if user.salary_type and user.salary_type.st_name=='13' and user.is_confirm == False:
            is_confirm = False
        else:
            is_confirm = True
        yearly_leave_allocation = float(user.granted_leaves_cl_sl) + float(user.granted_el) + float(total_carry_forward_leave)
        month_start = month_master.month_start
        if user.joining_date > month_master.year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            if approved_leave:
                yearly_leave_allocation = float(approved_leave.granted_leaves_cl_sl) + float(approved_leave.el)
                if month_master.month==approved_leave.month:    #for joining month only
                    total_month_grace=approved_leave.first_grace
                    month_start=user.joining_date
                    grace_balance=total_month_grace - availed_grace

        # START :: Flexi Hour Calculation #
        # if date_object <= month_master.fortnight_date.date():
        #     flexi_start_date = month_master.month_start
        #     flexi_end_date = month_master.fortnight_date
        # else:
        #     flexi_start_date = month_master.fortnight_date + timedelta(days=1)
        #     flexi_end_date = month_master.month_end
        # print('flexi_start_date',flexi_start_date)
        # print('flexi_end_date', flexi_end_date)
        
        total_hours_1st, working_hours_1st = get_flexi_hours_for_work_days(tcore_user=user, start_date=month_master.month_start, end_date=month_master.fortnight_date)
        total_hrs_1st, total_mins_1st = divmod(int(total_hours_1st), 60)
        total_hrs_mins_1st = '{} hrs {} mins'.format(total_hrs_1st, total_mins_1st) if total_hrs_1st else '{} mins'.format(total_mins_1st)
        working_hrs_1st, working_mins_1st = divmod(int(working_hours_1st), 60)
        working_hrs_mins_1st = '{} hrs {} mins'.format(working_hrs_1st, working_mins_1st) if working_hrs_1st else '{} mins'.format(working_mins_1st)

        
        total_hours_2st, working_hours_2st = get_flexi_hours_for_work_days(tcore_user=user, start_date=month_master.fortnight_date + timedelta(days=1), end_date=month_master.month_end)
        total_hrs_2st, total_mins_2st = divmod(int(total_hours_2st), 60)
        total_hrs_mins_2st = '{} hrs {} mins'.format(total_hrs_2st, total_mins_2st) if total_hrs_2st else '{} mins'.format(total_mins_2st)
        working_hrs_2st, working_mins_2st = divmod(int(working_hours_2st), 60)
        working_hrs_mins_2st = '{} hrs {} mins'.format(working_hrs_2st, working_mins_2st) if working_hrs_2st else '{} mins'.format(working_mins_2st)
        
        fortnight = [
            {
                'fortnight': 1,
                'is_active': date_object <= month_master.fortnight_date.date(),
                'flexi_start_date': month_master.month_start,
                'flexi_end_date': month_master.fortnight_date,
                'total_hours': total_hrs_mins_1st,
                'working_hours': working_hrs_mins_1st
            },
            {
                'fortnight': 2,
                'is_active': date_object > month_master.fortnight_date.date(),
                'flexi_start_date': month_master.fortnight_date + timedelta(days=1),
                'flexi_end_date': month_master.month_end,
                'total_hours': total_hrs_mins_2st,
                'working_hours': working_hrs_mins_2st
            }
        ]
        
        # END :: Flexi Hour Calculation #

        result = {
            "month_start":month_start,
            "month_end":month_master.month_end,
            "year_start":month_master.year_start_date,
            "year_end":month_master.year_end_date,
            "is_confirm": is_confirm,
            "total_eligibility": yearly_leave_allocation,
            "total_accumulation": leave_allocation_per_month,
            "total_consumption": total_availed_al,
            "total_available_balance": balance_al,
            "total_absent": total_availed_ab,
            "fortnight": fortnight
            }

        return result

    def get(self, request, *args, **kwargs):
        # response=super(AttendanceGraceLeaveListModifiedView,self).get(self, request, args, kwargs)
        date =self.request.query_params.get('date', None)
        # print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        #date_object = datetime.now().date()
        #print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            #print('sada',type(total_month_grace[0]['month_start']))
            '''
                Changed by Rupam Hazra due to same variable date_object
            '''
            date_object = total_month_grace[0]['month_start'].date()- timedelta(days=1)

        user = TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False).first()
        result = self.all_leave_calculation_upto_applied_date(date_object=date_object, user=user)
        
        data_dict['result'] = result
        time_last = datetime.now()-aa
        #print("time_last",time_last)
        # data_dict['result'] = "Successful"
        if result:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_SUCCESS
        elif len(result) == 0:
            data_dict['request_status'] = 1
            data_dict['msg'] = settings.MSG_NO_DATA
        else:
            data_dict['request_status'] = 0
            data_dict['msg'] = settings.MSG_ERROR
        return Response(data_dict)


class FlexiAttendanceApprovalReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(attendance__employee__cu_user__is_flexi_hour=True) &
                                                        Q(lock_status=False) &
                                                        Q(is_deleted=False) &
                                                        Q(is_late_conveyance=False) &
                                                        Q(checkin_benchmark=False) &
                                                        (Q(approved_status='approved') | Q(approved_status='reject')) &
                                                        (Q(request_type='HD') | Q(request_type='FD') | Q(request_type='WFH') | Q(request_type='FOD')|
                                                        Q(request_type='POD')) &
                                                        (Q(leave_type='AL') | Q(leave_type='AB'))
                                                        )

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()

        self.queryset = self.queryset.filter(
            Q(attendance_date__gte=month_master.year_start_date) & Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            sort_field = '-id'
            search = self.request.query_params.get('search', None)
            request_type = self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type = self.request.query_params.get('leave_type', None)
            approved_type = self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()

            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                elif field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                elif field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                elif field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                elif field_name == 'created_at' and order_by == 'asc':
                    sort_field = 'created_at'
                elif field_name == 'created_at' and order_by == 'desc':
                    sort_field = '-created_at'
                elif field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                elif field_name == 'department' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__department'
                elif field_name == 'department' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__department'
                elif field_name == 'designation' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__designation'
                elif field_name == 'designation' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__designation'
                elif field_name == 'reporting_head' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__reporting_head'
                elif field_name == 'reporting_head' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__reporting_head'
                elif field_name == 'hod' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__hod'
                elif field_name == 'hod' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',
                                                                                                    flat=True)
                    filter['attendance__employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                            flat=True)
                    filter['attendance__employee__in'] = emp_list

                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list = request_type.split(',')
                    filter['request_type__in'] = request_type_list
                if leave_type:
                    leave_type_list = leave_type.split(',')
                    filter['leave_type__in'] = leave_type_list
                if approved_type:
                    approved_type_list = approved_type.split(',')
                    filter['approved_status__in'] = approved_type_list
                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) | Q(
                            attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)

                        queryset_all = (queryset_all | queryset)
                        return queryset_all

                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) & Q(
                            attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all
                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiAttendanceApprovalReportViewV2, self).get(self, request, args, kwargs)
        data_list = list()
        for data in response.data['results']:
            data['approved_status'] = data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'

        return response


class FlexiAttendanceApprovalReportExportDownloadViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(attendance__employee__cu_user__is_flexi_hour=True) &
                                                        Q(lock_status=False) &
                                                        Q(is_deleted=False) &
                                                        Q(is_late_conveyance=False) &
                                                        Q(checkin_benchmark=False) &
                                                        (Q(approved_status='approved') | Q(approved_status='reject')) &
                                                        (Q(request_type='HD') | Q(request_type='FD') | Q(request_type='WFH') | Q(request_type='FOD')|
                                                        Q(request_type='POD')) &
                                                        (Q(leave_type='AL') | Q(leave_type='AB'))
                                                        )

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()

        self.queryset = self.queryset.filter(
            Q(attendance_date__gte=month_master.year_start_date) & Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            sort_field = '-id'
            search = self.request.query_params.get('search', None)
            request_type = self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type = self.request.query_params.get('leave_type', None)
            approved_type = self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()

            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                elif field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                elif field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                elif field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                elif field_name == 'created_at' and order_by == 'asc':
                    sort_field = 'created_at'
                elif field_name == 'created_at' and order_by == 'desc':
                    sort_field = '-created_at'
                elif field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                elif field_name == 'department' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__department'
                elif field_name == 'department' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__department'
                elif field_name == 'designation' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__designation'
                elif field_name == 'designation' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__designation'
                elif field_name == 'reporting_head' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__reporting_head'
                elif field_name == 'reporting_head' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__reporting_head'
                elif field_name == 'hod' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__hod'
                elif field_name == 'hod' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',
                                                                                                    flat=True)
                    filter['attendance__employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                            flat=True)
                    filter['attendance__employee__in'] = emp_list

                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list = request_type.split(',')
                    filter['request_type__in'] = request_type_list
                if leave_type:
                    leave_type_list = leave_type.split(',')
                    filter['leave_type__in'] = leave_type_list
                if approved_type:
                    approved_type_list = approved_type.split(',')
                    filter['approved_status__in'] = approved_type_list
                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) | Q(
                            attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)

                        queryset_all = (queryset_all | queryset)
                        return queryset_all

                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) & Q(
                            attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all
                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()

    def get(self, request, *args, **kwargs):
        response = super(__class__, self).get(self, request, args, kwargs)
        data_list = list()
        for data in response.data:
            data['approved_status'] = data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'

            data_list.append([data['employee_name'], data['duration_start'][:10], data['duration_start'][11:19],
                              data['duration_end'][11:19], \
                              data['duration'], data['deviation_amount'], data['request_date'], data['request_type'],
                              data['justification'], data['justified_at'], data['remarks'],
                              data['approved_status'], data['approved_at'], data['leave_type'], data['created_at'][:10], \
                              data['created_at'][11:19], data['department'], data['designation'],
                              data['reporting_head'], data['hod']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/approval_report/document'):
                file_name = 'media/attendance/approval_report/document/approval_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/approval_report/document')
                file_name = 'media/attendance/approval_report/document/approval_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name', 'Date', 'Duration Start', 'Duration End',
                                                        'Duration(Min.)',
                                                        'Deviation Amount', 'Requested Date', 'Request Type',
                                                        'Justification', 'Justified Date', 'Remarks',
                                                        'Approved Status', 'Approved at', 'Leave Type',
                                                        'Requested(Date)', 'Requested(Time)', 'Department',
                                                        'Designation', 'Reporting Head', 'HOD'])
            export_csv = final_df.to_excel(file_path, index=None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:
            return Response({'request_status': 1, 'msg': 'Success', 'url': url})
        else:
            return Response({'request_status': 0, 'msg': 'Not Found', 'url': url})


class FlexiAttendanceAdvanceLeaveReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = FlexiAttendanceAdvanceLeaveListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = EmployeeAdvanceLeaves.objects.filter(Q(is_deleted=False) &
                                                    Q(employee__cu_user__is_flexi_hour=True)
                                                    &(Q(approved_status='approved') | Q(approved_status='reject'))
                                                    )

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
            start_date__date__lte=month_master.year_end_date.date()))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    )
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(
                            Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
                                start_date__date__lte=month_master.year_end_date.date()))
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            approved_type = self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            sort_field = '-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)

            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'start_date' and order_by == 'asc':
                    sort_field = 'start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name == 'start_date' and order_by == 'desc':
                    sort_field = '-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name == 'end_date' and order_by == 'asc':
                    sort_field = 'end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name == 'end_date' and order_by == 'desc':
                    sort_field = '-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name == 'date_of_application' and order_by == 'asc':
                    sort_field = 'created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name == 'date_of_application' and order_by == 'desc':
                    sort_field = '-created_at'
                elif field_name == 'department' and order_by == 'desc':
                    sort_field = '-employee__cu_user__department'
                elif field_name == 'department' and order_by == 'asc':
                    sort_field = 'employee__cu_user__department'
                elif field_name == 'designation' and order_by == 'desc':
                    sort_field = '-employee__cu_user__designation'
                elif field_name == 'designation' and order_by == 'asc':
                    sort_field = 'employee__cu_user__designation'
                elif field_name == 'reporting_head' and order_by == 'desc':
                    sort_field = '-employee__cu_user__reporting_head'
                elif field_name == 'reporting_head' and order_by == 'asc':
                    sort_field = 'employee__cu_user__reporting_head'
                elif field_name == 'hod' and order_by == 'desc':
                    sort_field = '-employee__cu_user__hod'
                elif field_name == 'hod' and order_by == 'asc':
                    sort_field = 'employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',
                                                                                                    flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                            flat=True)
                    filter['employee__in'] = emp_list

                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list = leave_type.split(',')
                    filter['leave_type__in'] = leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list = approved_type.split(',')
                    filter['approved_status__in'] = approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)

                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) | Q(
                            employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all

                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(
                            employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all


                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiAttendanceAdvanceLeaveReportViewV2, self).get(self, request, args, kwargs)
        data_list = list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name == 'leave_count' and order_by == 'asc':
            # import operator
            response.data['results'] = sorted(response.data['results'], key=lambda x: x['leave_count'])
            print('response.data', response.data['results'])

        for data in response.data['results']:
            print('data', data)
            data['employee_name'] = ''
            data['approved_status'] = data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name', 'last_name')
            if emp_name:
                first_name = emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name = emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            data['start_date'] = data['start_date'][0:10] if data['start_date'] else ''
            data['end_date'] = data['end_date'][0:10] if data['end_date'] else ''

        return response


class FlexiAttendanceAdvanceLeaveReportExportDownloadViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = FlexiAttendanceAdvanceLeaveListSerializerV2
    queryset = EmployeeAdvanceLeaves.objects.filter(Q(is_deleted=False) &
                                                    Q(employee__cu_user__is_flexi_hour=True) &
                                                    (Q(approved_status='approved') | Q(approved_status='reject'))
                                                    )

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
            start_date__date__lte=month_master.year_end_date.date()))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    )
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(
                            Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
                                start_date__date__lte=month_master.year_end_date.date()))
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            approved_type = self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            sort_field = '-id'
            dept_filter = self.request.query_params.get('dept_filter', None)
            users = self.request.query_params.get('users', None)

            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'start_date' and order_by == 'asc':
                    sort_field = 'start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('start_date')
                elif field_name == 'start_date' and order_by == 'desc':
                    sort_field = '-start_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                elif field_name == 'end_date' and order_by == 'asc':
                    sort_field = 'end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('end_date')
                elif field_name == 'end_date' and order_by == 'desc':
                    sort_field = '-end_date'
                    # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                elif field_name == 'date_of_application' and order_by == 'asc':
                    sort_field = 'created_at'
                    # return self.queryset.filter(is_deleted=False).order_by('created_at')
                elif field_name == 'date_of_application' and order_by == 'desc':
                    sort_field = '-created_at'
                elif field_name == 'department' and order_by == 'desc':
                    sort_field = '-employee__cu_user__department'
                elif field_name == 'department' and order_by == 'asc':
                    sort_field = 'employee__cu_user__department'
                elif field_name == 'designation' and order_by == 'desc':
                    sort_field = '-employee__cu_user__designation'
                elif field_name == 'designation' and order_by == 'asc':
                    sort_field = 'employee__cu_user__designation'
                elif field_name == 'reporting_head' and order_by == 'desc':
                    sort_field = '-employee__cu_user__reporting_head'
                elif field_name == 'reporting_head' and order_by == 'asc':
                    sort_field = 'employee__cu_user__reporting_head'
                elif field_name == 'hod' and order_by == 'desc':
                    sort_field = '-employee__cu_user__hod'
                elif field_name == 'hod' and order_by == 'asc':
                    sort_field = 'employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',
                                                                                                    flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                            flat=True)
                    filter['employee__in'] = emp_list

                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['end_date__date__lte'] = end_object + timedelta(days=1)

                if leave_type:
                    leave_type_list = leave_type.split(',')
                    filter['leave_type__in'] = leave_type_list
                    # return self.queryset.filter(leave_type__in=leave_type_list)
                if approved_type:
                    approved_type_list = approved_type.split(',')
                    filter['approved_status__in'] = approved_type_list
                    # return self.queryset.filter(approved_status__in=approved_type_list)

                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) | Q(
                            employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all

                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(
                            employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        queryset_all = (queryset_all | queryset)
                        return queryset_all


                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()

    def get(self, request, *args, **kwargs):
        response = super(__class__, self).get(self, request, args, kwargs)
        data_list = list()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name == 'leave_count' and order_by == 'asc':
            # import operator
            response.data = sorted(response.data, key=lambda x: x['leave_count'])
            print('response.data', response.data)

        for data in response.data:
            print('data', data)
            data['employee_name'] = ''
            data['approved_status'] = data['approved_status'].capitalize() if data['approved_status'] else None
            emp_name = User.objects.filter(id=data['employee']).values('first_name', 'last_name')
            if emp_name:
                first_name = emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name = emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            data['start_date'] = data['start_date'][0:10] if data['start_date'] else ''
            data['end_date'] = data['end_date'][0:10] if data['end_date'] else ''

            data_list.append(
                [data['employee_name'], data['start_date'], data['end_date'], data['leave_type'], data['leave_count'],
                 data['approved_status'], data['reason'], data['remarks']])
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/advance_leave_report/document'):
                file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/advance_leave_report/document')
                file_name = 'media/attendance/advance_leave_report/document/advance_leave_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list,
                                    columns=['Employee Name', 'Start Date', 'End Date', 'Leave Type', 'Leave Count',
                                             'Approved Status',
                                             'Reason', 'Remarks'])
            export_csv = final_df.to_excel(file_path, index=None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:
            return Response({'request_status': 1, 'msg': 'Success', 'url': url})
        else:
            return Response({'request_status': 0, 'msg': 'Not Found', 'url': url})


class FlexiAttendanceConveyanceAfterApprovalListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(attendance__employee__cu_user__is_flexi_hour=True,
                                                        conveyance_approval__gt=0, is_deleted=False)
    serializer_class = FlexiAttendanceConveyanceApprovalListSerializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        # queryset=self.queryset.filter(status=1)

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:

                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            sort_field = '-id'
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'date' and order_by == 'asc':
                    sort_field = 'duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name == 'date' and order_by == 'desc':
                    sort_field = '-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                    # return self.queryset.all().order_by('-duration_start')
                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                    # return self.queryset.all().order_by('-duration_end')
                if field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                    # return self.queryset.all().order_by('duration')
                if field_name == 'duration' and order_by == 'desc':
                    sort_field = '-duration'
                    # return self.queryset.all().order_by('-duration')

            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id = TCoreUserDetail.objects.filter(designation=designation, department=department).values(
                        'cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id]
                elif department:
                    department_id = TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id]
                    print(filter)
                elif designation:
                    designation_id = TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id]
                    print(filter)
                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) | Q(
                            attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset
                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) & Q(
                            attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset

                else:
                    queryset = self.queryset.filter(conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                        sort_field)
                    return queryset

            else:
                print('filter:', filter)
                return self.queryset.filter(conveyance_approval__gt=0, is_deleted=False, **filter).order_by(sort_field)
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):

        response = super(FlexiAttendanceConveyanceAfterApprovalListView, self).get(self, request, *args, **kwargs)
        convay_list = []
        for data in response.data['results']:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            print(user_name.employee.first_name)
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            print(benifit_id)
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            print(alloyance_per_day)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name = VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name = None

            alloted_by = AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name + " " + alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None
            conveyance_approved_by = AttendanceApprovalRequest.objects.get(id=data['id'])
            if conveyance_approved_by.conveyance_approved_by:
                job_conveyance_approved_by = conveyance_approved_by.conveyance_approved_by.first_name + " " + conveyance_approved_by.conveyance_approved_by.last_name
            else:
                job_conveyance_approved_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)

            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount': data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by': job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by': job_conveyance_approved_by
            }
            doc_list = []
            conveyance_doc = AttandanceApprovalDocuments.objects.filter(request=data['id'], is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict = {
                        'id': c_d.id,
                        'document_name': c_d.document_name,
                        'document': request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc'] = doc_list
            else:
                data_dict['conveyance_doc'] = doc_list
            convay_list.append(data_dict)
        response.data['results'] = convay_list
        return response


class FlexiAttendanceConveyanceAfterApprovalListExportDownloadView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(attendance__employee__cu_user__is_flexi_hour=True,
                                                        conveyance_approval__gt=0, is_deleted=False)
    serializer_class = FlexiAttendanceConveyanceApprovalListSerializer

    def get_queryset(self):
        # queryset=self.queryset.filter(status=1)

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:

                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            filter = {}
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            sort_field = '-id'
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'date' and order_by == 'asc':
                    sort_field = 'duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name == 'date' and order_by == 'desc':
                    sort_field = '-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                    # return self.queryset.all().order_by('-duration_start')
                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                    # return self.queryset.all().order_by('-duration_end')
                if field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                    # return self.queryset.all().order_by('duration')
                if field_name == 'duration' and order_by == 'desc':
                    sort_field = '-duration'
                    # return self.queryset.all().order_by('-duration')

            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id = TCoreUserDetail.objects.filter(designation=designation, department=department).values(
                        'cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id]
                elif department:
                    department_id = TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id]
                    print(filter)
                elif designation:
                    designation_id = TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id]
                    print(filter)
                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) | Q(
                            attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset
                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) & Q(
                            attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset

                else:
                    queryset = self.queryset.filter(conveyance_approval__gt=0, is_deleted=False, **filter).order_by(
                        sort_field)
                    return queryset

            else:
                print('filter:', filter)
                return self.queryset.filter(conveyance_approval__gt=0, is_deleted=False, **filter).order_by(sort_field)
        else:
            return list()

    def get(self, request, *args, **kwargs):

        response = super(__class__, self).get(self, request, *args, **kwargs)
        convay_list = []
        data_list = list()
        for data in response.data:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            # print(user_name.employee.first_name)
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            # print(benifit_id)
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            # print(alloyance_per_day)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name = VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name = None

            alloted_by = AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name + " " + alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None
            conveyance_approved_by = AttendanceApprovalRequest.objects.get(id=data['id'])
            if conveyance_approved_by.conveyance_approved_by:
                job_conveyance_approved_by = conveyance_approved_by.conveyance_approved_by.first_name + " " + conveyance_approved_by.conveyance_approved_by.last_name
            else:
                job_conveyance_approved_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)

            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount': data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by': job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by': job_conveyance_approved_by
            }
            doc_list = []
            conveyance_doc = AttandanceApprovalDocuments.objects.filter(request=data['id'], is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict = {
                        'id': c_d.id,
                        'document_name': c_d.document_name,
                        'document': request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc'] = doc_list
            else:
                data_dict['conveyance_doc'] = doc_list
            convay_list.append(data_dict)
            data['employee_name'] = user_name.employee.first_name + " " + user_name.employee.last_name
            data_list.append([data['employee_name'], tcore_user.cost_centre, data['deviation_amount'],
                              allowance_money, data['is_conveyance'], data['is_late_conveyance'],
                              data['conveyance_approval'],
                              vehical_name, data['conveyance_purpose'], job_alloted_by, data['from_place'],
                              data['to_place'], data['conveyance_expense'], data['approved_expenses'],
                              data['conveyance_remarks'], data['duration_start'],
                              data['duration_end'], data['duration'], job_conveyance_approved_by])

        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/attendance_conveyance_approvel/document'):
                file_name = 'media/attendance/attendance_conveyance_approvel/document/attendance_conveyance_approvel.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/attendance_conveyance_approvel/document')
                file_name = 'media/attendance/attendance_conveyance_approvel/document/attendance_conveyance_approvel.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list,
                                    columns=['Employee Name', 'Cost Centre', 'Deviation amount', 'Eligibility',
                                             'Conveyance', 'Late Conveyance', 'Conveyance approval', 'Vehicle Type',
                                             'Conveyance purpose', 'Conveyance alloted by',
                                             'From place', 'To place', 'Conveyance expense', 'Approved expenses',
                                             'Conveyance remarks',
                                             'Duration start', 'Duration end', 'Duration', 'Conveyance approved by'])
            export_csv = final_df.to_excel(file_path, index=None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:
            return Response({'request_status': 1, 'msg': 'Success', 'url': url})
        else:
            return Response({'request_status': 0, 'msg': 'Not Found', 'url': url})


class FlexiAttendanceLeaveApprovalListV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = FlexiAttendanceLeaveApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(attendance__employee__cu_user__is_flexi_hour=True) &
                                                        Q(lock_status=False) &
                                                        Q(is_deleted=False) &
                                                        Q(is_late_conveyance=False) &
                                                        Q(checkin_benchmark=False) &
                                                        ~Q(leave_type=None) &
                                                        (Q(approved_status='pending') |
                                                         Q(approved_status='relese')))

    def get_queryset(self):
        # print('self.queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        sort_field = '-id'
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            print('login_user_details', login_user_details)
            print('login_user_details', login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                # print('check')
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                print('users_list_under_the_login_user', users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:

                        result = self.queryset.filter(attendance__in=attendence_id_list)
                        print('result', result)
                        if result:
                            search_sort_flag = True
                            self.queryset = result
                        else:
                            search_sort_flag = False
                            # self.queryset = []
                        # print('self.queryset',self.queryset.query)
                    else:
                        search_sort_flag = False
                        # self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    # self.queryset =  self.queryset

            else:
                search_sort_flag = True
                self.queryset = self.queryset
        if search_sort_flag:
            print('enter')
            filter = dict()
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            users = self.request.query_params.get('users', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            request_type = self.request.query_params.get('request_type', None)
            leave_type = self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'date' and order_by == 'asc':
                    sort_field = 'duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name == 'date' and order_by == 'desc':
                    sort_field = '-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                    # return self.queryset.all().order_by('duration')
                if field_name == 'duration' and order_by == 'desc':
                    sort_field = '-duration'
                    # return self.queryset.all().order_by('-duration')
                if field_name == 'department' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__department'
                if field_name == 'department' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__department'
                if field_name == 'designation' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__designation'
                if field_name == 'designation' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__designation'
                if field_name == 'reporting_head' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__reporting_head'
                if field_name == 'reporting_head' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__reporting_head'
                if field_name == 'hod' and order_by == 'desc':
                    sort_field = '-attendance__employee__cu_user__hod'
                if field_name == 'hod' and order_by == 'asc':
                    sort_field = 'attendance__employee__cu_user__hod'

            if from_date and to_date:
                start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                filter['duration_start__date__gte'] = start_object
                end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                filter['duration_start__date__lte'] = end_object + timedelta(days=1)

            if dept_filter:
                dept_list = dept_filter.split(',')
                emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user', flat=True)
                filter['attendance__employee__in'] = emp_list

            if designation:
                designation_list = designation.split(',')
                emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                        flat=True)
                filter['attendance__employee__in'] = emp_list

            if reporting_head:
                filter['attendance__employee__cu_user__reporting_head'] = reporting_head

            if hod:
                filter['attendance__employee__cu_user__hod'] = hod

            if leave_type:
                leave_type_list = leave_type.split(',')
                filter['leave_type__in'] = leave_type_list

            if request_type:
                request_type_list = request_type.split(',')
                filter['request_type__in'] = request_type_list

            if search:
                search_data = list(map(str, search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) | Q(
                        attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False, **filter).order_by(sort_field)
                    return queryset
                elif len(search.split(" ")) > 1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(
                        attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False, **filter).order_by(sort_field)
                    return queryset


            else:
                # print('filter',**filter)
                queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                return queryset
        else:
            print('sdsdsdsds')
            return []

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiAttendanceLeaveApprovalListV2, self).get(self, request, args, kwargs)
        return response


class FlexiTeamFortnightAttendance(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False).order_by('date')
    serializer_class = FlexiTeamFortnightAttendanceSerializer
    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        blank_queryset = Attendance.objects.none()
        emp_id = self.emp_id
        f_start_date = self.f_start_date
        f_end_date = self.f_end_date
        filter = {}
        date_range = None
        if self.queryset.count():
            filter['employee']=emp_id
            filter['date__date__gte'] = f_start_date
            filter['date__date__lte'] = f_end_date

        #print(self.queryset.filter(**filter))
        return self.queryset.filter(**filter)


    #@response_modify_decorator_list_after_execution
    def get_data_per_employee(self, request, *args, **kwargs):
        #print('entry test')
        #print(self.queryset)
        response=super(FlexiTeamFortnightAttendance,self).get(self, request, args, kwargs)
        #print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'],is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
              
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee, date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status=='approved' and att_req.request_type =='FOD':
                    day_remarks = 'OD'

                if att_req.leave_type_changed:
                    cng_leave_type= att_req.leave_type_changed
                    if att_req.leave_type_changed_period=='FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period=='HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type= att_req.leave_type
                    if att_req.request_type=='FD':
                        oth_leave_period = 1
                    elif att_req.request_type=='HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type=cng_leave_type
                    daily_leave_period=cng_leave_period
                elif oth_leave_type:
                    daily_leave_type=oth_leave_type
                    daily_leave_period=oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested== True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance==False and att_req.checkin_benchmark==False:
                    
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    attendance_request_dict = {
                        'id' : att_req.id,
                        'documents': doc_list,
                        'duration_start' : att_req.duration_start,
                        'duration_end' : att_req.duration_end,
                        'duration' : att_req.duration,
                        'request_type' : att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested' : att_req.is_requested,
                        'request_date' : att_req.request_date,
                        'justification' : att_req.justification,
                        'approved_status' : att_req.approved_status,
                        'remarks' : att_req.remarks,
                        'justified_by' : att_req.justified_by_id,
                        'justified_at' : att_req.justified_at,
                        'approved_by' : att_req.approved_by_id,
                        'approved_at' : att_req.approved_at,
                        'leave_type' : att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance' : att_req.is_conveyance,
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'leave_type_changed' : att_req.leave_type_changed,
                        'leave_type_changed_period' : att_req.leave_type_changed_period,
                        'lock_status' : att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                if att_req.from_place and att_req.to_place:
                    first_name = att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else ''
                    last_name = att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else ''
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':att_req.deviation_amount,
                        'vehicle_type' : att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_desctiption' : att_req.vehicle_type.description if att_req.vehicle_type else '',
                        'vehicle_type_id' : att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'from_place' : att_req.from_place,
                        'to_place' : att_req.to_place,
                        'conveyance_expense' : att_req.conveyance_expense,
                        'approved_expenses' : att_req.approved_expenses,
                        'conveyance_remarks' : att_req.conveyance_remarks,
                        'conveyance_purpose' : att_req.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : att_req.conveyance_approval,
                        'conveyance_approval_name' :att_req.get_conveyance_approval_display(),
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end
                    }
                    doc_list=[]
                    conveyance_doc=AttandanceApprovalDocuments.objects.filter(request_id=att_req.id,is_deleted=False)
                    if conveyance_doc:
                        for c_d in conveyance_doc:
                            doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                            }
                            doc_list.append(doc_dict)
                        conveyance_dict['conveyance_doc']=doc_list
                    else:
                        conveyance_dict['conveyance_doc']=doc_list

                    conveyance_list.append(conveyance_dict)

            data['conveyance_details'] = conveyance_list
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                    data['day_remarks'] = day_remarks

        return response

    @response_modify_decorator_list_after_execution
    def get(self, request, *args, **kwargs):
        end_month_master_date = datetime.now().date()

        setattr(self, 'emp_id', None)
        setattr(self, 'f_start_date', None)
        setattr(self, 'f_end_date', None)

        employee_id = self.request.query_params.get('employee_id', None)
        department = self.request.query_params.get('department', None)
        designation = self.request.query_params.get('designation', None)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)


        data_list = list()

        tcore_users = TCoreUserDetail.objects.filter(is_flexi_hour=True,cu_is_deleted=False)
        if employee_id:
            tcore_users = tcore_users.filter(cu_user=employee_id)

        if department:
            tcore_users = tcore_users.filter(department=department)

        if designation:
            tcore_users = tcore_users.filter(designation=designation)

        for tuser in tcore_users:
            #first_attendance_obj = Attendance.objects.filter(employee=tuser.cu_user,is_deleted=False,date__isnull=False).order_by('date').first() # filter by is_flexi_hour_att
            # start_month_master_date = first_attendance_obj.date.date() if first_attendance_obj else end_month_master_date
            #attendance_month_master = self.get_months_from_master(start_month_master_date=start_month_master_date, end_month_master_date=end_month_master_date)
            
            attendance_month_master = AttendenceMonthMaster.objects.filter(month=month,month_end__year=year, is_deleted=False)

            #print(attendance_month_master)
            #print(tcore_users)
            for month_master in attendance_month_master:
                #print(tuser.cu_user.get_full_name())
                self.emp_id = tuser.cu_user.id
                first_flexi = dict()
                first_flexi['employee_name'] = tuser.cu_user.get_full_name()
                first_flexi['start_date'] = month_master.month_start.date()
                first_flexi['end_date'] = month_master.fortnight_date.date()

                total_hrs_mins, working_hrs_mins, deficit_hrs_mins, leave_deduction, in_number = self.get_total_working_deficit_hrs_mins(tcore_user=tuser, start_date=month_master.month_start, end_date=month_master.fortnight_date)
                first_flexi['total_hour'] = total_hrs_mins
                first_flexi['working_hour'] = working_hrs_mins
                first_flexi['time_deficit'] = deficit_hrs_mins
                first_flexi['leave_deduction'] = leave_deduction
                first_flexi['in_number'] = in_number

                self.f_start_date = month_master.month_start.date()
                self.f_end_date = month_master.fortnight_date.date()
                response = self.get_data_per_employee(request, *args, **kwargs)
                #print(response.data)
                first_flexi['fortnight'] = response.data
                data_list.append(first_flexi)

                second_flexi = dict()
                second_flexi['employee_name'] = tuser.cu_user.get_full_name()
                second_flexi['start_date'] = (month_master.fortnight_date + timedelta(days=1)).date()
                second_flexi['end_date'] = month_master.month_end.date()

                total_hrs_mins, working_hrs_mins, deficit_hrs_mins, leave_deduction, in_number = self.get_total_working_deficit_hrs_mins(tcore_user=tuser, start_date=month_master.fortnight_date + timedelta(days=1), end_date=month_master.month_end)
                second_flexi['total_hour'] = total_hrs_mins
                second_flexi['working_hour'] = working_hrs_mins
                second_flexi['time_deficit'] = deficit_hrs_mins
                second_flexi['leave_deduction'] = leave_deduction
                second_flexi['in_number'] = in_number

                self.f_start_date = (month_master.fortnight_date + timedelta(days=1)).date()
                self.f_end_date = month_master.month_end.date()
                response = self.get_data_per_employee(request, *args, **kwargs)
                second_flexi['fortnight'] = response.data
                data_list.append(second_flexi)
            
        if field_name and order_by:
            rev = order_by == 'desc'
            if field_name in ['total_hour','working_hour','time_deficit','leave_deduction']:
                data_list = sorted(data_list, key=lambda k: k['in_number'][field_name], reverse=rev)
            elif field_name in ['start_date', 'end_date']:
                data_list = sorted(data_list, key=lambda k: k[field_name], reverse=rev)
        data_list = list(map(self.delete_key, data_list))

        if from_date and to_date:
            from_date = datetime.strptime(from_date, '%Y-%m-%d').date()
            to_date = datetime.strptime(to_date, '%Y-%m-%d').date()
            data_list = list(filter(lambda x: from_date <= x['start_date'] <= to_date, data_list))
        

        return Response(data_list)

    def delete_key(self, obj):
        del obj['in_number']
        return obj

    def get_months_from_master(self, start_month_master_date=None, end_month_master_date=None):
        month_master = AttendenceMonthMaster.objects.filter(is_deleted=False).filter(
                                                            Q(
                                                                Q(month_start__date__gte=start_month_master_date)&
                                                                Q(month_end__date__lte=end_month_master_date)
                                                            )|
                                                            Q(
                                                                Q(month_start__date__lte=end_month_master_date)&
                                                                Q(month_end__date__gte=end_month_master_date)
                                                            )
                                                        )
        return month_master

    def get_total_working_deficit_hrs_mins(self, tcore_user=None, start_date=None, end_date=None):
        total_hours, working_hours = get_flexi_hours_for_work_days(tcore_user=tcore_user, start_date=start_date, end_date=end_date)
        total_hrs, total_mins = divmod(int(total_hours), 60)
        total_hrs_mins = '{} hrs {} mins'.format(total_hrs, total_mins) if total_hrs else '{} mins'.format(total_mins)
        working_hrs, working_mins = divmod(int(working_hours), 60)
        working_hrs_mins = '{} hrs {} mins'.format(working_hrs, working_mins) if working_hrs else '{} mins'.format(working_mins)
        time_deficit = total_hours - working_hours
        deficit_hours = time_deficit if time_deficit >= 0.0 else 0.0
        deficit_hrs, deficit_mins = divmod(int(deficit_hours), 60)
        deficit_hrs_mins = '{} hrs {} mins'.format(deficit_hrs, deficit_mins) if deficit_hrs else '{} mins'.format(deficit_mins)
        leave_deduction = 0
        if deficit_hours:
            leave_deduction = get_fortnight_leave_deduction(hour=int(deficit_hours)/60)
        in_number = dict(total_hour=total_hours,working_hour=working_hours,time_deficit=deficit_hours,leave_deduction=leave_deduction)
        return total_hrs_mins, working_hrs_mins, deficit_hrs_mins, leave_deduction, in_number


class FlexiETaskAttendanceApprovaWithoutGracelListV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovaWithoutGracelSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True) &
                                                        Q(attendance__employee__cu_user__is_flexi_hour=True) &
                                                        Q(lock_status=False) &
                                                        Q(is_deleted=False) &
                                                        Q(is_late_conveyance=False) &
                                                        Q(checkin_benchmark=False) &
                                                        (Q(request_type='HD') |
                                                         Q(request_type='FD') |
                                                         Q(request_type='WFH') |
                                                         Q(request_type='OD') |
                                                         Q(request_type='FOD') |
                                                         Q(request_type='POD') |
                                                         Q(request_type='MP')) &
                                                        (Q(approved_status='pending') |
                                                         Q(approved_status='relese')))

    def get_queryset(self):
        filter = {}
        sort_field = "-id"
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:

                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            search = self.request.query_params.get('search', None)
            request_type = self.request.query_params.get('request_type', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'date' and order_by == 'asc':
                    sort_field = "duration_start__date"
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name == 'date' and order_by == 'desc':
                    sort_field = "-duration_start__date"
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = "duration_start"
                    # return self.queryset.all().order_by('duration_start')
                if field_name == 'duration_start' and order_by == 'desc':
                    sort_field = "-duration_start"
                    # return self.queryset.all().order_by('-duration_start')

                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field = "duration_end"
                    # return self.queryset.all().order_by('duration_end')
                if field_name == 'duration_end' and order_by == 'desc':
                    sort_field = "-duration_end"
                    # return self.queryset.all().order_by('-duration_end')

                if field_name == 'duration' and order_by == 'asc':
                    sort_field = "duration"
                    # return self.queryset.all().order_by('duration')
                if field_name == 'duration' and order_by == 'desc':
                    sort_field = "-duration"
                    # return self.queryset.all().order_by('-duration')

            if request_type:
                request_type_list = request_type.split(',')
                filter['request_type__in'] = request_type_list

            # if leave_type:
            #     leave_type_list=leave_type.split(',')
            #     filter['leave_type__in']= leave_type_list

            if search:
                search_data = list(map(str, search.split(" ")))
                print("This is if condition entry")
                if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                    print("length 1 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) | Q(
                        attendance__employee__last_name__icontains=search_data[0])),
                                                    is_deleted=False, **filter).order_by(sort_field)
                    return queryset
                elif len(search.split(" ")) > 1:
                    print("length 2 hai ")
                    queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(
                        attendance__employee__last_name__icontains=search_data[1])),
                                                    is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                return queryset

        else:
            return []

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiETaskAttendanceApprovaWithoutGracelListV2, self).get(self, request, args, kwargs)
        return response


class FlexiAttendanceAdminDailyListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False, employee__cu_user__is_flexi_hour=True)
    serializer_class = AttendanceAdminDailyListSerializerV2
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    )
                    print('attedence_details', attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False


            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            start_date = self.request.query_params.get('start_date', None)
            end_date = self.request.query_params.get('end_date', None)
            search = self.request.query_params.get('search', None)
            leave_type = self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            users = self.request.query_params.get('users', None)
            sort_field = '-id'
            filter = {}
            date_range = None

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst
            if self.queryset.count():
                print("self.queryset.count()", self.queryset.count())
                if field_name and order_by:
                    if field_name == 'date' and order_by == 'asc':
                        sort_field = 'date'
                        # return self.queryset.filter(is_deleted=False).order_by('date')
                    elif field_name == 'date' and order_by == 'desc':
                        sort_field = '-date'
                        # return self.queryset.filter(is_deleted=False).order_by('-date')
                    elif field_name == 'login_time' and order_by == 'asc':
                        sort_field = 'login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('login_time')
                    elif field_name == 'login_time' and order_by == 'desc':
                        sort_field = '-login_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-login_time')
                    elif field_name == 'logout_time' and order_by == 'asc':
                        sort_field = 'logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('logout_time')
                    elif field_name == 'logout_time' and order_by == 'desc':
                        sort_field = '-logout_time'
                        # return self.queryset.filter(is_deleted=False).order_by('-logout_time')

            if start_date or end_date or designation or department or search:
                if start_date and end_date:
                    start_object = datetime.strptime(start_date, '%Y-%m-%d').date()
                    filter['date__gte'] = start_object
                    end_object = datetime.strptime(end_date, '%Y-%m-%d').date()
                    filter['date__lte'] = end_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id = TCoreUserDetail.objects.filter(designation=designation, department=department).values(
                        'cu_user')
                    print(desi_dep_id)
                    filter['employee__in'] = [x['cu_user'] for x in desi_dep_id]
                elif department:
                    department_id = TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['employee__in'] = [x['cu_user'] for x in department_id]
                    print(filter)
                elif designation:
                    designation_id = TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['employee__in'] = [x['cu_user'] for x in designation_id]
                    print(filter)

                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) | Q(
                            employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        return queryset
                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(
                            employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        return queryset

                        # if search :
                #     print("This is if condition entry")
                #     for name in search.split(" "):

                #         queryset = self.queryset.filter((Q(employee__first_name__icontains=name)|Q(employee__last_name__icontains=name)),
                #                                         is_deleted=False,**filter)
                #         # print(queryset.query)
                #         return queryset
                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset

            else:
                return self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
        else:
            return []

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiAttendanceAdminDailyListViewV2, self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        attendance_request_dict = {}
        for data in response.data['results']:
            data['is_attendance_request'] = True
            is_late_conveyance = False
            is_late_conveyance_completed = False
            late_conveyance_id = None
            conveyance_dict = {}
            conveyance_list = []
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'], is_deleted=False)
            # print("attendance_request",attendance_request)
            # print('employee__first_name-->',data['employee'])
            # data['employee_name'] = data['employee']
            emp_name = User.objects.filter(id=data['employee']).values('first_name', 'last_name')
            if emp_name:
                first_name = emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name = emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name

            attendance_request_list = []
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee,
                                                          date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status == 'approved' and att_req.request_type == 'FOD':
                    day_remarks = 'OD'

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested == True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance == True:
                    is_late_conveyance = True
                    late_conveyance_id = att_req.id
                if att_req.from_place and att_req.to_place and att_req.is_late_conveyance == True:
                    is_late_conveyance_completed = True

                benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
                alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=data['employee'], benefits_id=benifit_id)
                allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
                if allowance:
                    allowance_money = allowance[0]
                else:
                    allowance_money = 0.0

                if att_req.is_late_conveyance == False and att_req.checkin_benchmark == False:
                    # if att_req.checkin_benchmark==False:

                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,
                                             attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    work_form_home = WorkFromHomeDeviation.objects.filter(request=att_req, is_deleted=False).values(
                        'start_date_time', 'end_date_time', 'work_done')

                    attendance_request_dict = {
                        'id': att_req.id,
                        'documents': doc_list,
                        'work_form_home': work_form_home,
                        'duration_start': att_req.duration_start,
                        'eligibility_amount': allowance_money,
                        'duration_end': att_req.duration_end,
                        'duration': att_req.duration,
                        'request_type': att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested': att_req.is_requested,
                        'request_date': att_req.request_date,
                        'justification': att_req.justification,
                        'approved_status': att_req.approved_status,
                        'remarks': att_req.remarks,
                        'justified_by': att_req.justified_by_id,
                        'justified_at': att_req.justified_at,
                        'approved_by': att_req.approved_by_id,
                        'approved_at': att_req.approved_at,
                        'leave_type': att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance': att_req.is_late_conveyance,
                        # 'vehicle_type': att_req.vehicle_type.name if att_req.vehicle_type else '',
                        # 'vehicle_type_id': att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance': att_req.is_conveyance,
                        # 'from_place': att_req.from_place,
                        # 'to_place': att_req.to_place,
                        # 'conveyance_expense': att_req.conveyance_expense,
                        # 'approved_expenses': att_req.approved_expenses,
                        # 'conveyance_purpose': att_req.conveyance_purpose,
                        # 'conveyance_remarks': att_req.conveyance_remarks,
                        'leave_type_changed': att_req.leave_type_changed,
                        'leave_type_changed_period': att_req.leave_type_changed_period,
                        'checkin_benchmark': att_req.checkin_benchmark,
                        'lock_status': att_req.lock_status,
                        # 'conveyance_approval': att_req.get_conveyance_approval_display(),
                        # 'conveyance_approved_by': att_req.conveyance_approved_by.id if att_req.conveyance_approved_by else '',
                        # 'conveyance_approved_by_name': (
                        #                                    att_req.conveyance_approved_by.first_name if att_req.conveyance_approved_by else '') + " " + (
                        #                                    att_req.conveyance_approved_by.last_name if att_req.conveyance_approved_by else ''),
                        # 'conveyance_alloted_by': att_req.conveyance_alloted_by.id if att_req.conveyance_alloted_by else '',
                        # 'conveyance_alloted_by_name': (
                        #                                   att_req.conveyance_alloted_by.first_name if att_req.conveyance_alloted_by else '') + " " + (
                        #                                   att_req.conveyance_alloted_by.last_name if att_req.conveyance_alloted_by else '')
                    }
                    attendance_request_list.append(attendance_request_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                if conveyance_details_queryset:
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount

                        conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##

            data['attendance_request'] = attendance_request_list
            data['is_late_conveyance'] = is_late_conveyance
            data['late_conveyance_id'] = late_conveyance_id
            data['is_late_conveyance_completed'] = is_late_conveyance_completed
            data['conveyance_details'] = conveyance_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class FlexiAdminAttendanceAdvanceLeavePendingListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False,employee__cu_user__is_flexi_hour=True ,approved_status='pending')
    serializer_class = AdminAttendanceAdvanceLeavePendingListSerializerV2
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master = AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                            month_end__date__gte=current_date, is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
            start_date__date__lte=month_master.year_end_date.date()))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = EmployeeAdvanceLeaves.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False, approved_status='pending'
                    )
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:
                        search_sort_flag = True
                        self.queryset = attendence_id_list.filter(
                            Q(start_date__date__gte=month_master.year_start_date.date()) & Q(
                                start_date__date__lte=month_master.year_end_date.date()))
                        # self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []

            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            sort_field = '-id'
            filter = {}
            search = self.request.query_params.get('search', None)
            emp_id = self.request.query_params.get('emp_id', None)
            leave_type = self.request.query_params.get('leave_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)

            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            request_type = self.request.query_params.get('request_type', None)
            leave_type = self.request.query_params.get('leave_type', None)

            if users:
                user_lst = users.split(',')
                filter['employee__in'] = user_lst

            queryset_all = EmployeeAdvanceLeaves.objects.none()
            if self.queryset.count():
                # print('leave_type-->',leave_type)
                if field_name and order_by:
                    if field_name == 'start_date' and order_by == 'asc':
                        sort_field = 'start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('start_date')
                    elif field_name == 'start_date' and order_by == 'desc':
                        sort_field = '-start_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-start_date')
                    elif field_name == 'end_date' and order_by == 'asc':
                        sort_field = 'end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('end_date')
                    elif field_name == 'end_date' and order_by == 'desc':
                        sort_field = '-end_date'
                        # return self.queryset.filter(is_deleted=False).order_by('-end_date')
                    elif field_name == 'sort_applied' and order_by == 'asc':
                        sort_field = 'created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('created_at')
                    elif field_name == 'sort_applied' and order_by == 'desc':
                        sort_field = '-created_at'
                        # return self.queryset.filter(is_deleted=False).order_by('-created_at')
                    elif field_name == 'department' and order_by == 'desc':
                        sort_field = '-attendance__employee__cu_user__department'
                    elif field_name == 'department' and order_by == 'asc':
                        sort_field = 'employee__cu_user__department'
                    elif field_name == 'designation' and order_by == 'desc':
                        sort_field = '-employee__cu_user__designation'
                    elif field_name == 'designation' and order_by == 'asc':
                        sort_field = 'employee__cu_user__designation'
                    elif field_name == 'reporting_head' and order_by == 'desc':
                        sort_field = '-employee__cu_user__reporting_head'
                    elif field_name == 'reporting_head' and order_by == 'asc':
                        sort_field = 'employee__cu_user__reporting_head'
                    elif field_name == 'hod' and order_by == 'desc':
                        sort_field = '-employee__cu_user__hod'
                    elif field_name == 'hod' and order_by == 'asc':
                        sort_field = 'employee__cu_user__hod'

                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['start_date__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['start_date__date__lte'] = end_object + timedelta(days=1)

                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',
                                                                                                    flat=True)
                    filter['employee__in'] = emp_list

                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',
                                                                                                            flat=True)
                    filter['employee__in'] = emp_list

                if reporting_head:
                    filter['employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['employee__cu_user__hod'] = hod

                if request_type:
                    request_type_list = request_type.split(',')
                    filter['request_type__in'] = request_type_list

                if leave_type:
                    leave_type_list = leave_type.split(',')
                    filter['leave_type__in'] = leave_type_list

                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) | Q(
                            employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        return queryset
                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(employee__first_name__icontains=search_data[0]) & Q(
                            employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False, **filter).order_by(sort_field)
                        return queryset

                else:
                    queryset = self.queryset.filter(is_deleted=False, **filter).order_by(sort_field)
                    return queryset
            else:
                return queryset_all
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response = super(FlexiAdminAttendanceAdvanceLeavePendingListViewV2, self).get(self, request, args, kwargs)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name == 'leave_count' and order_by == 'asc':
            import operator
            response.data['results'] = sorted(response.data['results'], key=operator.itemgetter('leave_count'))
            print('response.data', response.data['results'])
        for data in response.data['results']:
            data['employee_name'] = ''
            data['approved_status'] = data['approved_status'].capitalize()
            emp_name = User.objects.filter(id=data['employee']).values('first_name', 'last_name')
            if emp_name:
                first_name = emp_name[0]['first_name'] if emp_name[0]['first_name'] else ""
                last_name = emp_name[0]['last_name'] if emp_name[0]['last_name'] else ""
                data['employee_name'] = first_name + " " + last_name
        return response


class FlexiAttendanceAdminSummaryListViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = Attendance.objects.filter(is_deleted=False, employee__cu_user__is_flexi_hour=True )
    serializer_class = AttendanceAdminSummaryListSerializerV2

    # pagination_class = CSPageNumberPagination

    def get_queryset(self):
        # print('queryset',self.queryset)
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            # print('login_user_details',login_user_details)
            # print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                # print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    )
                    print('attedence_details', attendence)
                    if attendence:
                        search_sort_flag = True
                        self.queryset = attendence
                    else:
                        search_sort_flag = False
                else:
                    search_sort_flag = False


            else:
                search_sort_flag = True
                self.queryset = self.queryset

        if search_sort_flag:
            blank_queryset = Attendance.objects.none()
            print('blank_queryset', blank_queryset)
            emp_id = self.request.query_params.get('emp_id', None)
            current_date = self.request.query_params.get('current_date', None)
            month = self.request.query_params.get('month', None)
            year = self.request.query_params.get('year', None)
            filter = {}
            date_range = None

            # print("self.queryset.count()",self.queryset.count())
            if month and year and emp_id:
                date_range = AttendenceMonthMaster.objects.filter(month=month, month_end__year=year).values(
                    'month_start__date', 'month_end__date')
                print("date_range", date_range)

                if date_range:
                    print("This is if")
                    filter['employee'] = emp_id
                    filter['date__date__gte'] = date_range[0]['month_start__date']
                    filter['date__date__lte'] = date_range[0]['month_end__date']

            if filter:
                # print('filter',self.queryset.filter(**filter))
                return self.queryset.filter(**filter).order_by('date')
            else:
                # print('else filter',self.queryset)
                return self.queryset.filter(is_deleted=False).order_by('date')
        else:
            return []

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        print('entry test')
        print(self.queryset)
        response = super(FlexiAttendanceAdminSummaryListViewV2, self).get(self, request, args, kwargs)
        # print("response.data['results']",response.data)
        # print("response.data['results']",response.data['results'])
        attendance_request_dict = {}
        for data in response.data:
            attendance_request = AttendanceApprovalRequest.objects.filter(attendance=data['id'], is_deleted=False)
            attendance_request_list = []
            conveyance_dict = {}
            conveyance_list = []
            data['is_attendance_request'] = True
            daily_duration = 0
            # daily_grace = 0
            cng_leave_type = None
            oth_leave_type = None
            daily_leave_type = None
            daily_leave_period = None
            daily_leave_approval = None
            cng_leave_period = None
            oth_leave_period = None
            day_remarks = None
            for att_req in attendance_request:
                leave_day_remarks = calculate_day_remarks(user=att_req.attendance.employee,
                                                          date_obj=att_req.attendance_date)
                if leave_day_remarks:
                    day_remarks = leave_day_remarks
                elif att_req.approved_status == 'approved' and att_req.request_type == 'FOD':
                    day_remarks = 'OD'

                # if att_req.leave_type_changed_period == 'GR':
                #     daily_grace += att_req.duration
                # if att_req.request_type == 'GR':
                #     daily_grace += att_req.duration
                # if att_req.checkin_benchmark == True:
                #     daily_grace += att_req.duration
                if att_req.leave_type_changed:
                    cng_leave_type = att_req.leave_type_changed
                    if att_req.leave_type_changed_period == 'FD':
                        cng_leave_period = 1
                    elif att_req.leave_type_changed_period == 'HD':
                        cng_leave_period = 0.5
                elif att_req.leave_type:
                    oth_leave_type = att_req.leave_type
                    if att_req.request_type == 'FD':
                        oth_leave_period = 1
                    elif att_req.request_type == 'HD':
                        oth_leave_period = 0.5

                if cng_leave_type:
                    daily_leave_type = cng_leave_type
                    daily_leave_period = cng_leave_period
                elif oth_leave_type:
                    daily_leave_type = oth_leave_type
                    daily_leave_period = oth_leave_period

                if att_req.approved_status == 'relese' or att_req.approved_status == 'pending' or att_req.is_requested == True:
                    data['is_attendance_request'] = False
                if att_req.is_late_conveyance == False and att_req.checkin_benchmark == False:
                    leave_type = att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type
                    doc_list = get_documents(request=request,
                                             attendance_request=att_req) if leave_type == 'AL' or leave_type == 'AB' else list()

                    attendance_request_dict = {
                        'id': att_req.id,
                        'documents': doc_list,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'duration': att_req.duration,
                        'request_type': att_req.leave_type_changed_period if att_req.leave_type_changed_period else att_req.request_type,
                        'is_requested': att_req.is_requested,
                        'request_date': att_req.request_date,
                        'justification': att_req.justification,
                        'approved_status': att_req.approved_status,
                        'remarks': att_req.remarks,
                        'justified_by': att_req.justified_by_id,
                        'justified_at': att_req.justified_at,
                        'approved_by': att_req.approved_by_id,
                        'approved_at': att_req.approved_at,
                        'leave_type': att_req.leave_type_changed if att_req.leave_type_changed else att_req.leave_type,
                        'is_late_conveyance': att_req.is_late_conveyance,
                        'vehicle_type': att_req.vehicle_type.name if att_req.vehicle_type else '',
                        'vehicle_type_id': att_req.vehicle_type.id if att_req.vehicle_type else '',
                        'is_conveyance': att_req.is_conveyance,
                        'from_place': att_req.from_place,
                        'to_place': att_req.to_place,
                        'conveyance_expense': att_req.conveyance_expense,
                        'approved_expenses': att_req.approved_expenses,
                        'conveyance_remarks': att_req.conveyance_remarks,
                        'leave_type_changed': att_req.leave_type_changed,
                        'leave_type_changed_period': att_req.leave_type_changed_period,
                        'checkin_benchmark': att_req.checkin_benchmark,
                        'lock_status': att_req.lock_status
                    }
                    attendance_request_list.append(attendance_request_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##
                   
                conveyance_details_queryset = ConveyanceMaster.objects.filter(request_id=att_req.id,is_deleted=False)

                if conveyance_details_queryset:
                    
                    tcore_user = TCoreUserDetail.objects.get(cu_user=att_req.attendance.employee)
                    conveyance_details = conveyance_details_queryset[0]
                    first_name = conveyance_details.conveyance_alloted_by.first_name if conveyance_details.conveyance_alloted_by else ''
                    last_name = conveyance_details.conveyance_alloted_by.last_name if conveyance_details.conveyance_alloted_by else ''
                    #conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(grade=tcore_user.employee_grade)
                    conveyance_eligibility_details = ConveyanceConfiguration.objects.filter(sub_grade=tcore_user.employee_sub_grade)
                    deviation_amount = None

                    if conveyance_eligibility_details:
                        conveyance_eligibility_details = conveyance_eligibility_details[0]
                        #conveyance_eligibility_details_amount = conveyance_eligibility_details.amount if conveyance_eligibility_details.amount else 0
                        conveyance_details_approved_expenses = conveyance_details.approved_expenses if conveyance_details.approved_expenses else 0
                        #if conveyance_details_approved_expenses > conveyance_eligibility_details_amount:
                        deviation_amount = conveyance_details.deviation_amount

                        conveyance_dict = {
                        'cost_centre': tcore_user.cost_centre,
                        'deviation_amount':deviation_amount,
                        'vehicle_type' : conveyance_details.vehicle_type.name if conveyance_details.vehicle_type else '',
                        'vehicle_type_desctiption' : conveyance_details.vehicle_type.description if conveyance_details.vehicle_type else '',
                        'vehicle_type_id' : conveyance_details.vehicle_type.id if conveyance_details.vehicle_type else '',
                        'from_place' : conveyance_details.from_place,
                        'to_place' : conveyance_details.to_place,
                        'conveyance_expense' : conveyance_details.conveyance_expense,
                        'approved_expenses' : conveyance_details.approved_expenses,
                        'conveyance_purpose' : conveyance_details.conveyance_purpose,
                        'conveyance_alloted_by' : first_name + " " + last_name,
                        'conveyance_approval' : conveyance_details.status,
                        'conveyance_approval_name' :conveyance_details.status,
                        'status':conveyance_details.status,
                        'conveyance_durations' : att_req.duration,
                        'duration_start': att_req.duration_start,
                        'duration_end': att_req.duration_end,
                        'is_late_conveyance': 1 if conveyance_details.conveyance_type == 'Late Conveyance' else False,
                        'is_paid': conveyance_details.is_paid
                        }
                        doc_list=[]
                        conveyance_doc=ConveyanceDocument.objects.filter(conveyance_id=conveyance_details.id,is_deleted=False)
                        if conveyance_doc:
                            for c_d in conveyance_doc:
                                doc_dict={
                                'id':c_d.id,
                                'document_name':c_d.document_name,
                                'document':request.build_absolute_uri(c_d.document.url)
                                }
                                doc_list.append(doc_dict)
                            conveyance_dict['conveyance_doc']=doc_list
                        else:
                            conveyance_dict['conveyance_doc']=doc_list

                        conveyance_list.append(conveyance_dict)

                ## Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##


            # print("daily_grace", daily_grace)
            data['conveyance_details'] = conveyance_list
            # data['daily_grace'] = daily_grace
            data['daily_leave_type'] = daily_leave_type
            data['daily_leave_period'] = daily_leave_period
            data['attendance_request'] = attendance_request_list
            if day_remarks:
                data['day_remarks'] = day_remarks

        return response


class FlexiAttendanceConveyanceApprovalListView(generics.ListAPIView, mixins.UpdateModelMixin,
                                           mixins.CreateModelMixin):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(conveyance_approval=0,
                                                        attendance__employee__cu_user__is_flexi_hour=True,
                                                        is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalListSerializer
    pagination_class = CSPageNumberPagination

    def get_queryset(self):
        print('sdsdsdsdsds')
        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            print('login_user_details', login_user_details)
            print('login_user_details', login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head=login_user_details,
                    is_flexi_hour=True,
                    cu_is_deleted=False
                ).values_list('cu_user')
                print('users_list_under_the_login_user', users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                        employee__in=users_list_under_the_login_user,
                        is_deleted=False
                    ).values_list('id')
                    print('attedence_details', attendence_id_list)
                    if attendence_id_list:

                        print('gfggfgfgf')
                        result = self.queryset.filter(attendance__in=attendence_id_list)
                        print('result', result)
                        if result:
                            search_sort_flag = True
                            self.queryset = result
                        else:
                            search_sort_flag = False
                            # self.queryset = []

                    else:
                        search_sort_flag = False
                        # self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    # self.queryset = self.queryset

            else:
                print('sdsds')
                search_sort_flag = True
                print('self.queryset', self.queryset)
                self.queryset = self.queryset
                # queryset=self.queryset.filter(status=1)
        if search_sort_flag:
            filter = {}
            sort_field = '-id'
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            department = self.request.query_params.get('department', None)
            designation = self.request.query_params.get('designation', None)
            search = self.request.query_params.get('search', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name == 'date' and order_by == 'asc':
                    sort_field = 'duration_start__date'
                    # return self.queryset.all().order_by('duration_start__date')
                if field_name == 'date' and order_by == 'desc':
                    sort_field = '-duration_start__date'
                    # return self.queryset.all().order_by('-duration_start__date')
                if field_name == 'duration_start' and order_by == 'asc':
                    sort_field = 'duration_start'
                    # return self.queryset.all().order_by('duration_start')
                if field_name == 'duration_start' and order_by == 'desc':
                    sort_field = '-duration_start'
                    # return self.queryset.all().order_by('-duration_start')

                if field_name == 'duration_end' and order_by == 'asc':
                    sort_field = 'duration_end'
                    # return self.queryset.all().order_by('duration_end')
                if field_name == 'duration_end' and order_by == 'desc':
                    sort_field = '-duration_end'
                    # return self.queryset.all().order_by('-duration_end')

                if field_name == 'duration' and order_by == 'asc':
                    sort_field = 'duration'
                    # return self.queryset.all().order_by('duration')
                if field_name == 'duration' and order_by == 'desc':
                    sort_field = '-duration'
                    # return self.queryset.all().order_by('-duration')
            # if search :
            #     print("This is if condition entry")
            #     for name in search.split(" "):
            #         queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=name)|Q(attendance__employee__last_name__icontains=name)),
            #                                         conveyance_approval=0,is_deleted=False)
            #     return queryset
            if from_date or to_date or designation or department or search:

                if from_date and to_date:
                    from_object = datetime.strptime(from_date, '%Y-%m-%d')
                    to_object = datetime.strptime(to_date, '%Y-%m-%d')
                    filter['attendance_date__gte'] = from_object
                    filter['attendance_date__lte'] = to_object + timedelta(days=1)

                if department and designation:
                    desi_dep_id = TCoreUserDetail.objects.filter(designation=designation, department=department).values(
                        'cu_user')
                    print(desi_dep_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in desi_dep_id]
                elif department:
                    department_id = TCoreUserDetail.objects.filter(department=department).values('cu_user')
                    print(department_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in department_id]
                    print(filter)
                elif designation:
                    designation_id = TCoreUserDetail.objects.filter(designation=designation).values('cu_user')
                    print(designation_id)
                    filter['attendance__employee__in'] = [x['cu_user'] for x in designation_id]
                    print(filter)

                if search:
                    search_data = list(map(str, search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" ")) > 0 and len(search.split(" ")) < 2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) | Q(
                            attendance__employee__last_name__icontains=search_data[0])),
                                                        conveyance_approval=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset
                    elif len(search.split(" ")) > 1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(
                            attendance__employee__first_name__icontains=search_data[0]) & Q(
                            attendance__employee__last_name__icontains=search_data[1])),
                                                        conveyance_approval=0, is_deleted=False, **filter).order_by(
                            sort_field)
                        return queryset

                else:
                    queryset = self.queryset.filter(conveyance_approval=0, is_deleted=False, **filter).order_by(
                        sort_field)
                    return queryset

            else:
                return self.queryset.filter(conveyance_approval=0, is_deleted=False, **filter).order_by(sort_field)
        else:
            return list()

    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):

        response = super(FlexiAttendanceConveyanceApprovalListView, self).get(self, request, *args, **kwargs)
        convay_list = []
        for data in response.data['results']:
            data_dict = {}
            user_name = Attendance.objects.get(id=data['attendance'])
            benifit_id = HrmsBenefitsProvided.objects.get(benefits_name='conveyance')
            alloyance_per_day = HrmsUsersBenefits.objects.filter(user_id=user_name.employee, benefits_id=benifit_id)
            allowance = [x.allowance for x in alloyance_per_day if alloyance_per_day]
            if allowance:
                allowance_money = allowance[0]
            else:
                allowance_money = 0.0
            if data['vehicle_type']:
                vehical_name = VehicleTypeMaster.objects.get(id=data['vehicle_type']).name
            else:
                vehical_name = None
            alloted_by = AttendanceApprovalRequest.objects.get(id=data['id'])
            if alloted_by.conveyance_alloted_by:
                job_alloted_by = alloted_by.conveyance_alloted_by.first_name + " " + alloted_by.conveyance_alloted_by.last_name
            else:
                job_alloted_by = None

            tcore_user = TCoreUserDetail.objects.get(cu_user=user_name.employee)

            data_dict = {
                'id': data['id'],
                'name': user_name.employee.first_name + " " + user_name.employee.last_name,
                'cost_centre': tcore_user.cost_centre,
                'deviation_amount': data['deviation_amount'],
                'eligibility': allowance_money,
                'is_conveyance': data['is_conveyance'],
                'is_late_conveyance': data['is_late_conveyance'],
                'conveyance_approval': data['conveyance_approval'],
                'vehicle_type': vehical_name,
                'conveyance_purpose': data['conveyance_purpose'],
                'conveyance_alloted_by': job_alloted_by,
                'from_place': data['from_place'],
                'to_place': data['to_place'],
                'conveyance_expense': data['conveyance_expense'],
                'approved_expenses': data['approved_expenses'],
                'conveyance_remarks': data['conveyance_remarks'],
                'attendance': data['attendance'],
                'duration_start': data['duration_start'],
                'duration_end': data['duration_end'],
                'duration': data['duration'],
                'conveyance_approved_by': data['conveyance_approved_by']
            }
            doc_list = []
            conveyance_doc = AttandanceApprovalDocuments.objects.filter(request=data['id'], is_deleted=False)
            if conveyance_doc:
                for c_d in conveyance_doc:
                    doc_dict = {
                        'id': c_d.id,
                        'document_name': c_d.document_name,
                        'document': request.build_absolute_uri(c_d.document.url)
                    }
                    doc_list.append(doc_dict)
                data_dict['conveyance_doc'] = doc_list
            else:
                data_dict['conveyance_doc'] = doc_list
            convay_list.append(data_dict)
        response.data['results'] = convay_list
        return response

    def put(self, request, *args, **kwargs):
        updated_by = request.user
        print(updated_by)

        req_id = self.request.query_params.get('req_id', None)
        conveyance_approval = request.data['conveyance_approval']

        approved_expenses = request.data['approved_expenses']
        print("req_id", req_id)
        if int(conveyance_approval) == 3:
            AttendanceApprovalRequest.objects.filter(id=req_id).update(conveyance_approval=conveyance_approval,
                                                                       conveyance_approved_by=updated_by,
                                                                       approved_expenses=approved_expenses)
        else:
            AttendanceApprovalRequest.objects.filter(id=req_id).update(conveyance_approval=conveyance_approval,
                                                                       conveyance_approved_by=updated_by)
        # print(AttendanceApprovalRequest.)
        if AttendanceApprovalRequest:

            return Response({'results': {'conveyance_approval': conveyance_approval, },
                             'msg': 'success',
                             "request_status": 1})
        else:
            return Response({'results': {'conveyance_approval': conveyance_approval, },
                             'msg': 'fail',
                             "request_status": 0})

    def post(self, request, *args, **kwargs):

        updated_by = request.user
        log_before = []
        approve_or_reject = []

        for data in request.data.get('conveyance_approvals'):
            log_before_query = AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).values(
                'conveyance_approval')
            if log_before_query: log_before.append(log_before_query[0])
            conveyance_approval = data.get('conveyance_approval')
            approved_expenses = data.get('approved_expenses')
            approve_or_reject.append(conveyance_approval)
            print("conveyance_approval", conveyance_approval)
            if int(conveyance_approval) == 3:
                AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).update(
                    conveyance_approval=conveyance_approval,
                    conveyance_approved_by=updated_by, approved_expenses=approved_expenses)
            else:
                AttendanceApprovalRequest.objects.filter(id=data.get('req_id')).update(
                    conveyance_approval=conveyance_approval,
                    conveyance_approved_by=updated_by)
            # print(AttendanceApprovalRequest.)
            if not AttendanceApprovalRequest:
                return Response({'results': {'conveyance_approval': conveyance_approval, },
                                 'msg': 'fail',
                                 "request_status": 0})

        ####################LOG PART########################################################
        print("log_before", str(log_before))
        # master_module_role = TMasterModuleRoleUser.objects.get(mmr_module__cm_name__iexact='hrms',mmr_user=request.user).mmr_role
        # master_module_role = TMasterModuleRoleUser.objects.get(mmr_user=request.user).mmr_role
        # core_role = TCoreRole.objects.get(id=str(master_module_role)).cr_name
        print(list(set(approve_or_reject)))
        if list(set(approve_or_reject))[0] == 2:
            # if core_role.lower() == 'hr admin':
            logger.log(request.user, 'bulk approved Conveyance', 'conveyance_approval', str(log_before),
                       request.data.get('conveyance_approvals'), 'HRMS-AttendenceApproval-ConveyenceApprovals')
            # elif core_role.lower() == 'hr user':
            #     logger.log(request.user,AttendenceAction.ACTION_HR,'bulk approved Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
        elif list(set(approve_or_reject))[0] == 1:
            # if core_role.lower() == 'hr admin':
            logger.log(request.user, 'bulk reject Conveyance', 'conveyance_approval', str(log_before),
                       request.data.get('conveyance_approvals'), 'HRMS-AttendenceApproval-ConveyenceApprovals')
            # elif core_role.lower() == 'hr user':
            #     logger.log(request.user,AttendenceAction.ACTION_HR,'bulk reject Conveyance','conveyance_approval',str(log_before),request.data.get('conveyance_approvals'),'HRMS-AttendenceApproval-ConveyenceApprovals')
        return Response({'results': {'conveyance_approvals': request.data.get('conveyance_approvals'), },
                         'msg': 'success',
                         "request_status": 1})




class FlexiAdminAttendanceAdvanceLeaveApprovalView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = EmployeeAdvanceLeaves.objects.filter(is_deleted=False, employee__cu_user__is_flexi_hour=True)
    serializer_class = AdminAttendanceAdvanceLeaveApprovalSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response


class AttendanceApprovalReportViewV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(Q(is_requested=True)&
                                                        #Q(lock_status=False)&
                                                        Q(is_deleted=False)&
                                                        Q(is_late_conveyance=False)&
                                                        Q(checkin_benchmark=False)&
                                                        (
                                                            Q(approved_status='approved')|
                                                            Q(approved_status='reject') |
                                                            Q(approved_status='pending')
                                                            ) &
                                                        (Q(request_type='HD')|Q(request_type='FD'))&
                                                        (
                                                            Q(leave_type='AL')|
                                                            Q(leave_type='AB')|
                                                            Q(leave_type='SL')|
                                                            Q(leave_type='CL')|
                                                            Q(leave_type='EL')
                                                            )
                                                        )
    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(attendance_date__gte=month_master.year_start_date)&Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    # cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)
            company = self.request.query_params.get('company', None)
            # designation = self.request.query_params.get('dsg', None)
            department = self.request.query_params.get('department', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if company:
                    filter['attendance__employee__cu_user__company__id'] = company
                if department:
                    filter['attendance__employee__cu_user__department__id'] = department

                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['attendance_date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['attendance_date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceApprovalReportViewV2, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data['results']:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
        return response


## Emergency added for request type P ## As per Change Request Document - Attendance & HRMS -CR-3 | Date : 19-06-2020 | Rupam Hazra ##

class AttendanceApprovalForPresentAbsentReportV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    pagination_class = CSPageNumberPagination
    queryset = AttendanceApprovalRequest.objects.filter(
        Q(is_requested=True)&Q(lock_status=False)&Q(is_deleted=False)&Q(is_late_conveyance=False)&Q(checkin_benchmark=False)&
        (Q(approved_status='approved')|Q(approved_status='reject')) & 
        (Q(request_type='P')|(Q(request_type='FD') & Q(leave_type='AB'))))

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(attendance_date__gte=month_master.year_start_date)&Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            attendance_date = self.request.query_params.get('attendance_date', None)
            year = self.request.query_params.get('year')
            month = self.request.query_params.get('month')
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)

            users = self.request.query_params.get('users', None)
            company = self.request.query_params.get('company', None)
            # designation = self.request.query_params.get('dsg', None)
            department = self.request.query_params.get('department', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod

                if company:
                    filter['attendance__employee__cu_user__company__id'] = company
                if department:
                    filter['attendance__employee__cu_user__department__id'] = department

                if attendance_date:
                    filter['attendance__date__date'] = attendance_date

                if month and year:
                    filter['attendance__date__date__month'] = month
                    filter['attendance__date__date__year'] = year

                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    @response_modify_decorator_list_or_get_after_execution_for_pagination
    def get(self, request, *args, **kwargs):
        response=super(AttendanceApprovalForPresentAbsentReportV2View, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data['results']:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
        return response

class AttendanceApprovalReportExportDownloadForPresentAbsentV2View(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    serializer_class = ETaskAttendanceApprovalListSerializerV2
    queryset = AttendanceApprovalRequest.objects.filter(
        Q(is_requested=True)&Q(lock_status=False)&Q(is_deleted=False)&Q(is_late_conveyance=False)&Q(checkin_benchmark=False)&
        (Q(approved_status='approved')|Q(approved_status='reject')) & 
        (Q(request_type='P')|(Q(request_type='FD') & Q(leave_type='AB'))))

    def get_queryset(self):
        current_date = datetime.now().date()
        print('datetime:', current_date)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=current_date,
                                                month_end__date__gte=current_date,is_deleted=False).first()

        self.queryset = self.queryset.filter(Q(attendance_date__gte=month_master.year_start_date)&Q(attendance_date__lte=month_master.year_end_date))

        team_approval_flag = self.request.query_params.get('team_approval_flag', None)
        search_sort_flag = True
        if team_approval_flag == '1':
            login_user_details = self.request.user
            #print('login_user_details',login_user_details)
            #print('login_user_details',login_user_details.is_superuser)
            if login_user_details.is_superuser == False:
                users_list_under_the_login_user = TCoreUserDetail.objects.filter(
                    reporting_head = login_user_details,
                    cu_is_deleted = False
                ).values_list('cu_user')
                #print('users_list_under_the_login_user',users_list_under_the_login_user)
                if users_list_under_the_login_user:
                    attendence_id_list = Attendance.objects.filter(
                                employee__in=users_list_under_the_login_user,
                                is_deleted = False
                                ).values_list('id')
                    print('attedence_details',attendence_id_list)
                    if attendence_id_list:
                        self.queryset = self.queryset.filter(attendance__in=attendence_id_list)
                    else:
                        search_sort_flag = False
                        self.queryset = self.queryset
                else:
                    search_sort_flag = False
                    self.queryset = []
                
            else:
                search_sort_flag = True
                self.queryset = self.queryset   

        if search_sort_flag:
            filter={}
            sort_field='-id'
            search = self.request.query_params.get('search', None)
            request_type=self.request.query_params.get('request_type', None)
            from_date = self.request.query_params.get('from_date', None)
            to_date = self.request.query_params.get('to_date', None)
            leave_type=self.request.query_params.get('leave_type', None)
            approved_type=self.request.query_params.get('approved_type', None)
            field_name = self.request.query_params.get('field_name', None)
            order_by = self.request.query_params.get('order_by', None)
            queryset_all = EmployeeAdvanceLeaves.objects.none()
            attendance_date = self.request.query_params.get('attendance_date', None)
            year = self.request.query_params.get('year')
            month = self.request.query_params.get('month')
            
            dept_filter = self.request.query_params.get('dept_filter', None)
            designation = self.request.query_params.get('designation', None)
            reporting_head = self.request.query_params.get('reporting_head', None)
            hod = self.request.query_params.get('hod', None)
            company = self.request.query_params.get('company', None)
            # dsg = self.request.query_params.get('dsg', None)
            department = self.request.query_params.get('department', None)

            users = self.request.query_params.get('users', None)

            if users:
                user_lst = users.split(',')
                filter['attendance__employee__in'] = user_lst

            if field_name and order_by:
                if field_name =='duration_start' and order_by=='asc':
                    sort_field='duration_start'
                elif field_name =='duration_start' and order_by=='desc':
                    sort_field='-duration_start'
                elif field_name =='duration_end' and order_by=='asc':
                    sort_field='duration_end'
                elif field_name =='duration_end' and order_by=='desc':
                    sort_field='-duration_end'
                elif field_name =='created_at' and order_by=='asc':
                    sort_field='created_at'
                elif field_name =='created_at' and order_by=='desc':
                    sort_field='-created_at'
                elif field_name =='duration' and order_by=='asc':
                    sort_field='duration'
                elif field_name =='department' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__department'
                elif field_name =='department' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__department'
                elif field_name =='designation' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__designation'
                elif field_name =='designation' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__designation'
                elif field_name =='reporting_head' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__reporting_head'
                elif field_name =='reporting_head' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__reporting_head'
                elif field_name =='hod' and order_by=='desc':
                    sort_field='-attendance__employee__cu_user__hod'
                elif field_name =='hod' and order_by=='asc':
                    sort_field='attendance__employee__cu_user__hod'

            if self.queryset.count():
                if dept_filter:
                    dept_list = dept_filter.split(',')
                    emp_list = TCoreUserDetail.objects.filter(department__in=dept_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if designation:
                    designation_list = designation.split(',')
                    emp_list = TCoreUserDetail.objects.filter(designation__in=designation_list).values_list('cu_user',flat=True)
                    filter['attendance__employee__in'] = emp_list
                
                if reporting_head:
                    filter['attendance__employee__cu_user__reporting_head'] = reporting_head

                if hod:
                    filter['attendance__employee__cu_user__hod'] = hod
                if company:
                    filter['attendance__employee__cu_user__company__id'] = company
                if department:
                    filter['attendance__employee__cu_user__department__id'] = department

                if attendance_date:
                    filter['attendance__date__date'] = attendance_date

                if month and year:
                    filter['attendance__date__date__month'] = month
                    filter['attendance__date__date__year'] = year

                
                if from_date and to_date:
                    start_object = datetime.strptime(from_date, '%Y-%m-%d').date()
                    filter['duration_start__date__gte'] = start_object
                    end_object = datetime.strptime(to_date, '%Y-%m-%d').date()
                    filter['duration_start__date__lte'] = end_object + timedelta(days=1)

                if request_type:
                    request_type_list=request_type.split(',')
                    filter['request_type__in']= request_type_list
                if leave_type:
                    leave_type_list=leave_type.split(',')
                    filter['leave_type__in']= leave_type_list
                if approved_type:
                    approved_type_list=approved_type.split(',')
                    filter['approved_status__in']= approved_type_list
                if search :
                    search_data = list(map(str,search.split(" ")))
                    print("This is if condition entry")
                    if len(search.split(" "))>0 and len(search.split(" "))<2:
                        print("length 1 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0])|Q(attendance__employee__last_name__icontains=search_data[0])),
                                                        is_deleted=False,**filter).order_by(sort_field)                            
                        
                        
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all       

                    elif len(search.split(" "))>1:
                        print("length 2 hai ")
                        queryset = self.queryset.filter((Q(attendance__employee__first_name__icontains=search_data[0]) & Q(attendance__employee__last_name__icontains=search_data[1])),
                                                        is_deleted=False,**filter).order_by(sort_field)
                        queryset_all=(queryset_all|queryset) 
                        return queryset_all                
                else:
                    queryset = self.queryset.filter(is_deleted=False,**filter).order_by(sort_field)
                    return queryset

            else:
                return queryset_all
        else:
            return list()
    
    def get(self, request, *args, **kwargs):
        response=super(__class__, self).get(self, request, args, kwargs)
        data_list =list()
        for data in response.data:
            data['approved_status']=  data['approved_status'].capitalize() if data['approved_status'] else None
            data['leave_type'] = 'Leave Balance' if data['leave_type'] == 'AL' else 'AB(Leave without pay)'
            
            # data_list.append([data['employee_name'],data['duration_start'][:10],data['duration_start'][11:19],data['duration_end'][11:19],\
            #                         data['duration'],data['deviation_amount'],data['request_date'],data['request_type'],data['justification'],data['justified_at'],data['remarks'],
            #                         data['approved_status'],data['approved_at'],data['leave_type'],data['created_at'][:10],\
            #                         data['created_at'][11:19],data['department'],data['designation'],data['reporting_head'],data['hod']])

            data_list.append([data['employee_name'],data['request_date'],data['justification'],data['justified_at'],data['remarks'],data['created_at'][:10],\
                                    data['created_at'][11:19],data['department'],data['designation'],data['reporting_head'],data['hod']])

        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/approval_report/document'):
                file_name = 'media/attendance/approval_report/document/attendance_report_p_ab.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/approval_report/document')
                file_name = 'media/attendance/approval_report/document/attendance_report_p_ab.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=['Employee Name','Date','Justification','Justified Date','Remarks','Requested(Date)','Requested(Time)','Department','Designation','Reporting Head','HOD'])
            export_csv = final_df.to_excel (file_path, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})



class AttendanceFileUploadFlexiHourForAbsentV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    parser_classes = (MultiPartParser,)
    

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance,create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return attendance
    def request_create(self, filter: dict):
        logdin_user_id = self.request.user.id  #attendance_date
        request,create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,owned_by_id=logdin_user_id,**filter)
        return request
        
    def post(self, request, *args, **kwargs):
        response = super().post(request,*args,**kwargs)
        # print("response",response.data['document'])
        print("Please wait...")
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        if request.is_secure():
            protocol = 'https://'
        else:
            protocol = 'http://'

        host_url = getHostWithPort(request)
        print('host_url',host_url)
        url = response.data['document'].replace(host_url,'./')
        # print("url", url)
        try:
            wb = xlrd.open_workbook(url)
        except xlrd.biffh.XLRDError:
            print("XLRDError occure")
        if wb:
            sh = wb.sheet_by_index(0)
        else:
            print("exit")
            exit()

        '''
        Skip the first few rows and read the excel after this rows in pandas
        '''
        a=[]
        for i in range(sh.nrows):
            for j in range(sh.ncols):
                if sh.cell_value(i,j) == 'Date' and sh.cell_value(i,j+1) == 'Time':
                    skip_row=i
                    for i in range(0,skip_row):
                        a.append(i)
                    data = pd.read_excel(url,skiprows=skip_row,converters={'Empid':str})
                    #print(data.head())

        data.dropna(axis = 0, how ='all', inplace = True)  #Remove blank rows with all nun column
        data = data.loc[:, ~data.columns.str.contains('^Unnamed')] #Remove blank unnamed columns
        #############################################################################################
        '''
            Exit device list & device_id in list form
        '''
        device_details = DeviceMaster.objects.filter(is_exit=True,is_deleted=False).values('id')
        if device_details:
            device_no_list = [x['id'] for x in device_details]
        # print("device_no_list", device_no_list)
        ##############################################################################################
        #day = data.get('Date')[0]

        day = datetime.now().strftime('%d/%m/%Y')
        # print("dayyy", day)
        if day:
            today_datetime = datetime.strptime(str(day)+'T'+'12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime",today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)
            # print("late_convence_limit",late_convence_limit)
            '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
            '''
            lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
            if lase_attendance:
                print('delete_data',lase_attendance[0].__dict__['id'])
                AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(
                 ~Q(
                    # (   
                    #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    # )|
                    (Q(cu_punch_id='#N/A'))|
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',flat=True)))
                ),
                (
                    Q(
                        Q(termination_date__isnull=False)&Q(
                            Q(
                                Q(termination_date__year=today_datetime.year)&Q(termination_date__month=today_datetime.month)
                            )|
                            Q(termination_date__date__gte=date_time_day)
                        )
                    )|
                    Q(Q(termination_date__isnull=True))
                ),
                #(Q(cu_user__in=[3187])),
                (Q(joining_date__date__lte=date_time_day)),cu_is_deleted=False).values() ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user',len(user_details))
            #time.sleep(30) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            #user_check_list = [x['cu_user_id']  for x in user_details]



            #return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})
        else:
            return Response({'result':{'request_status':0,'msg':'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                        month_end__date__gte=today_datetime.date(),is_deleted=False).values('grace_available',
                                                                                 'year_start_date', 'year_end_date', 'month', 
                                                                                 'month_start', 'month_end','grace_available'
                                                                                 )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date())|Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time','day_end_time__time','remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),is_deleted=False).values('full_day__date','remarks')

        ##########
        for user in user_details:
            user_count = user_count-1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            #holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(Q(holiday__holiday_date=date_time_day)&Q(state__id=t_core_state_id)).values('holiday__holiday_name')


            print('holiday',holiday)
            print("special_full_day",special_full_day)
            print("special_day",special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            ##########
            no_request = False
            day_remarks = ''
            if holiday:
                # holiday_name = holiday[0]["holiday_name"]
                day_remarks = holiday[0]["holiday__holiday_name"]
                no_request = True
            elif special_full_day:
                # special_full_day_name = special_full_day[0]["full_day__date"]
                day_remarks = special_full_day[0]["remarks"]
                no_request = True
            elif date_time_day.weekday()==6:
                # print("Sunday")
                day_remarks = "Sunday"
                no_request = True

            #################
            if date_time_day.weekday()==5 and no_request is False:
                ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                '''
                    filtering the AttendenceSaturdayOffMaster to get the off saturday.
                    all_s_day :: All Saturday off
                '''
                saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,is_deleted=False).values(
                    'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                print("saturday_off_list",date_time_day.weekday(), saturday_off_list)

                if saturday_off_list:
                    if saturday_off_list[0]['all_s_day'] is True:
                        # if user['is_saturday_off'] is True:
                        day_remarks = 'Saturday'
                        saturday_off = True

                    else:
                        week_date = date_time_day.day
                        # print("week_date",  week_date)
                        month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                        saturday_list = (0,1,2,3) if month_calender[0][calendar.SATURDAY] else (1,2,3,4)

                        if saturday_off_list[0]['first'] is True and int(week_date)==int(month_calender[saturday_list[0]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['second'] is True and int(week_date)==int(month_calender[saturday_list[1]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['third'] is True and int(week_date)==int(month_calender[saturday_list[2]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True
                        elif saturday_off_list[0]['fourth'] is True and int(week_date)==int(month_calender[saturday_list[3]][calendar.SATURDAY]):
                            day_remarks='Saturday'
                            saturday_off = True

                    # print("Saturday")

            #################

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user['daily_loginTime'] is None else user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user['daily_logoutTime'] is None else user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else user['lunch_end']
            
            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0]['day_start_time__time'] is not None else user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None and \
                                                                            special_day[0]['day_end_time__time']<user['daily_logoutTime'] else user['daily_logoutTime']
                print("daily_logoutTime",daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0]['remarks'] is not None else ''
            elif today_datetime.weekday()==5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user['daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'
            
            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            lunch_end = datetime.combine(today_datetime,user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime,daily_loginTime)
            daily_logout = datetime.combine(today_datetime,daily_logoutTime)

            is_saturday_off = user['is_saturday_off'] 
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0]['grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0]['month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id,is_deleted=False).values('first_grace')
                    grace_available = total_grace[0]['first_grace'] if total_grace[0]['first_grace'] is not None else 0
                    print("grace_available AAAA", grace_available, cu_user_id)

            availed_grace=AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                            Q(duration_start__gte=total_month_grace[0]['month_start']) &
                                                            Q(duration_start__lte=total_month_grace[0]['month_end']) &
                                                            Q(is_requested=True) &
                                                            Q(is_deleted=False)&
                                                            (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                            ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace',availed_grace)
            availed_grace = availed_grace if availed_grace else 0
            
            # if grace_available<availed_grace: #nur code 
            #     grace_over = True

            # for index, row in data.iterrows():
            #     #print('row',row)
            #     # lunch_start = datetime.combine(today_datetime,user['lunch_start'])
            #     date_time = str(row['Date'])+'T'+str(row['Time'])
            #     date_time_format = datetime.strptime(date_time, "%d/%m/%YT%H:%M:%S")
            #     #print('cu_punch_id_type',type(cu_punch_id),cu_punch_id)
            #     #print('rowEmpid',type(row['Empid']),row['Empid'])
            #     if cu_punch_id == row['Empid']:
            #         user_flag = 1
            #         ##################### Added By Rupam #######################
            #         deviceMasterDetails = DeviceMaster.objects.filter(device_no=int(row['CID']))
            #         if deviceMasterDetails:
            #             current_device = DeviceMaster.objects.get(device_no=int(row['CID']))
            #             # print("current_device",current_device)
            #         ##################### END ###################################
            #         pre_att_filter['employee_id'] = cu_user_id
            #         # pre_att_filter['day_remarks'] = 'Present'
            #         pre_att_filter['is_present'] = True
            #         pre_att_filter['date'] = date_time_format
            #         pre_att_filter['login_time'] = date_time_format
                    
            #         pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour # fh
                    
            #         # print("pre_att_filter",pre_att_filter)

            #         ##First time log in a Day##Successful
            #         if pre_att is None:                      
            #             if pre_att_filter:
            #                 pre_att = self.att_create(pre_att_filter)
            #                 '''
            #                 TODO :: Previous benchmark time was 30 min.
            #                 1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
            #                 and this can be taken 3 days in a month.
            #                 '''
            #                 bench_time = daily_login + timedelta(minutes=15)
            #                 # print('bench_time',bench_time)
            #                 # if saturday_off is False and no_request is False:

            #                 ###Check login if After USER Daily login time = Duration### Successful
            #                 if daily_login<pre_att_filter['login_time'] and saturday_off is False and no_request is False:
            #                     bench_filter['attendance']=pre_att
            #                     bench_filter['attendance_date'] = daily_login.date()
            #                     bench_filter['duration_start']=daily_login
            #                     bench_filter['duration_end']=pre_att_filter['login_time']
            #                     bench_filter['duration'] = round(((bench_filter['duration_end']-bench_filter['duration_start']).seconds)/60)
            #                     bench_filter['punch_id'] = cu_punch_id
            #                     if grace_available<availed_grace + float(bench_filter['duration']): #abhisek code 
            #                         grace_over = True
            #                     print('grace_over:', grace_over)
                    
            #                     print("bench_time>pre_att_filter['login_time']:", bench_time>pre_att_filter['login_time'])
            #                     print('user:', tcore_user.cu_user.get_full_name())
            #                     # time.sleep(5)
            #                     if bench_time>pre_att_filter['login_time'] and grace_over is False:
            #                         bench_filter['checkin_benchmark']=True
            #                         bench_filter['is_requested']=True
            #                     else:
            #                         bench_filter['checkin_benchmark']=False

            #                     if bench_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
            #                         bench_req = self.request_create(bench_filter)

            #         ##After Daily Attendance## Successful
            #         if pre_att:
            #             att_log_create, create1 = AttendanceLog.objects.get_or_create(
            #                 attendance=pre_att,
            #                 employee_id=cu_user_id,
            #                 time=date_time_format,
            #                 device_no=current_device
            #             )

            #             logout_time = date_time_format
            #             duration_count = 0
            #             # logic??? What is check_out? Explain 3 conditions.
            #             '''

            #                 1. 1st time checkout for exist device.
            #                 2. If date_time_format is less than daily_login.
            #                 3. between login and logout
            #             '''
            #             if saturday_off is False and no_request is False:
            #                 if check_out == 0 and current_device.__dict__['id'] in device_no_list and date_time_format<daily_logout:
            #                     # print("if current_device in device_no_list:")
            #                     check_out = 1
            #                     pre_req_filter['attendance'] = pre_att
            #                     pre_req_filter['punch_id'] = cu_punch_id
            #                     pre_req_filter['duration_start'] = date_time_format
            #                 elif check_out == 1 and current_device not in device_no_list and date_time_format<daily_login:
            #                     check_out = 0
            #                     pre_req_filter = {}
            #                 elif check_out == 1 and current_device not in device_no_list and date_time_format>daily_login:
            #                     check_out = 0
            #                     if date_time_format>daily_logout:
            #                         pre_req_filter['duration_end'] = daily_logout
            #                     else:
            #                         pre_req_filter['duration_end'] = date_time_format

            #                     if pre_req_filter['duration_start']<daily_login:
            #                         pre_req_filter['duration_start'] = daily_login
            #                     # else:
            #                     #     pre_req_filter['duration_end'] = date_time_format

            #                     # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
            #                     #     pre_req_filter['checkin_benchmark']=True
            #                     #     pre_req_filter['is_requested']=True

            #                     '''
            #                         Deviation duration calculation.
            #                     '''
            #                     if tcore_user.is_flexi_hour: # fh
            #                         duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
            #                     else:
            #                         if lunch_end < pre_req_filter['duration_start']:
            #                             duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
            #                         elif lunch_start > pre_req_filter['duration_end']:
            #                             duration_count = round(((pre_req_filter['duration_end']-pre_req_filter['duration_start']).seconds)/60)
            #                         elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter['duration_end']:
            #                             duration_count = round(((lunch_start - pre_req_filter['duration_start'] + pre_req_filter['duration_end'] - lunch_end).seconds)/60)
            #                         elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter['duration_end']:
            #                             duration_count = round(((lunch_start - pre_req_filter['duration_start']).seconds)/60)
            #                         elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter['duration_start']:
            #                             duration_count = round(duration_count + ((pre_req_filter['duration_end']-lunch_end).seconds)/60)

            #                     # print("duration_count",duration_count, pre_req_filter)
            #                     if duration_count>0:
            #                         pre_req_filter['duration']=duration_count
            #                         pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
            #                         pre_req = self.request_create(pre_req_filter)
            #                         pre_req_filter = {}
            #                         #print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=daily_logout
                        late_con_filter['duration_end']=logout_time
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit>=late_con_filter['duration_start'] and late_convence_limit<late_con_filter['duration_end']\
                            and late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)
                    
                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance']=pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date']=daily_logout.date()
                        late_con_filter['duration_start']=logout_time
                        late_con_filter['duration_end']=daily_logout
                        late_con_filter['duration'] = round(((late_con_filter['duration_end']-late_con_filter['duration_start']).seconds)/60)
                        late_con_filter['is_late_conveyance']=False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration']>0 and not tcore_user.is_flexi_hour: # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(late_con_filter)
                            # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag==0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  #changes by abhisek 21/11/19
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None   
                spacial_leave = EmployeeSpecialLeaves.objects.filter(Q(start_date__date__lte=date_time_day)&Q(end_date__date__gte=date_time_day)&Q(employee_id=cu_user_id)&  
                    (Q(approved_status='pending')|Q(approved_status='approved'))).values('leave_type','reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks']= 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter",att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks']="Not Present"

                if att_filter:
                    date = date_time[0:10]+'T'+str(daily_loginTime)
                    date_time_date =datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    #print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    #print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter",abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance']= abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login 
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end']-req_filter['duration_start']).seconds)/60) if not tcore_user.is_flexi_hour else None
                        
                        if spl_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']                            

                        elif adv_leave_type:
                            req_filter['request_type']='FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,",req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            if tcore_user.is_flexi_hour:
                                if spl_leave_type or adv_leave_type:
                                    abs_req = self.request_create(req_filter)
                            else:
                                abs_req = self.request_create(req_filter)
                            
                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result':{'request_status':1,'msg':'Successful'}})




## END Emergency added for request type P ## As per Change Request Document - Attendance & HRMS -CR-3 | Date : 19-06-2020 | Rupam Hazra ##


## Start Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##

class AttendanceConveyanceConfigurationAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceConfigurationAddSerializer
    pagination_class = OnOffPagination

    def get_queryset(self):
        sort_field='-id'
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name and order_by:
            if field_name =='grade' and order_by=='asc':
                    sort_field='grade__cg_name'
            if field_name =='grade' and order_by=='desc':
                sort_field='-grade__cg_name'
            if field_name =='sub_grade' and order_by=='asc':
                    sort_field='sub_grade__name'
            if field_name =='sub_grade' and order_by=='desc':
                sort_field='-sub_grade__name'

        return self.queryset.order_by(sort_field)

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)        

    @response_modify_decorator_list_or_get_before_execution_for_onoff_pagination
    def get(self, request, *args, **kwargs):
        return response

class AttendanceConveyanceConfigurationEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceConfigurationEditSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def put(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

class AttendanceConveyanceApprovalConfigurationAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceApprovalConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalConfigurationAddSerializer

    def get_queryset(self):
        sort_field='-id'
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name and order_by:
            if field_name =='level' and order_by=='asc':
                sort_field='level'
            if field_name =='level' and order_by=='desc':
                sort_field='-level'
            if field_name =='user' and order_by=='asc':
                sort_field='user__username'
            if field_name =='user' and order_by=='desc':
                sort_field='-user__username'

        return self.queryset.order_by(sort_field)

    def get_serializer(self, instance=None, data=None, many=False, partial=False):
        if data is not None:
            return super(AttendanceConveyanceApprovalConfigurationAddView, self).get_serializer(instance=instance,data=data, many=True, partial=partial)
        else:
            return super(AttendanceConveyanceApprovalConfigurationAddView, self).get_serializer(instance=instance, many=True, partial=partial)

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)
            
    @response_modify_decorator_list
    def list(self, request, *args, **kwargs):
        return response

class AttendanceConveyanceApprovalConfigurationEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceApprovalConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalConfigurationEditSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def put(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

class AttendanceConveyanceApprovalConfigurationDeleteView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceApprovalConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalConfigurationDeleteSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def put(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

class AttendanceConveyanceListView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer
    pagination_class = OnOffPagination

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'

        login_user_id = self.request.user.id
        login_user_level = None
        login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user).values_list('level',flat=True)
        if login_user_level_details:
            login_user_level = login_user_level_details[0]
        #print('login_user_level_details',login_user_level)
        
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        status = self.request.query_params.get('status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        is_paid = self.request.query_params.get('is_paid', None)
        apply = self.request.query_params.get('apply', None)
        is_flexi_hour = self.request.query_params.get('is_flexi_hour', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if apply:
            filter['apply'] = apply

        if employee_id:
        	filter['request__attendance__employee_id'] = employee_id

        if is_flexi_hour:
            filter['request__attendance__employee__cu_user__is_flexi_hour'] = is_flexi_hour

        if status:
            filter['status__in'] = status.split(',')

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            #exclude['created_by_id'] = None if account else login_user_id
            exclude['request__attendance__employee_id'] = None if account else login_user_id

        if account:
            if login_user_level : 
                filter['current_approval_level_view'] = login_user_level

        if is_paid:
            filter['is_paid'] = is_paid

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='attendance_date' and order_by=='asc':
                sort_field='request__attendance_date'

            if field_name =='attendance_date' and order_by=='desc':
                sort_field='-request__attendance_date'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        #print('filter',filter)
        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    @response_modify_decorator_list_or_get_before_execution_for_onoff_pagination
    def list(self, request, *args, **kwargs):
        return response

class AttendanceConveyanceListDetailsCountView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer
    #pagination_class = OnOffPagination

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'

        login_user_id = self.request.user.id
        login_user_level = None
        login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user).values_list('level',flat=True)
        if login_user_level_details:
            login_user_level = login_user_level_details[0]
        #print('login_user_level_details',login_user_level)
        
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        status = self.request.query_params.get('status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        is_paid = self.request.query_params.get('is_paid', None)
        apply = self.request.query_params.get('apply', None)
        is_flexi_hour = self.request.query_params.get('is_flexi_hour', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if apply:
            filter['apply'] = apply

        if employee_id:
            filter['request__attendance__employee_id'] = employee_id

        if is_flexi_hour:
            filter['request__attendance__employee__cu_user__is_flexi_hour'] = is_flexi_hour

        if status:
            filter['status__in'] = status.split(',')

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            exclude['created_by_id'] = None if account else login_user_id

        if account:
            if login_user_level : 
                filter['current_approval_level_view'] = login_user_level

        if is_paid:
            filter['is_paid'] = is_paid

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='created_at' and order_by=='asc':
                sort_field='created_at'

            if field_name =='created_at' and order_by=='desc':
                sort_field='-created_at'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    #@response_modify_decorator_list_or_get_before_execution_for_onoff_pagination
    def list(self, request, *args, **kwargs):
        response = super(__class__, self).list(self, request, args, kwargs)

        conveyance_count = 0
        applied_user_count = 0
        total_approved_expenses_amount = 0
        total_conveyance_deviation_amount = 0
        total_conveyance_eligibility_amount = 0

        conveyance_ids = set()

        for e_result in response.data:
            conveyance_ids.add(e_result['id'])

        #print('conveyance_ids',conveyance_ids,len(conveyance_ids))

        if ConveyanceMaster.objects.filter(is_deleted=False):
            _conveyanceMaster_details = ConveyanceMaster.objects.filter(is_deleted=False,pk__in=conveyance_ids)
            conveyance_count =  len(_conveyanceMaster_details)
            applied_user_count = len(_conveyanceMaster_details.values('created_by').distinct())
            total_approved_expenses_amount = _conveyanceMaster_details.aggregate(Sum('approved_expenses'))['approved_expenses__sum']
            total_conveyance_deviation_amount = _conveyanceMaster_details.aggregate(Sum('deviation_amount'))['deviation_amount__sum']

        # if ConveyanceConfiguration.objects.filter(is_deleted=False):
        #     _conveyanceConfiguration = ConveyanceConfiguration.objects.filter(is_deleted=False)
        #     total_conveyance_eligibility_amount = _conveyanceConfiguration.aggregate(Sum('amount'))['amount__sum']

        #print('total_approved_expenses_amount',type(total_approved_expenses_amount),type(total_conveyance_eligibility_amount))
        

        result = {
        'conveyance_count':conveyance_count,
        'applied_user_count':applied_user_count,
        #'total_conveyance_eligibility_amount':total_conveyance_eligibility_amount,
        'total_approved_expenses_amount':total_approved_expenses_amount if total_approved_expenses_amount else 0,
        'total_conveyance_deviation_amount':total_conveyance_deviation_amount if total_conveyance_deviation_amount else 0
        }

        return Response({'request_status':1,'results':result,'msg':'Found'})


class AttendanceConveyanceListDownloadView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'

        login_user_id = self.request.user.id

        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        status = self.request.query_params.get('status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        is_paid = self.request.query_params.get('is_paid', None)
        apply = self.request.query_params.get('apply', None)
        is_flexi_hour = self.request.query_params.get('is_flexi_hour', None)
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if apply:
            filter['apply'] = apply

        if employee_id:
        	filter['request__attendance__employee_id'] = employee_id

        if is_flexi_hour:
            filter['request__attendance__employee__cu_user__is_flexi_hour'] = is_flexi_hour

        if status:
            filter['status__in'] = status.split(',')

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            exclude['created_by_id'] = None if account else login_user_id

        if is_paid:
            filter['is_paid'] = is_paid

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='attendance_date' and order_by=='asc':
                sort_field='request__attendance_date'

            if field_name =='attendance_date' and order_by=='desc':
                sort_field='-request__attendance_date'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    def list(self, request, *args, **kwargs):
        response=super(__class__, self).list(self, request, args, kwargs)
        data_list =list()
        conveyance_ids = set()
        count = 0
        conveyance_count = 0
        applied_user_count = 0
        total_approved_expenses_amount = 0
        total_conveyance_deviation_amount = 0
        #total_conveyance_eligibility_amount = 0
        #print('response.data',response.data)

        for data in response.data:
            count += 1
            conveyance_ids.add(data['id'])
            #print('created_by',data['created_by'])
            

            if data['conveyance_alloted_by']:
                _conveyance_alloted_by_first_name = data['conveyance_alloted_by']['first_name'] if data['conveyance_alloted_by']['first_name'] else ''
                _conveyance_alloted_by_last_name = data['conveyance_alloted_by']['last_name'] if data['conveyance_alloted_by']['last_name'] else ''
                _conveyance_alloted_by_name = _conveyance_alloted_by_first_name+' '+_conveyance_alloted_by_last_name
            else:
                _conveyance_alloted_by_name = ''

            if data['conveyance_approved_by']:
                _conveyance_approved_by_first_name = data['conveyance_approved_by']['first_name'] if data['conveyance_approved_by']['first_name'] else ''
                _conveyance_approved_by_last_name = data['conveyance_approved_by']['last_name'] if data['conveyance_approved_by']['last_name'] else ''
                _conveyance_approved_by_name = _conveyance_approved_by_first_name +' '+_conveyance_approved_by_last_name
            else:
                _conveyance_approved_by_name =''
                
            deviation_amount = float(data['deviation_amount']) if data['deviation_amount'] else float(0)
            total_conveyance_deviation_amount = float(total_conveyance_deviation_amount) + deviation_amount

            status = data['status']
            if data['status'] == 'Approve':
                status = 'Approved'
            if data['status'] == 'Reject':
                status = 'Rejected'


            data_list.append(
                [
                    count,
                    data['employee_name'],
                    data['company'],
                    data['department'],
                    data['reporting_head'],
                    'OD Conveyance' if data['conveyance_type'] == 'Conveyance' else data['conveyance_type'],
                    #data['from_place'],
                    #data['to_place'],
                    #'Yes' if data['is_round'] else 'No',
                    #data['vehicle_type']['name'],
                    data['conveyance_purpose'],
                    data['conveyance_expense'],
                    '' if data['status'] == 'Pending for Reporting Head Approval' else data['approved_expenses'] ,
                    #'' if data['kilometers_travelled'] == 'null' else data['kilometers_travelled'],
                    _conveyance_alloted_by_name,
                    _conveyance_approved_by_name,
                    status,
                    'Yes' if data['is_paid'] else 'No',
                    data['created_at'][:10],
                    data['deviation_amount'],
                    #data['conveyance_configuration']['amount']
                ]
            )
        if ConveyanceMaster.objects.filter(is_deleted=False):
            _conveyanceMaster_details = ConveyanceMaster.objects.filter(is_deleted=False,pk__in=conveyance_ids)
            conveyance_count =  len(_conveyanceMaster_details)
            applied_user_count = len(_conveyanceMaster_details.values('created_by').distinct())
            total_approved_expenses_amount = _conveyanceMaster_details.aggregate(Sum('approved_expenses'))['approved_expenses__sum']

        # if ConveyanceConfiguration.objects.filter(is_deleted=False):
        #     _conveyanceConfiguration = ConveyanceConfiguration.objects.filter(is_deleted=False)
        #     total_conveyance_eligibility_amount = _conveyanceConfiguration.aggregate(Sum('amount'))['amount__sum']
            
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/conveyance_report/document'):
                file_name = 'media/attendance/conveyance_report/document/conveyance_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
                
            else:
                os.makedirs('media/attendance/conveyance_report/document')
                file_name = 'media/attendance/conveyance_report/document/conveyance_report.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(
                data_list, 
                columns=[
                'SL No.',
                'Employee Name',
                'Company',
                'Department',
                'Reporting Head',
                'Conveyance Type',
                #'From Place',
                #'To Place',
                #'Round Trip',
                #'Vehicle Type',
                'Conveyance purpose',
                'Conveyance expense',
                'Approved expenses',
                #'Kilometers travelled',
                'Conveyance alloted by',
                'conveyance approved by',
                'Status',
                'Paid Status',
                'Date',
                'Deviation amount',
                #'Eligibility Amount',
                # 'Reporting Head'
                ]
                )
            row_num = str(count+2)
            row_num_e = str(count+3)
            
            #Panda with xlsxwritter
            writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
            final_df.to_excel(writer, startrow=1, startcol=0,index = False, header=False)
            workbook  = writer.book
            worksheet = writer.sheets['Sheet1']
            style_property_1 = workbook.add_format({'bg_color':'#6495ED','font_color':'white','valign': 'vcenter'})
            header_fmt = workbook.add_format({'bg_color':'#6B8E23','font_color':'white'})
            red_font = workbook.add_format({'font_color':'red'})
            green_font = workbook.add_format({'font_color':'green'})
            
            # Header row color set
            for col_num, value in enumerate(final_df.columns.values):
                worksheet.write(0, col_num, value, header_fmt)
            
            # Deviation column color set (conditional formating)
            worksheet.conditional_format('P2:P'+str(count+1), {'type': 'cell',
                                         'criteria': '>',
                                         'value': 0,
                                         'format': red_font})
            
            worksheet.conditional_format('N2:N'+str(count+1), {'type': 'cell',
                                         'criteria': '==',
                                         'value': '"Yes"',
                                         'format': green_font})
            
            #Merge cells
            worksheet.merge_range('B'+row_num+':'+'B'+row_num_e, 'Conveyance Count : '+str(conveyance_count),style_property_1)
            worksheet.merge_range('C'+row_num+':'+'C'+row_num_e, 'Applied User Count : '+str(applied_user_count),style_property_1)
            #worksheet.merge_range('D'+row_num+':'+'D'+row_num_e, 'Total Conveyance Eligibility Amount : '+str(total_conveyance_eligibility_amount),style_property_1)
            worksheet.merge_range('E'+row_num+':'+'E'+row_num_e, 'Total Approved Expenses Amount : '+str(total_approved_expenses_amount),style_property_1)
            worksheet.merge_range('F'+row_num+':'+'F'+row_num_e, 'Total Conveyance Deviation Amount : '+str(total_conveyance_deviation_amount),style_property_1)
            writer.save()
         

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})
        
        #return Response({'request_status':1,'msg':'Success', 'url': ''})
       

class AttendanceConveyanceListForMyAccountView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer
    pagination_class = OnOffPagination

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'
        
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        approval_status = self.request.query_params.get('approval_status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        report = self.request.query_params.get('report', None) # For Report Section
        report_approval_status = self.request.query_params.get('report_approval_status', None) # For Report Section

        login_user_id = self.request.user.id
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if report:
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('id',flat=True)
            #print('login_user_level_details',login_user_level_details)
            #time.sleep(5)
            if login_user_level_details:
                login_user_level_id = login_user_level_details[0]
                if report_approval_status:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,approval_status__in=report_approval_status.split(',')).values_list('conveyance',flat=True) 
                else:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,).values_list('conveyance',flat=True) 

            else:
                filter['pk__in'] = ""


        if employee_id:
        	filter['request__attendance__employee_id'] = employee_id

        if approval_status:
            filter['status'] = 'Pending for Accounts Approval'
            login_user_level = None
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('level',flat=True)
            if login_user_level_details:
                login_user_level = login_user_level_details[0]
                filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_status__in= approval_status.split(',')).values_list('conveyance',flat=True)
                filter['current_approval_level_view'] = login_user_level
            else:
                filter['pk__in'] = ""

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='attendance_date' and order_by=='asc':
                sort_field='request__attendance_date'

            if field_name =='attendance_date' and order_by=='desc':
                sort_field='-request__attendance_date'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    @response_modify_decorator_list_or_get_before_execution_for_onoff_pagination
    def list(self, request, *args, **kwargs):
        return response

class AttendanceConveyanceListForMyAccountDetailsCountView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer
    #pagination_class = OnOffPagination

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'
        
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        approval_status = self.request.query_params.get('approval_status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        report = self.request.query_params.get('report', None) # For Report Section
        report_approval_status = self.request.query_params.get('report_approval_status', None) # For Report Section

        login_user_id = self.request.user.id
        
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if report:
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('id',flat=True)
            #print('login_user_level_details',login_user_level_details)
            #time.sleep(5)
            if login_user_level_details:
                login_user_level_id = login_user_level_details[0]
                if report_approval_status:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,approval_status__in=report_approval_status.split(',')).values_list('conveyance',flat=True) 
                else:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,).values_list('conveyance',flat=True) 

            else:
                filter['pk__in'] = ""


        if employee_id:
            filter['request__attendance__employee_id'] = employee_id

        if approval_status:
            filter['status'] = 'Pending for Accounts Approval'
            login_user_level = None
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('level',flat=True)
            if login_user_level_details:
                login_user_level = login_user_level_details[0]
                filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_status__in= approval_status.split(',')).values_list('conveyance',flat=True)
                filter['current_approval_level_view'] = login_user_level
            else:
                filter['pk__in'] = ""

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='created_at' and order_by=='asc':
                sort_field='created_at'

            if field_name =='created_at' and order_by=='desc':
                sort_field='-created_at'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    
    def list(self, request, *args, **kwargs):

        response = super(__class__, self).list(self, request, args, kwargs)

        conveyance_count = 0
        applied_user_count = 0
        total_approved_expenses_amount = 0
        total_conveyance_deviation_amount = 0
        #total_conveyance_eligibility_amount = 0
        conveyance_ids = set()

        for e_result in response.data:
            conveyance_ids.add(e_result['id'])
            deviation_amount = float(e_result['deviation_amount']) if e_result['deviation_amount'] else float(0)
            total_conveyance_deviation_amount = float(total_conveyance_deviation_amount) + deviation_amount

        if ConveyanceMaster.objects.filter(is_deleted=False):
            _conveyanceMaster_details = ConveyanceMaster.objects.filter(is_deleted=False,pk__in=conveyance_ids)
            conveyance_count =  len(_conveyanceMaster_details)
            applied_user_count = len(_conveyanceMaster_details.values('created_by').distinct())
            total_approved_expenses_amount = _conveyanceMaster_details.aggregate(Sum('approved_expenses'))['approved_expenses__sum']
            total_conveyance_deviation_amount = _conveyanceMaster_details.aggregate(Sum('deviation_amount'))['deviation_amount__sum']

        result = {
        'conveyance_count':conveyance_count,
        'applied_user_count':applied_user_count,
        #'total_conveyance_eligibility_amount':total_conveyance_eligibility_amount,
        'total_approved_expenses_amount':total_approved_expenses_amount if total_approved_expenses_amount else 0,
        'total_conveyance_deviation_amount':total_conveyance_deviation_amount if total_conveyance_deviation_amount else 0
        }

        return Response({'request_status':1,'results':result,'msg':'Found'})

class AttendanceConveyanceListForMyAccountDownloadView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceSerializer

    def get_queryset(self):
        filter = {}
        exclude = {}
        sort_field='-id'
        
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        approval_status = self.request.query_params.get('approval_status', None)
        month = self.request.query_params.get('month', None)
        year = self.request.query_params.get('year', None)
        company = self.request.query_params.get('company', None)
        department = self.request.query_params.get('department', None)
        reporting_head = self.request.query_params.get('reporting_head', None)
        employee_id = self.request.query_params.get('employee_id', None)
        account =  self.request.query_params.get('account', None)
        report = self.request.query_params.get('report', None) # For Report Section
        report_approval_status = self.request.query_params.get('report_approval_status', None) # For Report Section

        login_user_id = self.request.user.id
        from_date = self.request.query_params.get('from_date', None)
        to_date = self.request.query_params.get('to_date', None)

        ## Filter section

        if from_date and to_date:
            filter['request__attendance_date__gte'] = from_date
            filter['request__attendance_date__lte'] = to_date

        if report:
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('id',flat=True)
            if login_user_level_details:
                login_user_level_id = login_user_level_details[0]
                if report_approval_status:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,approval_status__in=report_approval_status.split(',')).values_list('conveyance',flat=True) 
                else:
                    filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_user_level=login_user_level_id,).values_list('conveyance',flat=True) 

            else:
                filter['pk__in'] = ""

        if employee_id:
        	filter['request__attendance__employee_id'] = employee_id

        if approval_status:
            filter['status'] = 'Pending for Accounts Approval'
            filter['pk__in'] = ConveyanceApproval.objects.filter(is_deleted=False,approval_status__in= approval_status.split(',')).values_list('conveyance',flat=True)
            login_user_level = None
            login_user_level_details = ConveyanceApprovalConfiguration.objects.filter(user = self.request.user,is_deleted=False).values_list('level',flat=True)
            if login_user_level_details:
                login_user_level = login_user_level_details[0]
                filter['current_approval_level_view'] = login_user_level

        if month and year:
            filter['created_at__year'] = year
            filter['created_at__month'] = month

        if company:
            filter['request__attendance__employee__cu_user__company_id__in'] = company.split(',')

        if department:
            filter['request__attendance__employee__cu_user__department_id__in'] = department.split(',')

        if reporting_head:
            filter['request__attendance__employee__cu_user__reporting_head_id__in'] = reporting_head.split(',')
            

        ## Sorting section
        if field_name and order_by:
            
            if field_name == 'created_by' and order_by == 'asc':
                sort_field ='created_by__username'

            if field_name =='created_by' and order_by=='desc':
                sort_field ='-created_by__username'

            if field_name == 'vehicle_type' and order_by == 'asc':
                sort_field ='vehicle_type__name'

            if field_name =='vehicle_type' and order_by=='desc':
                sort_field ='-vehicle_type__name'

            if field_name =='kilometers_travelled' and order_by=='asc':
                sort_field ='kilometers_travelled'

            if field_name =='kilometers_travelled' and order_by=='desc':
                sort_field='-kilometers_travelled'

            if field_name =='attendance_date' and order_by=='asc':
                sort_field='request__attendance_date'

            if field_name =='attendance_date' and order_by=='desc':
                sort_field='-request__attendance_date'

            if field_name == 'conveyance_expense' and order_by == 'asc':
                sort_field='conveyance_expense'

            if field_name == 'conveyance_expense' and order_by == 'desc':
                sort_field='-conveyance_expense'

        queryset = self.queryset.filter(**filter).exclude(**exclude).order_by(sort_field)
        #print('queryset',queryset.query)
        #time.sleep(5)
        return queryset

    def list(self, request, *args, **kwargs):
        response = super(__class__, self).list(self, request, args, kwargs)
        data_list = list()
        #print('response.data',response.data)
        conveyance_ids = set()
        count = 0
        conveyance_count = 0
        applied_user_count = 0
        total_approved_expenses_amount = 0
        total_conveyance_deviation_amount = 0
        #total_conveyance_eligibility_amount = 0
        
        for data in response.data:
            count += 1
            conveyance_ids.add(data['id'])
            #print('login_user_approved_status',data['login_user_approved_status'])
            

            if data['conveyance_alloted_by']:
                _conveyance_alloted_by_first_name = data['conveyance_alloted_by']['first_name'] if data['conveyance_alloted_by']['first_name'] else ''
                _conveyance_alloted_by_last_name = data['conveyance_alloted_by']['last_name'] if data['conveyance_alloted_by']['last_name'] else ''
                _conveyance_alloted_by_name = _conveyance_alloted_by_first_name+' '+_conveyance_alloted_by_last_name
            else:
                _conveyance_alloted_by_name = ''

            if data['conveyance_approved_by']:
                _conveyance_approved_by_first_name = data['conveyance_approved_by']['first_name'] if data['conveyance_approved_by']['first_name'] else ''
                _conveyance_approved_by_last_name = data['conveyance_approved_by']['last_name'] if data['conveyance_approved_by']['last_name'] else ''
                _conveyance_approved_by_name = _conveyance_approved_by_first_name +' '+_conveyance_approved_by_last_name
            else:
                _conveyance_approved_by_name =''
            deviation_amount = float(data['deviation_amount']) if data['deviation_amount'] else float(0)
            total_conveyance_deviation_amount = float(total_conveyance_deviation_amount) + deviation_amount



            data_list.append(
            [
            count,
            data['employee_name'],
            data['company'],
            data['department'],
            data['reporting_head'],
            'OD Conveyance' if data['conveyance_type'] == 'Conveyance' else data['conveyance_type'],
            #data['from_place'],
            #data['to_place'],
            #'Yes' if data['is_round'] else 'No',
            #data['vehicle_type']['name'],
            data['conveyance_purpose'],
            data['conveyance_expense'],
            data['approved_expenses'],
            #'' if data['kilometers_travelled'] == 'null' else data['kilometers_travelled'],
            _conveyance_alloted_by_name,
            _conveyance_approved_by_name,
            data['login_user_approved_status'],
            'Yes' if data['is_paid'] else 'No',
            data['created_at'][:10],
            data['deviation_amount'],
            #data['conveyance_configuration']['amount'],
            ]
            )

        if ConveyanceMaster.objects.filter(is_deleted=False):
            _conveyanceMaster_details = ConveyanceMaster.objects.filter(is_deleted=False,pk__in=conveyance_ids)
            conveyance_count =  len(_conveyanceMaster_details)
            applied_user_count = len(_conveyanceMaster_details.values('created_by').distinct())
            total_approved_expenses_amount = _conveyanceMaster_details.aggregate(Sum('approved_expenses'))['approved_expenses__sum']

        # if ConveyanceConfiguration.objects.filter(is_deleted=False):
        #     _conveyanceConfiguration = ConveyanceConfiguration.objects.filter(is_deleted=False)
        #     total_conveyance_eligibility_amount = _conveyanceConfiguration.aggregate(Sum('amount'))['amount__sum']

        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/conveyance_report/document'):
                file_name = 'media/attendance/conveyance_report/document/conveyance_report_for_account.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/conveyance_report/document')
                file_name = 'media/attendance/conveyance_report/document/conveyance_report_for_account.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            #print('file_path',file_path)

            final_df = pd.DataFrame(
                data_list, 
                columns=[
                'SL No.',
                'Employee Name',
                'Company',
                'Department',
                'Reporting Head',
                'Conveyance Type',
                #'From Place',
                #'To Place',
                #'Round Trip',
                #'Vehicle Type',
                'Conveyance purpose',
                'Conveyance expense',
                'Approved expenses',
                #'Kilometers travelled',
                'Conveyance alloted by',
                'conveyance approved by',
                'Status',
                'Paid Status',
                'Date',
                'Deviation amount',
                #'Eligibility Amount',
                # 'Reporting Head'
                ]
                )

            row_num = str(count+2)
            row_num_e = str(count+3)
            
            #Panda with xlsxwritter
            writer = pd.ExcelWriter(file_path, engine='xlsxwriter')
            final_df.to_excel(writer, startrow=1, startcol=0,index = False, header=False)
            workbook  = writer.book
            worksheet = writer.sheets['Sheet1']
            style_property_1 = workbook.add_format({'bg_color':'#6495ED','font_color':'white','valign': 'vcenter'})
            header_fmt = workbook.add_format({'bg_color':'#6B8E23','font_color':'white'})
            red_font = workbook.add_format({'font_color':'red'})
            green_font = workbook.add_format({'font_color':'green'})
            
            # Header row color set
            for col_num, value in enumerate(final_df.columns.values):
                worksheet.write(0, col_num, value, header_fmt)
            
            # Deviation column color set
            worksheet.conditional_format('P2:P'+str(count), {'type': 'cell',
                                         'criteria': '>',
                                         'value': 0,
                                         'format': red_font})
                                         
            worksheet.conditional_format('N2:N'+str(count+1), {'type': 'cell',
                                         'criteria': '==',
                                         'value': '"Yes"',
                                         'format': green_font})
            
            #Merge cells
            worksheet.merge_range('B'+row_num+':'+'B'+row_num_e, 'Conveyance Count : '+str(conveyance_count),style_property_1)
            worksheet.merge_range('C'+row_num+':'+'C'+row_num_e, 'Applied User Count : '+str(applied_user_count),style_property_1)
            #worksheet.merge_range('D'+row_num+':'+'D'+row_num_e, 'Total Conveyance Eligibility Amount : '+str(total_conveyance_eligibility_amount),style_property_1)
            worksheet.merge_range('E'+row_num+':'+'E'+row_num_e, 'Total Approved Expenses Amount : '+str(total_approved_expenses_amount),style_property_1)
            worksheet.merge_range('F'+row_num+':'+'F'+row_num_e, 'Total Conveyance Deviation Amount : '+str(total_conveyance_deviation_amount),style_property_1)
            writer.save()

        url = getHostWithPort(request) + file_name if file_name else None

        if url:                    
            return Response({'request_status':1,'msg':'Success', 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found', 'url': url})


class AttendanceConveyanceApprovalStatusUpdateByAccountView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceApproval.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceApprovalStatusUpdateByAccountSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class AttendanceConveyanceStatusUpdateView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceStatusUpdateSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class AttendanceConveyanceUpdateView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceUpdateSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def put(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

class AttendanceConveyanceAddView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceAddSerializer

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class AttendanceConveyanceDocAddView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceDocument.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceDocAddSerializer

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class AttendanceConveyancePaymentUpdateView(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceMaster.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyancePaymentUpdateSerializer

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_update
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class AttendanceConveyanceALLCountView(APIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def get(self, request):
        conveyance_count = 0
        applied_user_count = 0
        total_approved_expenses_amount = 0
        total_conveyance_deviation_amount = 0
        #total_conveyance_eligibility_amount = 0

        if ConveyanceMaster.objects.filter(is_deleted=False):
            _conveyanceMaster_details = ConveyanceMaster.objects.filter(is_deleted=False,status='Pending for Accounts Approval')
            print('_conveyanceMaster_details',_conveyanceMaster_details)
            conveyance_count =  len(_conveyanceMaster_details)
            applied_user_count = len(_conveyanceMaster_details.values('created_by').distinct())
            total_approved_expenses_amount = _conveyanceMaster_details.aggregate(Sum('approved_expenses'))['approved_expenses__sum']
            total_conveyance_deviation_amount = _conveyanceMaster_details.aggregate(Sum('deviation_amount'))['deviation_amount__sum']



        # if ConveyanceConfiguration.objects.filter(is_deleted=False):
        #     _conveyanceConfiguration = ConveyanceConfiguration.objects.filter(is_deleted=False)
        #     total_conveyance_eligibility_amount = _conveyanceConfiguration.aggregate(Sum('amount'))['amount__sum']

        #print('total_approved_expenses_amount',type(total_approved_expenses_amount),type(total_conveyance_eligibility_amount))
        #total_conveyance_deviation_amount = float(total_approved_expenses_amount) - float(total_conveyance_eligibility_amount)

        result = {
        'conveyance_count':conveyance_count,
        'applied_user_count':applied_user_count,
        #'total_conveyance_eligibility_amount':total_conveyance_eligibility_amount,
        'total_approved_expenses_amount':total_approved_expenses_amount,
        'total_conveyance_deviation_amount':total_conveyance_deviation_amount
        }
        return Response({'request_status':1,'results':result,'msg':'Found'})


## End Change Request Document__Attendance & HRMS (Conveyence Management) -CR-2 - V 1.2_Approved | Date: 23-06-2020 | Rupam Hazra ##


## Change Request HRMS_Conveyance CR-5.0 doc | Date: 16-09-2020 | Rupam Hazra ##

# Travel Mode,Price
class TravelModeAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = VehicleTypeMaster.objects.filter(is_deleted=False)
    serializer_class = TravelModeAddSerializer
    pagination_class = OnOffPagination

    def get_queryset(self):
        sort_field='-id'
        filter = dict()
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name and order_by:
            if field_name =='name' and order_by=='asc':
                sort_field='name'
            if field_name =='name' and order_by=='desc':
                sort_field='-name'
            if field_name =='price' and order_by=='asc':
                sort_field='price_per_km'
            if field_name =='price' and order_by=='desc':
                sort_field='-price_per_km'

        queryset = self.queryset.filter(**filter).order_by(sort_field)
        #print('queryset',queryset.query)
        return queryset

    
    @response_modify_decorator_list_or_get_before_execution_for_onoff_pagination
    def get(self, request, *args, **kwargs):
        return response

    @response_modify_decorator_post
    def post(self, request, *args, **kwargs):
        return super().post(request, *args, **kwargs)

class TravelModeEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = VehicleTypeMaster.objects.filter(is_deleted=False)
    serializer_class = TravelModeEditSerializer

    @response_modify_decorator_update
    def put(self, request, *args, **kwargs):
        return super().update(request, *args, **kwargs)

    @response_modify_decorator_get
    def get(self, request, *args, **kwargs):
        return response

class AttendanceConveyanceConfigurationDetailsView(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = ConveyanceConfiguration.objects.filter(is_deleted=False)
    serializer_class = AttendanceConveyanceConfigurationDetailsSerializer

    def get_queryset(self):
        sort_field='-id'
        user_id = self.request.query_params.get('user_id', None)
        if user_id:
            #user = TCoreUserDetail.objects.get(cu_user_id=user_id,cu_is_deleted=False,cu_user__is_active=True)
            user = TCoreUserDetail.objects.get(cu_user_id=user_id)
            print('user',user)
        filter = {
        #'grade':  user.employee_grade if user_id else self.request.user.cu_user.employee_grade,
        'sub_grade': user.employee_sub_grade if user_id else self.request.user.cu_user.employee_sub_grade,
        #'pk__in':(1,)
        }
        print('filter',filter)
        field_name = self.request.query_params.get('field_name', None)
        order_by = self.request.query_params.get('order_by', None)
        if field_name and order_by:
            # if field_name =='grade' and order_by=='asc':
            #         sort_field='grade__cg_name'
            # if field_name =='grade' and order_by=='desc':
            #     sort_field='-grade__cg_name'
            if field_name =='amount' and order_by=='asc':
                    sort_field='amount'
            # if field_name =='amount' and order_by=='desc':
            #     sort_field='-amount'
        queryset = self.queryset.filter(**filter).order_by(sort_field)
        #print('queryset',queryset.query)
        return queryset

    @response_modify_decorator_get_single
    def get(self, request, *args, **kwargs):
        return response

## Change Request HRMS_Conveyance CR-5.0 doc | Date: 16-09-2020 | Rupam Hazra ##

class AttendanceAutoApprovalStatusEditView(generics.RetrieveUpdateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceAutoApprovalRequestStatus.objects.all()
    serializer_class = AttendanceAutoApprovalStatusSerializer

    @response_modify_decorator_get_after_execution
    def get(self, request, *args, **kwargs):
        response = super(AttendanceAutoApprovalStatusEditView, self).get(self, request, args, kwargs)
        return response
    
    
## attendance file and doc upload
class AttendanceFRSFileAndRawDataUploadFlexiHourV2(generics.CreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    parser_classes = (MultiPartParser,)

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance, create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id, owned_by_id=logdin_user_id,
                                                               **filter)
        return attendance

    def request_create(self, user, filter: dict):
        logdin_user_id = self.request.user.id  # attendance_date
        # automatic approve if the user is removed from hrms
        if user.is_deleted == True and user.cu_user.is_active == False:
            filter['request_type'] = 'FD'
            filter['leave_type'] = 'AB'
            filter['is_requested'] = True
            filter['request_date'] = datetime.now()

            filter['justification'] = 'Auto Absent'
            filter['remarks'] = 'Auto Absent'
            filter['justified_by_id'] = logdin_user_id
            filter['justified_at'] = datetime.now()

            filter['approved_status'] = 'approved'
            filter['approved_by_id'] = logdin_user_id
            filter['approved_at'] = datetime.now()

        request, create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,
                                                                           owned_by_id=logdin_user_id, **filter)
        return request

    def post(self, request, *args, **kwargs):
        response = super().post(request, *args, **kwargs)
        # added flag to prevent deletion of last entry
        delete_last = self.request.query_params.get('delete_last', True)
        print("Please wait, delete_last is ", delete_last)
        # --
        print("processing...")
        #########################################################################################
        '''
            Always enter a .xlsx file.
            This code avoid Unnamed rows.
            File must have 
        '''
        url = getPathFromMediaURL(response.data['document'])
        print(url)
        wb = None
        try:
            wb = xlrd.open_workbook(url)
        except Exception as ex:
            return Response({'result': {'request_status': '{0}'.format(ex), 'msg': 'Failed', 'path': url}})

        if wb:
            sh = wb.sheet_by_index(0)
        else:
            return Response({'result': {'request_status': 'Read error', 'msg': 'Failed', 'path': url}})

        '''
        Read data from the first row
        '''
        data = pd.read_excel(url)
        print(type(data))
        print(data)
        '''
        Exit device list & device_id in list form
        '''
        for index, row in data.iterrows():
            # date_time_format = row['Time']
            # print(index, row)
            # user
            AttendanceFileRawDta.objects.create(person_id=row['Person ID'], name=row['Name'],department=row['Department'],
                                                time=datetime.strptime(str(row['Time']),"%Y-%m-%d %H:%M:%S"),
                                                attendance_status = str(row['Attendance Status']),
                                                attendance_check_point=row['Attendance Check Point'],
                                                data_source=str(row['Data Source']),
                                                handling_type=str(row['Handling Type']),
                                                temperature=str(row['Temperature']))
        device_no_list = list(DeviceMaster.objects.filter(is_exit=True, is_deleted=False).values_list('id', flat=True))
        print("device_no_list", device_no_list)
        # 08-09-2020  10:25:33 AM
        day = data.get('Time')[0].strftime('%d/%m/%Y')
        print('day', day)
        if day:
            today_datetime = datetime.strptime(str(day) + 'T' + '12:00:00', "%d/%m/%YT%H:%M:%S")
            print("today_datetime", today_datetime)
            date_time_day = today_datetime.date()
            late_convence_limit = today_datetime.replace(hour=20, minute=30)

            if delete_last:
                '''
                Delete only last Attendance  if these DATE had already in Attendance Date.
                '''
                lase_attendance = Attendance.objects.filter(date__date=date_time_day).order_by('-id')
                if lase_attendance:
                    print('delete_data', lase_attendance[0].__dict__['id'])
                    AttendanceApprovalRequest.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                    AttendanceLog.objects.filter(attendance=lase_attendance[0].__dict__['id']).delete()
                    Attendance.objects.filter(id=lase_attendance[0].__dict__['id']).delete()

            '''
                << Avoid attendance >>
                IF User is Demo_user or Super_user
                IF Punch id is ('PMSSITE000','#N/A','')
                IF User had already Attendance for this day.
            '''
            # logic??? what is the filter logic for except avoid attendence?
            '''
                1. Check If the user is terminated and termination date entered before termination date. 
                2. Check if the user joining date is less than entered date.
            '''
            user_details = TCoreUserDetail.objects.filter(
                ~Q(
                    # (   
                    #     Q(cu_user__in=TMasterModuleRoleUser.objects.filter(
                    #     Q(mmr_type=1)|Q(mmr_type=6)|Q(mmr_is_deleted=True)).values_list('mmr_user',flat=True))
                    # )|
                    (Q(cu_punch_id='#N/A')) |
                    (Q(cu_user_id__in=Attendance.objects.filter(date__date=date_time_day).values_list('employee',
                                                                                                      flat=True)))
                ),
                (
                        Q(
                            Q(termination_date__isnull=False) & Q(
                                Q(
                                    Q(termination_date__year=today_datetime.year) & Q(
                                        termination_date__month=today_datetime.month)
                                ) |
                                Q(termination_date__date__gte=date_time_day)
                            )
                        ) |
                        Q(Q(termination_date__isnull=True))
                ),
                # (Q(cu_user__in=[3187])),
                (Q(joining_date__date__lte=date_time_day))).values()  ##avoid 'PMSSITE000','#N/A' punch ids

            print('Total_user', len(user_details))
            # time.sleep(30) # logic??? Wait to check the user_count.
            user_count = len(user_details) if user_details else 0
            # user_check_list = [x['cu_user_id']  for x in user_details]

            # return Response({'result':{'request_status':user_check_list,'total_user_count':len(user_details),'msg':str(user_details)}})
        else:
            return Response({'result': {'request_status': 0, 'msg': 'Enter proper Excel'}})

        # logic??? What is the significance of AttendenceMonthMaster model and what is the logic of filtering? why lte and gte?
        '''
        Get the current month of AttendenceMonthMaster record.
        '''
        total_month_grace = AttendenceMonthMaster.objects.filter(month_start__date__lte=today_datetime.date(),
                                                                 month_end__date__gte=today_datetime.date(),
                                                                 is_deleted=False).values('grace_available',
                                                                                          'year_start_date',
                                                                                          'year_end_date', 'month',
                                                                                          'month_start', 'month_end',
                                                                                          'grace_available'
                                                                                          )
        # print("total_month_grace",total_month_grace)

        # logic??? What is the significance of AttendanceSpecialdayMaster model and what is the logic of filtering?
        '''
        filtering the AttendanceSpecialdayMaster based on start time and end time and fullday if declare spacial day.
        '''
        special_day = AttendanceSpecialdayMaster.objects.filter(((Q(day_start_time__date=today_datetime.date()) | Q(
            day_end_time__date=today_datetime.date())) & Q(is_deleted=False))).values('day_start_time__time',
                                                                                      'day_end_time__time', 'remarks')

        special_full_day = AttendanceSpecialdayMaster.objects.filter(full_day__date=today_datetime.date(),
                                                                     is_deleted=False).values('full_day__date',
                                                                                              'remarks')

        for user in user_details:
            user_count = user_count - 1
            print("Wait...", user_count)
            att_filter = {}
            req_filter = {}
            pre_att_filter = {}
            pre_req_filter = {}
            late_con_filter = {}
            bench_filter = {}
            saturday_off_list = None
            pre_att = None
            saturday_off = False

            logout_time = None
            check_out = 0
            # adv_leave_type = None
            user_flag = 0
            cu_punch_id = user['cu_punch_id'] if user['cu_punch_id'] else None
            sap_personnel_no = user['sap_personnel_no'] if user['sap_personnel_no'] else None
            cu_user_id = int(user['cu_user_id'])

            #################
            '''
            Modified By :: Rajesh Samui
            Reason :: State Wise Holiday Calculation
            Description :: Holiday is now state wise and user dependent.
            Line :: 1289-1318
            Date :: 10-02-2020
            '''
            # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
            tcore_user = TCoreUserDetail.objects.get(cu_user__id=cu_user_id)
            state_obj = tcore_user.job_location_state
            default_state = TCoreState.objects.filter(cs_state_name__iexact='west bengal').first()
            t_core_state_id = state_obj.id if state_obj else default_state.id
            holiday = HolidayStateMapping.objects.filter(
                Q(holiday__holiday_date=date_time_day) & Q(state__id=t_core_state_id)).values('holiday__holiday_name')

            print('holiday', holiday)
            print("special_full_day", special_full_day)
            print("special_day", special_day)

            # print(state_obj)
            # print(t_core_state_id)
            # print(holiday)

            no_request = False
            day_remarks = ''
            if tcore_user.is_deleted == False and tcore_user.cu_user.is_active == True:
                if holiday:
                    # holiday_name = holiday[0]["holiday_name"]
                    day_remarks = holiday[0]["holiday__holiday_name"]
                    no_request = True
                elif special_full_day:
                    # special_full_day_name = special_full_day[0]["full_day__date"]
                    day_remarks = special_full_day[0]["remarks"]
                    no_request = True
                elif date_time_day.weekday() == 6:
                    # print("Sunday")
                    day_remarks = "Sunday"
                    no_request = True

                if date_time_day.weekday() == 5 and no_request is False:
                    ## logic??? difference between AttendenceSaturdayOffMaster? meaning of all_s_day?
                    '''
                        filtering the AttendenceSaturdayOffMaster to get the off saturday.
                        all_s_day :: All Saturday off
                    '''
                    saturday_off_list = AttendenceSaturdayOffMaster.objects.filter(employee_id=cu_user_id,
                                                                                   is_deleted=False).values(
                        'first', 'second', 'third', 'fourth', 'all_s_day').order_by('-id')

                    print("saturday_off_list", date_time_day.weekday(), saturday_off_list)

                    if saturday_off_list:
                        if saturday_off_list[0]['all_s_day'] is True:
                            # if user['is_saturday_off'] is True:
                            day_remarks = 'Saturday'
                            saturday_off = True

                        else:
                            week_date = date_time_day.day
                            # print("week_date",  week_date)
                            month_calender = calendar.monthcalendar(date_time_day.year, date_time_day.month)
                            saturday_list = (0, 1, 2, 3) if month_calender[0][calendar.SATURDAY] else (1, 2, 3, 4)

                            if saturday_off_list[0]['first'] is True and int(week_date) == int(
                                    month_calender[saturday_list[0]][calendar.SATURDAY]):
                                day_remarks = 'Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['second'] is True and int(week_date) == int(
                                    month_calender[saturday_list[1]][calendar.SATURDAY]):
                                day_remarks = 'Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['third'] is True and int(week_date) == int(
                                    month_calender[saturday_list[2]][calendar.SATURDAY]):
                                day_remarks = 'Saturday'
                                saturday_off = True
                            elif saturday_off_list[0]['fourth'] is True and int(week_date) == int(
                                    month_calender[saturday_list[3]][calendar.SATURDAY]):
                                day_remarks = 'Saturday'
                                saturday_off = True

                        # print("Saturday")

            ###If user has no login/logout/lunch time >> Then fix their time##
            user['daily_loginTime'] = today_datetime.replace(hour=10, minute=00).time() if user[
                                                                                               'daily_loginTime'] is None else \
            user['daily_loginTime']
            user['daily_logoutTime'] = today_datetime.replace(hour=19, minute=00).time() if user[
                                                                                                'daily_logoutTime'] is None else \
            user['daily_logoutTime']
            user['lunch_start'] = today_datetime.replace(hour=13, minute=30).time() if user['lunch_start'] is None else \
            user['lunch_start']
            user['lunch_end'] = today_datetime.replace(hour=14, minute=00).time() if user['lunch_end'] is None else \
            user['lunch_end']

            ## If Change Login-Logout time (Special Day) ##
            if special_day:
                daily_loginTime = special_day[0]['day_start_time__time'] if special_day[0][
                                                                                'day_start_time__time'] is not None else \
                user['daily_loginTime']
                # daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0]['day_end_time__time'] is not None else user['daily_logoutTime']
                daily_logoutTime = special_day[0]['day_end_time__time'] if special_day[0][
                                                                               'day_end_time__time'] is not None and \
                                                                           special_day[0]['day_end_time__time'] < user[
                                                                               'daily_logoutTime'] else user[
                    'daily_logoutTime']
                print("daily_logoutTime", daily_logoutTime)
                pre_att_filter['day_remarks'] = special_day[0]['remarks'] if special_day[0][
                                                                                 'remarks'] is not None else ''
            elif today_datetime.weekday() == 5:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['saturday_logout'] if user['saturday_logout'] is not None else user[
                    'daily_logoutTime'].replace(hour=16, minute=00)
                pre_att_filter['day_remarks'] = 'Present'

            else:
                daily_loginTime = user['daily_loginTime']
                daily_logoutTime = user['daily_logoutTime']
                pre_att_filter['day_remarks'] = 'Present'

            ## LUNCH TIME ##
            lunch_start = datetime.combine(today_datetime, user['lunch_start'])
            lunch_end = datetime.combine(today_datetime, user['lunch_end'])

            ## DAILY LOGIN-LOGOUT ##
            # print("daily_loginTime", daily_loginTime, type(daily_loginTime))
            daily_login = datetime.combine(today_datetime, daily_loginTime)
            daily_logout = datetime.combine(today_datetime, daily_logoutTime)

            is_saturday_off = user['is_saturday_off']
            att_filter['employee_id'] = cu_user_id
            grace_over = False

            joining_date = user['joining_date']
            if total_month_grace:
                grace_available = total_month_grace[0]['grace_available'] if total_month_grace[0][
                                                                                 'grace_available'] is not None else 0
                print("GRACE", grace_available)
                if joining_date >= total_month_grace[0]['month_start'] and joining_date <= total_month_grace[0][
                    'month_end']:
                    total_grace = JoiningApprovedLeave.objects.filter(employee=cu_user_id, is_deleted=False).values(
                        'first_grace')
                    if total_grace.count() > 0:
                        grace_available = total_grace[0]['first_grace'] if total_grace[0][
                                                                               'first_grace'] is not None else 0
                        print("grace_available AAAA", grace_available, cu_user_id)
                    else:
                        raise Exception('User {0} has no entry in JoiningApprovedLeave table'.format(cu_user_id))

            availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=cu_user_id) &
                                                                     Q(duration_start__gte=total_month_grace[0][
                                                                         'month_start']) &
                                                                     Q(duration_start__lte=total_month_grace[0][
                                                                         'month_end']) &
                                                                     Q(is_requested=True) &
                                                                     Q(is_deleted=False) &
                                                                     (Q(request_type='GR') | Q(checkin_benchmark=True))
                                                                     ).aggregate(Sum('duration'))['duration__sum']
            print('availed_grace', availed_grace)
            availed_grace = availed_grace if availed_grace else 0

            # if grace_available<availed_grace: #nur code 
            #     grace_over = True

            for index, row in data.iterrows():
                date_time_format = row['Time']
                print('cu_punch_id_type', type(cu_punch_id), cu_punch_id)
                print('sap_personnel_no', sap_personnel_no)
                person_id = row['Person ID'].replace("'", "")
                if sap_personnel_no == person_id:
                    user_flag = 1
                    deviceMasterDetails = DeviceMaster.objects.filter(frs_check_point=row['Attendance Check Point'])
                    if deviceMasterDetails:
                        current_device = DeviceMaster.objects.get(frs_check_point=row['Attendance Check Point'])
                        print("current_device", current_device)

                    pre_att_filter['employee_id'] = cu_user_id
                    pre_att_filter['is_present'] = True
                    pre_att_filter['date'] = date_time_format
                    pre_att_filter['login_time'] = date_time_format

                    pre_att_filter['is_flexi_hour_att'] = tcore_user.is_flexi_hour

                    if pre_att is None:
                        if pre_att_filter:
                            pre_att = self.att_create(pre_att_filter)
                            '''
                            TODO :: Previous benchmark time was 30 min.
                            1. Benchmark time is 15 min (10:15 AM) for late attendance and early leaving before logout time(7:00 PM) 
                            and this can be taken 3 days in a month.
                            '''
                            bench_time = daily_login + timedelta(minutes=15)
                            # print('bench_time',bench_time)
                            # if saturday_off is False and no_request is False:

                            ###Check login if After USER Daily login time = Duration### Successful
                            if daily_login < pre_att_filter[
                                'login_time'] and saturday_off is False and no_request is False:
                                bench_filter['attendance'] = pre_att
                                bench_filter['attendance_date'] = daily_login.date()
                                bench_filter['duration_start'] = daily_login
                                bench_filter['duration_end'] = pre_att_filter['login_time']
                                bench_filter['duration'] = round(
                                    ((bench_filter['duration_end'] - bench_filter['duration_start']).seconds) / 60)
                                bench_filter['punch_id'] = cu_punch_id
                                if grace_available < availed_grace + float(bench_filter['duration']):  # abhisek code 
                                    grace_over = True
                                print('grace_over:', grace_over)

                                print("bench_time>pre_att_filter['login_time']:",
                                      bench_time > pre_att_filter['login_time'])
                                print('user:', tcore_user.cu_user.get_full_name())
                                # time.sleep(5)
                                if bench_time > pre_att_filter['login_time'] and grace_over is False:
                                    bench_filter['checkin_benchmark'] = True
                                    bench_filter['is_requested'] = True
                                else:
                                    bench_filter['checkin_benchmark'] = False

                                if bench_filter['duration'] > 0 and not tcore_user.is_flexi_hour:  # fh
                                    bench_req = self.request_create(tcore_user, bench_filter)

                    ##After Daily Attendance## Successful
                    if pre_att:
                        att_log_create, create1 = AttendanceLog.objects.get_or_create(
                            attendance=pre_att,
                            employee_id=cu_user_id,
                            time=date_time_format,
                            device_no=current_device
                        )

                        logout_time = date_time_format
                        duration_count = 0
                        # logic??? What is check_out? Explain 3 conditions.
                        '''

                            1. 1st time checkout for exist device.
                            2. If date_time_format is less than daily_login.
                            3. between login and logout
                        '''
                        if saturday_off is False and no_request is False:
                            if check_out == 0 and current_device.__dict__[
                                'id'] in device_no_list and date_time_format < daily_logout:
                                # print("if current_device in device_no_list:")
                                check_out = 1
                                pre_req_filter['attendance'] = pre_att
                                pre_req_filter['punch_id'] = cu_punch_id
                                pre_req_filter['duration_start'] = date_time_format
                            elif check_out == 1 and current_device not in device_no_list and date_time_format < daily_login:
                                check_out = 0
                                pre_req_filter = {}
                            elif check_out == 1 and current_device not in device_no_list and date_time_format > daily_login:
                                check_out = 0
                                if date_time_format > daily_logout:
                                    pre_req_filter['duration_end'] = daily_logout
                                else:
                                    pre_req_filter['duration_end'] = date_time_format

                                if pre_req_filter['duration_start'] < daily_login:
                                    pre_req_filter['duration_start'] = daily_login
                                # else:
                                #     pre_req_filter['duration_end'] = date_time_format

                                # if bench_time>pre_req_filter['duration_end'] and grace_over is False:
                                #     pre_req_filter['checkin_benchmark']=True
                                #     pre_req_filter['is_requested']=True

                                '''
                                    Deviation duration calculation.
                                '''
                                if tcore_user.is_flexi_hour:  # fh
                                    duration_count = round(((pre_req_filter['duration_end'] - pre_req_filter[
                                        'duration_start']).seconds) / 60)
                                else:
                                    if lunch_end < pre_req_filter['duration_start']:
                                        duration_count = round(((pre_req_filter['duration_end'] - pre_req_filter[
                                            'duration_start']).seconds) / 60)
                                    elif lunch_start > pre_req_filter['duration_end']:
                                        duration_count = round(((pre_req_filter['duration_end'] - pre_req_filter[
                                            'duration_start']).seconds) / 60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end < pre_req_filter[
                                        'duration_end']:
                                        duration_count = round(((lunch_start - pre_req_filter['duration_start'] +
                                                                 pre_req_filter[
                                                                     'duration_end'] - lunch_end).seconds) / 60)
                                    elif lunch_start > pre_req_filter['duration_start'] and lunch_end > pre_req_filter[
                                        'duration_end']:
                                        duration_count = round(
                                            ((lunch_start - pre_req_filter['duration_start']).seconds) / 60)
                                    elif lunch_end < pre_req_filter['duration_end'] and lunch_start < pre_req_filter[
                                        'duration_start']:
                                        duration_count = round(duration_count + (
                                            (pre_req_filter['duration_end'] - lunch_end).seconds) / 60)

                                # print("duration_count",duration_count, pre_req_filter)
                                if duration_count > 0:
                                    pre_req_filter['duration'] = duration_count
                                    pre_req_filter['attendance_date'] = pre_req_filter['duration_start'].date()
                                    pre_req = self.request_create(tcore_user, pre_req_filter)
                                    pre_req_filter = {}
                                    # print("pre_req",pre_req)
            '''
                To calculate if user can apply for late convence and create approval request based on that.
            '''
            if logout_time and pre_att:
                # print('pre_att',pre_att.id)
                pre_att_update = Attendance.objects.filter(pk=pre_att.id).update(logout_time=logout_time)
                if saturday_off is False and no_request is False:
                    ### IF Late convence ### Successful Testing
                    if daily_logoutTime < logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date'] = daily_logout.date()
                        late_con_filter['duration_start'] = daily_logout
                        late_con_filter['duration_end'] = logout_time
                        late_con_filter['duration'] = round(
                            ((late_con_filter['duration_end'] - late_con_filter['duration_start']).seconds) / 60)
                        late_con_filter['is_late_conveyance'] = True
                        # if late_con_filter['duration']>10: #If late conveyance grater then 10 Minutes.
                        '''
                            As per requirement and discussion with Tonmay Da(10.12.2019):
                            LATE CONVENCE always count after 08:30 PM 
                        '''
                        if late_convence_limit >= late_con_filter['duration_start'] and late_convence_limit < \
                                late_con_filter['duration_end'] \
                                and late_con_filter['duration'] > 0 and not tcore_user.is_flexi_hour:  # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(tcore_user, late_con_filter)
                            # print("late_req",late_req)

                    ###If Logout less then User's Daily log out### Successful Testing
                    elif daily_logoutTime > logout_time.time():
                        late_con_filter['attendance'] = pre_att
                        late_con_filter['punch_id'] = cu_punch_id
                        late_con_filter['attendance_date'] = daily_logout.date()
                        late_con_filter['duration_start'] = logout_time
                        late_con_filter['duration_end'] = daily_logout
                        late_con_filter['duration'] = round(
                            ((late_con_filter['duration_end'] - late_con_filter['duration_start']).seconds) / 60)
                        late_con_filter['is_late_conveyance'] = False
                        # late_con_filter['request_type']='GR'
                        if late_con_filter['duration'] > 0 and not tcore_user.is_flexi_hour:  # fh
                            # print("late_con_filter",late_con_filter)
                            late_req = self.request_create(tcore_user, late_con_filter)
                            # print("late_req",late_req)

            '''
            TODO :: leave remarks for one type of leave 
            '''
            ## IF User Absent ###
            if user_flag == 0:
                # print("ABSENT")
                is_required = False
                # print("user",cu_user_id)
                adv_leave_type = None
                leave = EmployeeAdvanceLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day) & Q(end_date__date__gte=date_time_day) & Q(
                        employee_id=cu_user_id) &  # changes by abhisek 21/11/19
                    (Q(approved_status='pending') | Q(approved_status='approved'))).values('leave_type', 'reason')
                # print("leave",leave)
                # holiday = HolidaysList.objects.filter(status=True,holiday_date=date_time_day).values('holiday_name')
                spl_leave_type = None
                spacial_leave = EmployeeSpecialLeaves.objects.filter(
                    Q(start_date__date__lte=date_time_day) & Q(end_date__date__gte=date_time_day) & Q(
                        employee_id=cu_user_id) &
                    (Q(approved_status='pending') | Q(approved_status='approved'))).values('leave_type', 'reason')

                if spacial_leave:
                    spl_leave_type = spacial_leave[0]['leave_type']
                    att_filter['day_remarks'] = spacial_leave[0]['leave_type']
                    is_required = True
                    time.sleep(5)
                    print('spacial leave found...')
                elif leave:
                    adv_leave_type = leave[0]['leave_type']
                    # print("leave_type",leave[0]['leave_type'])
                    att_filter['day_remarks'] = 'Leave'
                    is_required = True
                elif saturday_off is True or no_request is True:
                    att_filter['day_remarks'] = day_remarks
                    print("att_filter", att_filter, saturday_off, no_request)
                else:
                    is_required = True
                    att_filter['day_remarks'] = "Not Present"

                if att_filter:
                    date = date_time_format.strftime('%d/%m/%Y') + 'T' + str(daily_loginTime)
                    date_time_date = datetime.strptime(date, "%d/%m/%YT%H:%M:%S")
                    # print("date_time_format",date_time_date)
                    att_filter['date'] = date_time_date
                    # print("att_filter",att_filter)

                    abs_att = self.att_create(att_filter)
                    print("att_filter", abs_att, is_required)
                    if is_required is True:
                        req_filter['attendance'] = abs_att
                        req_filter['attendance_date'] = daily_login.date()
                        req_filter['duration_start'] = daily_login
                        req_filter['duration_end'] = daily_logout
                        req_filter['duration'] = round(((req_filter['duration_end'] - req_filter[
                            'duration_start']).seconds) / 60) if not tcore_user.is_flexi_hour else None

                        if spl_leave_type:
                            req_filter['request_type'] = 'FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = spl_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = spacial_leave[0]['reason']

                        elif adv_leave_type:
                            req_filter['request_type'] = 'FD'
                            req_filter['approved_status'] = 'approved'
                            req_filter['leave_type'] = adv_leave_type
                            req_filter['is_requested'] = True
                            req_filter['justification'] = leave[0]['reason']

                        if req_filter:
                            print("req_filter,", req_filter)
                            req_filter['punch_id'] = cu_punch_id
                            if tcore_user.is_flexi_hour:
                                if spl_leave_type or adv_leave_type:
                                    abs_req = self.request_create(tcore_user, req_filter)
                            else:
                                abs_req = self.request_create(tcore_user, req_filter)

                            print('attendance request created', abs_req, str(abs_req.id))

        return Response({'result': {'request_status': 1, 'msg': 'Successful', 'path': url}})



class AttendanceFRSFileAndRawDataUpdateFlexiHourV2(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttandancePerDayDocuments.objects.filter(is_deleted=False)
    serializer_class = AttendanceFileUploadFlexiHourSerializerV2
    # parser_classes = (MultiPartParser,)

    def att_create(self, filter: dict):
        logdin_user_id = self.request.user.id
        attendance, create1 = Attendance.objects.get_or_create(created_by_id=logdin_user_id, owned_by_id=logdin_user_id,
                                                               **filter)
        return attendance

    def request_create(self, user, filter: dict):
        logdin_user_id = self.request.user.id  # attendance_date
        # automatic approve if the user is removed from hrms
        if user.is_deleted == True and user.cu_user.is_active == False:
            filter['request_type'] = 'FD'
            filter['leave_type'] = 'AB'
            filter['is_requested'] = True
            filter['request_date'] = datetime.now()

            filter['justification'] = 'Auto Absent'
            filter['remarks'] = 'Auto Absent'
            filter['justified_by_id'] = logdin_user_id
            filter['justified_at'] = datetime.now()

            filter['approved_status'] = 'approved'
            filter['approved_by_id'] = logdin_user_id
            filter['approved_at'] = datetime.now()

        request, create2 = AttendanceApprovalRequest.objects.get_or_create(created_by_id=logdin_user_id,
                                                                           owned_by_id=logdin_user_id, **filter)
        return request

    def get(self, request, *args, **kwargs):
        response = super().get(request, *args, **kwargs)
        # added flag to prevent deletion of last entry
        delete_last = self.request.query_params.get('delete_last', True)
        sap_id = self.request.query_params.get('sap_id', None)
        start_date = self.request.query_params.get('start_date',None)
        end_date = self.request.query_params.get('end_date', None)
        print(start_date,end_date,sap_id)
        start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
        end_date = datetime.strptime(end_date, '%Y-%m-%d').date()
        end_date = end_date + timedelta(days=1)
        attendance_obj = AttendanceFileRawDta.objects.filter(person_id=sap_id,time__gte=start_date,time__lte=end_date)
        print(attendance_obj)
        return Response({'result': {'request_status': 1, 'msg': 'Successful'}})


class AttendanceFRSRawDataAddView(generics.ListCreateAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceFRSRawData.objects.all()
    serializer_class = AttendanceFRSRawDataSerializer
    pagination_class = OnOffPagination

    def get_queryset(self):
        person_id = self.request.query_params.get('person_id',None)
        department = self.request.query_params.get('department',None)
        attendance_date = self.request.query_params.get('attendance_date', None)
        start_date = self.request.query_params.get('start_date', None)
        end_date = self.request.query_params.get('end_date', None)
    
        
        # print(department)
        
        sort_field='-id'
        filter = dict()

        if person_id:
            filter['person_id__icontains'] = person_id

        if department:
            filter['department'] = department

        if attendance_date:
            filter['attendance_date'] = attendance_date

        if start_date and end_date:
            start_object = datetime.strptime(start_date, '%Y-%m-%d').date()
            filter['attendance_date__gte'] = start_object
            end_object = datetime.strptime(end_date, '%Y-%m-%d').date()
            filter['attendance_date__lte'] = end_object

        queryset = self.queryset.filter(**filter).order_by(sort_field)
        return queryset

class AttendanceFRSRawDataEditView(generics.RetrieveUpdateDestroyAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceFRSRawData.objects.all()
    serializer_class = AttendanceFRSRawDataSerializer
    pagination_class = OnOffPagination


class AttendanceGraceLeaveCalculationDwonload(generics.ListAPIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]
    queryset = AttendanceApprovalRequest.objects.filter(is_deleted=False)
    # serializer_class = AttendanceGraceLeaveListModifiedSerializer


    def all_leave_calculation_upto_applied_date(self, date_object=None, user=None):
        from django.db.models import Sum

        '''
        Start :: Normal leave availed by user
        '''

        sl_eligibility = 0
        el_eligibility = 0
        cl_eligibility = 0

        availed_hd_ab=0.0
        availed_ab=0.0
        availed_al = 0.0
        availed_cl = 0.0
        availed_el = 0.0
        availed_sl = 0.0

        availed_hd_al=0.0
        availed_hd_cl=0.0
        availed_hd_sl=0.0
        availed_hd_el=0.0

        carry_forward_leave = AttendanceCarryForwardLeaveBalanceYearly.objects.filter(
                    employee=user.cu_user, 
                    is_deleted=False,
                    ).first() #.aggregate(Sum('leave_balance'))
        print('carry_forward_leave:',carry_forward_leave)

        salary13_carry_forward_al = 0.0
        total_carry_forward_leave = 0.0

        if carry_forward_leave and user.salary_type and (user.salary_type.st_code=='FF' or user.salary_type.st_code=='EE'):
            salary13_carry_forward_al = carry_forward_leave.leave_balance
        
        # salary13_carry_forward_al = carry_forward_leave.leave_balance if carry_forward_leave and user.salary_type and user.salary_type.st_name=='13'and user.is_confirm else 0.0
        print('salary13_carry_forward_al:', salary13_carry_forward_al)

        month_master=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                                    month_end__date__gte=date_object,is_deleted=False).first()
        
        print("month_master:", month_master)
        attendence_daily_data = AttendanceApprovalRequest.objects.filter(((
            Q(leave_type_changed_period__isnull=False)&(Q(leave_type_changed_period='FD')|Q(leave_type_changed_period='HD')))|
            (Q(leave_type_changed_period__isnull=True)&(Q(request_type='FD')|Q(request_type='HD')))),
            duration_start__date__gte=month_master.year_start_date.date(),
            attendance__employee=user.cu_user.id,is_requested=True).values('duration_start__date').distinct()
        print("attendence_daily_data",attendence_daily_data)
        date_list = [x['duration_start__date'] for x in attendence_daily_data.iterator()]
        print("date_list",date_list)
        
        availed_master_wo_reject_fd = AttendanceApprovalRequest.objects.\
            filter((Q(approved_status='pending')|Q(approved_status='approved')|Q(approved_status='reject')),
                    (Q(leave_type__isnull=False)|Q(leave_type_changed_period__isnull=False)),
                    attendance__employee=user.cu_user.id,
                    attendance_date__in=date_list,is_requested=True,is_deleted=False).annotate(
                        leave_type_final = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='FD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='FD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    leave_type_final_hd = Case(
                        When((Q(leave_type_changed_period__isnull=False)&Q(leave_type_changed_period='HD')),then=F('leave_type_changed')),
                        When((Q(leave_type_changed_period__isnull=True)&Q(request_type='HD')),then=F('leave_type')),
                        output_field=CharField()
                    ),
                    ).values('leave_type_final','leave_type_final_hd','attendance_date').distinct()
        print('availed_master_wo_reject_fd',availed_master_wo_reject_fd)
        if availed_master_wo_reject_fd:
            for data in date_list:
                availed_FD=availed_master_wo_reject_fd.filter(attendance_date=data)
                #print("availed_HD",availed_FD)
                if availed_FD.filter(leave_type_final__isnull=False):
                    if availed_FD.values('leave_type_final').count() >1:
                        if availed_FD.filter(leave_type_final='AB'):
                            availed_ab=availed_ab+1.0
                        elif availed_FD.filter(leave_type_final='AL'):
                            availed_al = availed_al + 1.0
                        elif availed_FD.filter(leave_type_final='EL'):
                            availed_el = availed_el + 1.0
                        elif availed_FD.filter(leave_type_final='SL'):
                            availed_sl = availed_sl + 1.0
                        elif availed_FD.filter(leave_type_final='CL'):
                            availed_cl = availed_cl + 1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final']
                        if l_type == 'AL':
                            availed_al = availed_al + 1.0
                        elif l_type == 'AB':
                            availed_ab=availed_ab+1.0
                        elif l_type == 'EL':
                            availed_el=availed_el+1.0
                        elif l_type == 'SL':
                            availed_sl=availed_sl+1.0
                        elif l_type == 'CL':
                            availed_cl=availed_cl+1.0

                elif availed_FD.filter(leave_type_final_hd__isnull=False):
                    if availed_FD.values('leave_type_final_hd').count() >1:
                        if availed_FD.filter(leave_type_final_hd='AB'):
                            availed_hd_ab=availed_hd_ab+1.0
                        elif availed_FD.filter(leave_type_final_hd='AL'):
                            availed_hd_al=availed_hd_al+1.0
                        elif availed_FD.filter(leave_type_final_hd='CL'):
                            availed_hd_cl=availed_hd_cl+1.0
                        elif availed_FD.filter(leave_type_final_hd='EL'):
                            availed_hd_el=availed_hd_el+1.0
                        elif availed_FD.filter(leave_type_final_hd='SL'):
                            availed_hd_sl=availed_hd_sl+1.0
                    else:
                        l_type=availed_FD[0]['leave_type_final_hd']
                        if l_type == 'AL':
                            availed_hd_al=availed_hd_al+1.0
                        elif l_type == 'AB':
                            availed_hd_ab=availed_hd_ab+1.0
                        elif l_type == 'CL':
                            availed_hd_cl=availed_hd_cl+1.0
                        elif l_type == 'SL':
                            availed_hd_sl=availed_hd_sl+1.0
                        elif l_type == 'EL':
                            availed_hd_el=availed_hd_el+1.0
        
        '''
            Get total leave allocation(monthly) by request start and end date
        '''
        leave_allocation_per_month = 0.0
        leave_allocation_per_month_cl = 0.0
        leave_allocation_per_month_sl = 0.0
        leave_allocation_per_month_el = 0.0


        leave_allocation_per_month_d = AttendenceLeaveAllocatePerMonthPerUser.objects.filter(
            (
                Q(month__month_start__date__gte=month_master.year_start_date.date(),month__month_end__date__lte=date_object)|
                Q(month__month_start__date__lte=date_object,month__month_end__date__gte=date_object)
            ),employee=user.cu_user)

        if user.salary_type:
        
            if user.salary_type.st_code == 'FF' or user.salary_type.st_code == 'EE':
                leave_allocation_per_month = leave_allocation_per_month_d.aggregate(Sum('round_figure'))['round_figure__sum']

            if user.salary_type.st_code == 'CC' or user.salary_type.st_code == 'DD':
                #print('round_cl_allotted',leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum'])
                #print('round_el_allotted',leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum'])
                #print('round_sl_allotted',leave_allocation_per_month_d.aggregate(Sum('round_sl_allotted'))['round_sl_allotted__sum'])
                leave_allocation_per_month_cl = leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum']
                leave_allocation_per_month_el = leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum']
                leave_allocation_per_month_sl = leave_allocation_per_month_d.aggregate(Sum('round_sl_allotted'))['round_sl_allotted__sum']

            
            if user.salary_type.st_code == 'BB':
                leave_allocation_per_month_cl = leave_allocation_per_month_d.aggregate(Sum('round_cl_allotted'))['round_cl_allotted__sum']
                leave_allocation_per_month_el = leave_allocation_per_month_d.aggregate(Sum('round_el_allotted'))['round_el_allotted__sum']

            if user.salary_type.st_code == 'AA':
                leave_allocation_per_month_cl = 0
                leave_allocation_per_month_el = 0
                leave_allocation_per_month_sl = 0
                leave_allocation_per_month = 0

        else:
            leave_allocation_per_month_cl = 0
            leave_allocation_per_month_el = 0
            leave_allocation_per_month_sl = 0

        print('leave_allocation_per_month',leave_allocation_per_month)      


        # ::````Advance Leave Calculation```:: #
        '''
            Advance leave calculation from  after last attendance date to current month master end date.
        '''
        advance_leave=EmployeeAdvanceLeaves.objects.filter(Q(employee=user.cu_user)&
                                                           Q(is_deleted=False)&
                                                           (Q(approved_status='pending')|Q(approved_status='approved'))&
                                                           Q(start_date__date__lte=month_master.month_end.date())
                                                          ).values('leave_type','start_date','end_date')
        #print('advance_leave',advance_leave)     
        advance_al=0
        advance_ab=0
        advance_el=0
        advance_cl=0
        day=0

        last_attendance = Attendance.objects.filter(employee=user.cu_user).values_list('date__date',flat=True).order_by('-date')[:1]
        print("last_attendance",last_attendance)
        last_attendance = last_attendance[0] if last_attendance else date_object
        
        if last_attendance<month_master.month_end.date():
            print("last_attendancehfthtfrhfth",last_attendance)
            adv_str_date = last_attendance+timedelta(days=1)
            adv_end_date = month_master.month_end.date()+timedelta(days=1)
            if advance_leave:
                for leave in advance_leave:
                    print('leave',leave)
                    start_date=leave['start_date'].date()
                    end_date=leave['end_date'].date()+timedelta(days=1)
                    print('start_date,end_date',start_date,end_date)

                    if adv_str_date<=start_date and adv_end_date>=start_date:
                        if adv_end_date>=end_date:
                            day = (end_date-start_date).days
                        elif adv_end_date<=end_date:
                            day = (adv_end_date-start_date).days
                    elif adv_str_date>start_date:
                        if adv_end_date<=end_date:
                            day = (adv_end_date-adv_str_date).days
                        elif adv_str_date<=end_date and adv_end_date>=end_date:
                            day = (end_date-adv_str_date).days

                    if leave['leave_type']=='AL':
                        advance_al+=day
                    elif leave['leave_type']=='AB':
                        advance_ab+=day
                    elif leave['leave_type']=='CL':
                        advance_cl+=day
                    elif leave['leave_type']=='EL':
                        advance_el+=day
                    print('advance_al loop', advance_al)


        '''
            Section for count total leave count which means 
            total of advance leaves and approval leave
        '''
        
        #print('advance_al',advance_al)
        # print('how_many_days_ab_taken',how_many_days_ab_taken)
        
        #print("availed_el",availed_el)
        # print("availed_al",availed_al)
        # print('availed_ab',availed_ab)
        # print('advance_ab',advance_sl)
        # print('availed_hd_ab',availed_hd_ab)

        total_availed_al=float(availed_al)+float(advance_al)+float(availed_hd_al/2)
        total_availed_ab=float(availed_ab) + float(advance_ab) +float(availed_hd_ab/2)
        total_availed_cl=float(availed_cl) + float(advance_cl) +float(availed_hd_cl/2)
        total_availed_el=float(availed_el) + float(advance_el) +float(availed_hd_el/2)
        total_availed_sl=float(availed_sl) + float(availed_hd_sl/2)




        #print("total_availed_al",total_availed_al)
        print('total_availed_sl', total_availed_sl)

        '''
            Section for remaining leaves from granted leave - availed leave
        '''
        leave_allocation_per_month  = float(leave_allocation_per_month) + float(salary13_carry_forward_al)
        balance_al = leave_allocation_per_month - float(total_availed_al)
        balance_cl = float(leave_allocation_per_month_cl) - float(total_availed_cl)
        balance_sl = float(leave_allocation_per_month_sl) - float(total_availed_sl)
        balance_el = float(leave_allocation_per_month_el) - float(total_availed_el)


        availed_grace = AttendanceApprovalRequest.objects.filter(Q(attendance__employee=user.cu_user) &
                                                                Q(duration_start__gte=month_master.month_start) &
                                                                Q(duration_start__lte=month_master.month_end) &
                                                                Q(is_requested=True) & Q(is_deleted=False) &
                                                                (Q(request_type='GR')|Q(checkin_benchmark=True))
                                                                ).aggregate(Sum('duration'))['duration__sum']

        availed_grace = availed_grace if availed_grace else 0
        total_month_grace = month_master.grace_available
        grace_balance = total_month_grace - availed_grace

        # if user.salary_type and user.salary_type.st_name=='Bonus 13' and user.is_confirm == False:
        #     is_confirm = False
        # else:
        #     is_confirm = user.is_confirm

        yearly_leave_allocation = float(user.granted_cl) + float(user.granted_sl) + float(user.granted_el) + float(total_carry_forward_leave)
        sl_eligibility = float(user.granted_sl)
        el_eligibility = float(user.granted_el)
        cl_eligibility = float(user.granted_cl)


        month_start = month_master.month_start
        if user.joining_date > month_master.year_start_date:
            approved_leave=JoiningApprovedLeave.objects.filter(employee=user.cu_user,is_deleted=False).first()
            if approved_leave:
                yearly_leave_allocation = float(approved_leave.cl) + float(approved_leave.sl) + float(approved_leave.el)
                sl_eligibility = float(approved_leave.sl)
                el_eligibility = float(approved_leave.el)
                cl_eligibility = float(approved_leave.cl)

                if month_master.month==approved_leave.month:    #for joining month only
                    total_month_grace=approved_leave.first_grace
                    month_start=user.joining_date
                    grace_balance=total_month_grace - availed_grace

        # ad_lv_cal = advance_leave_calculation_excluding_current_month(tcore_user=user, date_object=date_object)
        # print('ad_lv_cal', ad_lv_cal)
        if user.salary_type:
            if user.salary_type.st_code == 'FF' or user.salary_type.st_code == 'EE':
                leave_allocation_per_month_cl = 0
                total_availed_cl =0
                balance_cl = 0
                leave_allocation_per_month_el = 0
                total_availed_el = 0
                balance_el = 0
                leave_allocation_per_month_sl = 0
                total_availed_sl = 0
                balance_sl = 0
                cl_eligibility = 0
                el_eligibility = 0
                sl_eligibility = 0

            if user.salary_type.st_code == 'CC' or user.salary_type.st_code == 'DD':
                yearly_leave_allocation = 0
                leave_allocation_per_month = 0
                total_availed_al = 0
                balance_al = 0

            if user.salary_type.st_code == 'BB':
                yearly_leave_allocation = 0
                leave_allocation_per_month = 0
                total_availed_al = 0
                balance_al = 0
                leave_allocation_per_month_sl = 0
                total_availed_sl = 0
                balance_sl = 0
                sl_eligibility = 0

            if user.salary_type.st_code == 'AA':
                yearly_leave_allocation = 0
                leave_allocation_per_month = 0
                total_availed_al = 0
                balance_al = 0

                leave_allocation_per_month_cl = 0
                total_availed_cl =0
                balance_cl = 0

                leave_allocation_per_month_el = 0
                total_availed_el = 0
                balance_el = 0

                leave_allocation_per_month_sl = 0
                total_availed_sl = 0
                balance_sl = 0
                
                cl_eligibility = 0
                el_eligibility = 0
                sl_eligibility = 0


        result = {
            "month_start":month_start,
            "month_end":month_master.month_end,
            "year_start":month_master.year_start_date,
            "year_end":month_master.year_end_date,
            "is_confirm": False,
            "total_month_grace": total_month_grace,
            "availed_grace": availed_grace,
            "grace_balance": grace_balance,
            "salary_type_code": user.salary_type.st_code if user.salary_type else "",
            "total_absent": total_availed_ab,

            "total_eligibility": yearly_leave_allocation,
            "total_accumulation": leave_allocation_per_month,
            "total_consumption": total_availed_al,
            "total_available_balance": balance_al,
            

            "cl_eligibility":cl_eligibility,
            "cl_accumulation":leave_allocation_per_month_cl,
            "cl_consumption":total_availed_cl,
            "cl_balance":balance_cl if balance_cl > 0 else 0.0,

            "el_eligibility":el_eligibility,
            "el_accumulation":leave_allocation_per_month_el,
            "el_consumption":total_availed_el,
            "el_balance":balance_el if balance_el > 0 else 0.0,

            "sl_eligibility":sl_eligibility,
            "sl_accumulation":leave_allocation_per_month_sl,
            "sl_consumption":total_availed_sl,
            "sl_balance": balance_sl if  balance_sl > 0 else 0.0,
            
            
            

            }



        return result


    def get(self, request, *args, **kwargs):
        # response=super(AttendanceGraceLeaveListModifiedView,self).get(self, request, args, kwargs)
        date =self.request.query_params.get('date', None)
        # print('date',type(date))
        date_object = datetime.strptime(date, '%Y-%m-%d').date()
        #date_object = datetime.now().date()
        #print('date_object',date_object)
        employee_id=self.request.query_params.get('employee_id', None)
        total_grace={}
        data_dict = {}
        data_list = list()
        is_previous=self.request.query_params.get('is_previous', None)

        aa = datetime.now()
        total_month_grace=AttendenceMonthMaster.objects.filter(month_start__date__lte=date_object,
                                        month_end__date__gte=date_object,is_deleted=False).values('grace_available',
                                                                                 'year_start_date',
                                                                                 'year_end_date',
                                                                                 'month',
                                                                                 'month_start',
                                                                                 'month_end')
        if is_previous == "true":
            #print('sada',type(total_month_grace[0]['month_start']))
            '''
                Changed by Rupam Hazra due to same variable date_object
            '''
            date_object = total_month_grace[0]['month_start'].date()- timedelta(days=1)

        if employee_id:
            users_count = 1
            users =  TCoreUserDetail.objects.filter(cu_user=employee_id,cu_is_deleted=False)
        else:
            users = TCoreUserDetail.objects.filter(
            (~Q(attendance_type__in=('CRM','Manual')) | Q(attendance_type__isnull=True)),
            (~Q(user_type='Director') | Q(user_type__isnull=True)),
            cu_is_deleted = False,
            cu_user__is_active= True,
            salary_type__isnull=False
            )
            users_count = len(users)
        for user in users:
            result = self.all_leave_calculation_upto_applied_date(date_object=date_object, user=user)
            data_list.append(
            [
            user.cu_user.get_full_name(),    
            result["salary_type_code"] if result["salary_type_code"] else "",
            result["total_absent"],

            result["total_eligibility"],
            result["total_accumulation"],
            result["total_consumption"],
            result["total_available_balance"],
            
            result["cl_eligibility"],
            result["cl_accumulation"],
            result["cl_consumption"],
            result["cl_balance"] if result["cl_balance"] > 0 else 0.0,

            result["el_eligibility"],
            result["el_accumulation"],
            result["el_consumption"],
            result["el_balance"] if result["el_balance"] > 0 else 0.0,

            result["sl_eligibility"],
            result["sl_accumulation"],
            result["sl_consumption"],
            result["sl_balance"] if  result["sl_balance"] > 0 else 0.0,
            
            
            
            ]
            )
        #return Response({'count':users_count,'result':data_list})
        file_name = ''
        if data_list:
            if os.path.isdir('media/attendance/approval_report/document'):
                file_name = 'media/attendance/approval_report/document/attendance_grace_leave.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name
            else:
                os.makedirs('media/attendance/approval_report/document')
                file_name = 'media/attendance/leave_report/document/attendance_grace_leave.xlsx'
                file_path = settings.MEDIA_ROOT_EXPORT + file_name

            final_df = pd.DataFrame(data_list, columns=[
                'Employee Name',
                'salary_type_code',
                'total_absent',

                'total_eligibility',
                'total_accumulation',
                'total_consumption',
                'total_available_balance',

                'cl_eligibility',
                'cl_accumulation',
                'cl_consumption',
                'cl_balance',

                'el_eligibility',
                'el_accumulation',
                'el_consumption',
                'el_balance',

                'sl_eligibility',
                'sl_accumulation',
                'sl_consumption',
                'sl_balance',
                
                
                
                ]
                )
            export_csv = final_df.to_excel (file_path, index = None, header=True)
            if request.is_secure():
                protocol = 'https://'
            else:
                protocol = 'http://'

        url = getHostWithPort(request) + file_name if file_name else None
        if url:                    
            return Response({'request_status':1,'msg':'Success','count':users_count, 'url': url})
        else:
            return Response({'request_status':0,'msg':'Not Found','count':0, 'url': url})

