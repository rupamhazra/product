from knox.auth import TokenAuthentication
from mailsend.models import *
from django.conf import settings
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView
from global_function import send_mail, send_mail_list, get_uid_sequence_for_event

# added email loggin module by Shubhadeep
import logging as email_logging
from logging.handlers import RotatingFileHandler
formatter = email_logging.Formatter('%(asctime)s %(levelname)s %(message)s')


def setup_logger():
    handler = RotatingFileHandler('email.log', maxBytes=20000, backupCount=5)
    handler.setFormatter(formatter)
    logger = email_logging.getLogger('email')
    logger.setLevel(email_logging.DEBUG)
    logger.addHandler(handler)
    return logger


email_logger = setup_logger()
# --

'''
    For Knox 
    Author : Rupam Hazra
    Date : 16.03.2020
'''

'''
    This module prepared by @@ Rupam Hazra. Any kind of issues occurred, ask me first !!!
    Version - 2.0
'''
'''
    Updated by Shubhadeep on 16th October '20
    email related actions are moved to global_function.send_mail and global_function.send_mail_list
'''

class MailSendApiView(APIView):
    permission_classes = [IsAuthenticated]
    authentication_classes = [TokenAuthentication]

    def post(self, request):
        # print('GetAppVersionView')
        email = request.data['email']
        # updated by Shubhadeep for ICS testing
        send_calendar = request.data.get('send_calendar', False)
        subject = request.data.get('subject', 'This is test mail')
        # --
        mail_response = ''

        mail_id = request.data['email']
        # ============= Mail Send ==============#
        if mail_id:
            mail_data = {
                "subject": subject
            }
            # updated by Shubhadeep for ICS testing
            if send_calendar:
                import datetime
                sequence, uid = get_uid_sequence_for_event(mail_id, 'mailsend-test', 1)
                even_time = datetime.datetime.now() + datetime.timedelta(hours=2)
                end_time = even_time + datetime.timedelta(hours=2)
                summery = "Demo event {0}".format(sequence)
                desc = "Demo event generated by Django backend"

                s_date = even_time.strftime("%Y%m%dT%H%M%S")
                e_date = end_time.strftime("%Y%m%dT%H%M%S")
                ics_data = """BEGIN:VCALENDAR
VERSION:2.0
METHOD:PUBLISH
CALSCALE:GREGORIAN
BEGIN:VEVENT
SUMMARY: {}
DTSTART;TZID=Asia/Kolkata:{}
DTEND;TZID=Asia/Kolkata:{}
LOCATION:Shyam Tower,Kolkata-700091
DESCRIPTION: {}
STATUS:CONFIRMED
SEQUENCE:{}
UID:{}
BEGIN:VALARM
TRIGGER:-PT10M
ACTION:DISPLAY
END:VALARM
END:VEVENT
END:VCALENDAR""".format(summery, s_date, e_date, desc, sequence, uid)

                send_mail('TEST001', mail_id, mail_data, ics_data)
            else:
                send_mail('TEST001', mail_id, mail_data)
            # --
        response_dict = {
            "msg": "success"
        }
        return Response(response_dict)


class GlobleMailSend(object):
    """docstring for GlobleMailSend"""

    def __init__(self, code, recipient_list: list, cc: list=None, bcc: list=None):
        super(GlobleMailSend, self).__init__()
        self.code = code
        self.from_email = settings.EMAIL_FROM_C
        self.recipient_list = recipient_list
        ## Cc and Bcc are added by Swarup Adhikary(23.12.2020)
        self.cc = cc if cc else list()
        self.bcc = bcc if bcc else list()

    def mailsend(self, mail_data: dict, attach=''):
        send_mail_list(self.code, self.recipient_list, mail_data, self.cc, self.bcc, ics=attach)
        return True
